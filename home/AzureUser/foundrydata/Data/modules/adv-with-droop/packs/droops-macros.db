{"name":"Lay on Hands","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/light_10.jpg","tooltip":"Lay on Hands_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Lay on Hands\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/light_10.jpg","actorIds":[],"_id":"09WVBEp4EKM4dy4x"}
{"name":"Dagger","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/dagger.jpg","tooltip":"Dagger_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Dagger\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/dagger.jpg","actorIds":[],"_id":"0RRVO1cKdIjvWORd"}
{"name":"Zone of Truth","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/runes-magenta-2.jpg","tooltip":"Zone of Truth_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Zone of Truth\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/runes-magenta-2.jpg","actorIds":[],"_id":"0yVyss3o0VQJYD1e"}
{"name":"Folder Permission","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Folder Permission ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Provides a prompt to set global permissions to all items within a folder.\r\n// Prompts the user for the folder name (case sensitive) and the permission level.\r\n\r\nconst form = `\r\n  <div style=\"display: inline-block; width: 100px\">Folder:</div>\r\n  <input type=\"string\" id=\"folderName\">\r\n  <br />\r\n\r\n  <div style=\"display: inline-block; width: 100px\">Permission:</div>\r\n  <select id=\"desiredPermission\" />\r\n    <option value=\"0\">None</option>\r\n    <option value=\"1\">Limited</option>\r\n    <option value=\"2\">Observer</option>\r\n    <option value=\"3\">Owner</option>\r\n  </select>\r\n  <br />\r\n\r\n  <label>\r\n  \t<input type=\"checkbox\" id=\"recurse\" checked/>\r\n    Recurse into subfolders\r\n\t</label>\r\n`;\r\n\r\nconst dialog = new Dialog({\r\n  title: \"Set desired permission\",\r\n  content: form,\r\n  buttons: {\r\n    use: {\r\n      label: \"Apply permissions\",\r\n      callback: applyPermissions\r\n    }\r\n  }\r\n}).render(true);\r\n\r\nfunction applyPermissions(html) {\r\n  const folderName = html.find(`input#folderName`)[0].value;\r\n  const permission = html.find(`select#desiredPermission`)[0].value;\r\n  const recurse = html.find(`input#recurse`)[0].checked;\r\n  \r\n  const folders = game.folders.filter(f => f.name === folderName);\r\n  if (folders.length === 0) {\r\n    ui.notifications.error(`Your world does not have any folders named '${folderName}'.`);\r\n  }\r\n  else if(folders.length > 1) {\r\n   ui.notifications.error(`Your world has more than one folder named ${folderName}`) \r\n  }\r\n  else {\r\n    repermission(folders[0], permission, recurse);\r\n    ui.notifications.notify(`Desired permissions were set successfully for  '${folderName}'.`);\r\n  }\r\n}\r\n\r\nfunction repermission(currentFolder, desiredPermission, recurse) {\r\n  console.debug(\"Repermissioning: \", currentFolder.name);\r\n  \r\n  if (currentFolder.content) {\r\n    currentFolder.content.map(item => {\r\n      let newPermissions = duplicate(item.data.permission);\r\n      newPermissions.default = desiredPermission;\r\n      console.debug(\"  Item:\", item.data.name);\r\n      item.update({ permission: newPermissions });\r\n    });\r\n  }\r\n\r\n  if (currentFolder.children && recurse) {\r\n    currentFolder.children.map(({ data }) => {\r\n      repermission(\r\n        game.folders.entities.filter(f => f.data._id == data._id)[0],\r\n        desiredPermission,\r\n        recurse);\r\n    });\r\n  }\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/usable.svg","actorIds":[],"_id":"1Ftx5bEUDf0391c2"}
{"name":"Javelin","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/bolt.png","tooltip":"Javelin_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Javelin\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/bolt.png","actorIds":[],"_id":"1M2reMu6Z7ZQCSw4"}
{"name":"Detect Poison and Disease","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/air-burst-jade-2.jpg","tooltip":"Detect Poison and Disease_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Detect Poison and Disease\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/air-burst-jade-2.jpg","actorIds":[],"_id":"1QxB5wVfbbmSoxQn"}
{"name":"Bite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/red_29.jpg","tooltip":"Bite_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Bite\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/red_29.jpg","actorIds":[],"_id":"1juM58jtZrt4AP42"}
{"name":"Eldritch Invocations: Agonizing Blast","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/affliction_12.jpg","tooltip":"Eldritch Invocations: Agonizing Blast_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Eldritch Invocations: Agonizing Blast\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/affliction_12.jpg","actorIds":[],"_id":"1wOV4c4dwYyC4kNF"}
{"name":"Word of Radiance","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/explosion-sky-3.jpg","tooltip":"Word of Radiance_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Word of Radiance\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/explosion-sky-3.jpg","actorIds":[],"_id":"217onwgpjW9k6okl"}
{"name":"23 - T03 - Spectral Images","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"23 - T03 - Spectral Images  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Another extreme example...\r\nlet params =\r\n[{\r\n    filterType: \"images\",\r\n    filterId: \"mySpectralImages\",\r\n    time: 0, \r\n    blend: 4,\r\n    nbImage: 4, \r\n    padding: 100,\r\n    alphaImg: 0.5, \r\n    alphaChr: 0.0,\r\n    ampX: 0.10, \r\n    ampY: 0.10,\r\n    animated :\r\n    {\r\n      time: \r\n      { \r\n        speed: 0.0010, \r\n        animType: \"move\" \r\n      },\r\n      ampX:\r\n      {\r\n        val1: 0, val2: 0.22,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 2500\r\n      },\r\n      ampY:\r\n      {\r\n        val1: 0, val2: 0.24,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 2500,\r\n        pauseBetweenDuration: 2500\r\n      },\r\n      alphaChr:        \r\n      {\r\n        val1: 1, val2: 0,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 2500\r\n      },\r\n      alphaImg:        \r\n      {\r\n        val1: 0.2, val2: 0.8,\r\n        animType: \"syncSinOscillation\",\r\n        loopDuration: 2500\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/23-t03-spectralimages.JPG","actorIds":[],"_id":"2FEKdaEnyhqCG1tZ"}
{"name":"Eldritch Invocations: Eyes of the Rune Keeper","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/rune-stone.svg","tooltip":"Eldritch Invocations: Eyes of the Rune Keeper_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Eldritch Invocations: Eyes of the Rune Keeper\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/rune-stone.svg","actorIds":[],"_id":"2L1BCcZJIuAJIjdx"}
{"name":"Identify","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/light-eerie-1.jpg","tooltip":"Identify_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Identify\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/light-eerie-1.jpg","actorIds":[],"_id":"2L8gY662A96D54qy"}
{"name":"23 - T01 - Mirror Images","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"23 - T01 - Mirror Images   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"images\",\r\n    filterId: \"myMirrorImages\",\r\n    time: 0,\r\n    nbImage: 4,\r\n    alphaImg: 1.0,\r\n    alphaChr: 0.0,\r\n    blend: 4,\r\n    ampX: 0.10,\r\n    ampY: 0.10,\r\n    animated :\r\n    {\r\n      time: \r\n      { \r\n        active: true, \r\n        speed: 0.0010, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/23-t01-mirrorimages.JPG","actorIds":[],"_id":"2UFYZ74cRD72niOr"}
{"name":"Stunned","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"bevel\",\r\n    autoDestroy: true,\r\n    rotation: 0,\r\n    thickness: 6,\r\n    lightColor: 0x00FF00,\r\n    lightAlpha: 0.7,\r\n    shadowColor: 0xFF0000,\r\n    shadowAlpha: 0.4,\r\n    animated :\r\n    {\r\n       rotation: \r\n       { \r\n          active: true,\r\n          clockWise: true, \r\n          loopDuration: 1000,\r\n          animType: \"chaoticOscillation\",\r\n          loops: 2,\r\n          animType: \"rotation\"\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnTargeted(params);","author":"s7gxOGja1p9WAX4j","img":"modules/condition-automation/icons/stunned.svg","actorIds":[],"_id":"2UOBvjCuXdWa6yLv"}
{"name":"Rope Trick","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/slice-spirit-1.jpg","tooltip":"Rope Trick_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Rope Trick\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/slice-spirit-1.jpg","actorIds":[],"_id":"2Yn3lQIBhy8Y1rfL"}
{"name":"03 - Drop Shadow","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"03 - Drop Shadow   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"shadow\",\r\n    filterId: \"myShadow\",\r\n    rotation: 35,\r\n    blur: 2,\r\n    quality: 5,\r\n    distance: 20,\r\n    alpha: 0.7,\r\n    padding: 10,\r\n    shadowOnly: false,\r\n    color: 0x000000,\r\n    animated:\r\n    {\r\n        blur:     \r\n        { \r\n           active: true, \r\n           loopDuration: 500, \r\n           animType: \"syncCosOscillation\", \r\n           val1: 2, \r\n           val2: 4\r\n        },\r\n        rotation:\r\n        {\r\n           active: true,\r\n           loopDuration: 100,\r\n           animType: \"syncSinOscillation\",\r\n           val1: 33,\r\n           val2: 37\r\n        }\r\n     }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/dropshadow.png","actorIds":[],"_id":"2hlPoXdjIM5KLxIX"}
{"name":"Magic Missile","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fire-arrows-magenta-1.jpg","tooltip":"Magic Missile_Meatshield ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Magic Missile\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fire-arrows-magenta-1.jpg","actorIds":[],"_id":"30bwsyYJdnNenDjH"}
{"name":"25 - T04 - Blue Rays ! (xray)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"25 - T04 - Blue Rays ! (xray)  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xray\",\r\n    filterId: \"myBlueRay\",\r\n    time: 0,\r\n    color: 0x1030FF,\r\n    blend: 9,\r\n    dimX: 1,\r\n    dimY: 1,\r\n    anchorX: 0,\r\n    anchorY: 0,\r\n    divisor: 24,\r\n    intensity: 1,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0002, \r\n          animType: \"move\" \r\n       },\r\n       anchorX:\r\n       {\r\n          animType: \"syncCosOscillation\",\r\n          loopDuration : 18000,\r\n          val1: 0.05,\r\n          val2: 0.95\r\n       },\r\n       anchorY:\r\n       {\r\n          animType: \"syncSinOscillation\",\r\n          loopDuration : 18000,\r\n          val1: 0.05,\r\n          val2: 0.95\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/25-t04-bluerays-xray.JPG","actorIds":[],"_id":"31Qr46COtdfY7ZqZ"}
{"name":"Crossbow, Light","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/crossbow-light.jpg","tooltip":"Crossbow, Light_Meatshield ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Crossbow, Light\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/crossbow-light.jpg","actorIds":[],"_id":"32v2xNvSXfHk2uqZ"}
{"name":"Channel Divinity (Cleric)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/yellow_07.jpg","tooltip":"Channel Divinity_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Channel Divinity\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/yellow_07.jpg","actorIds":[],"_id":"3HdrrYPRaE70EnJv"}
{"name":"Savage Attacker","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/blade-drag.svg","tooltip":"Savage Attacker_Billy ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Savage Attacker\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/blade-drag.svg","actorIds":[],"_id":"3YGcX6K3VwuIPXEl"}
{"name":"pan-camera","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"pan-camera ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Pan the canvas camera to a position X and Y, in pixels.\r\n// Can also set the zoom level using the third optional argument.\r\n// Example: /pan-camera 1500\r\n// Example: /pan-camera 2500 2000 0.3\r\n\r\ncanvas.pan({x: args[0], y: args[1], scale: args[2]})","author":"s7gxOGja1p9WAX4j","img":"imports/icons/cctv-camera.svg","actorIds":[],"_id":"3YUcdc4q5TTYlSQ8"}
{"name":"Whispered Message","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{},"scope":"global","command":"/**\r\n * Whispered Message Turn Alert\r\n * Creates an alert that whispers all GM users a message at the\r\n *   top of the round in round 10.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 10,\r\n    roundAbsolute: true,\r\n    turnId: null,\r\n    message: \"So secret... shhhh\",\r\n    recipientIds: game.users.filter((u) => u.isGM).map((u) => u.data._id),\r\n};\r\n\r\nTurnAlert.create(alertData);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"3cHRLJNI9IE3VVCH"}
{"name":"animate-pan","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"animate-pan ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* Pan the camera to the X, Y and scale positions.\r\n * See the 'pan-camera' macro for more details.\r\n * The first argument is the duration in milliseconds for the panning animation\r\n * The second argument is X, third argument is Y and fourth argument is the zoom level\r\n * Example: /animate-pan 500 1500 1500 0.5\r\n */\r\n\r\ncanvas.animatePan({duration: args[0], x: args[1], y: args[2], scale: args[3]})","author":"s7gxOGja1p9WAX4j","img":"imports/icons/cctv-camera.svg","actorIds":[],"_id":"3sMQSvxIP1Wtfq3a"}
{"name":"Set Name and Bars","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Set Name and Bars  ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Update all tokens on the map so that the name shows on hover and the bars always show.\r\n// Display Modes: ALWAYS, CONTROL, HOVER, NONE, OWNER, OWNER_HOVER\r\n\r\nconst tokens = canvas.tokens.placeables.map(token => {\r\n  return {\r\n    _id: token.id,\r\n    \"bar1.attribute\": \"attributes.hp\",\r\n    \"bar2.attribute\": \"attributes.ac.value\",\r\n    \"displayName\": CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\r\n    \"displayBars\": CONST.TOKEN_DISPLAY_MODES.OWNER\r\n  };\r\n});\r\n\r\ncanvas.scene.updateEmbeddedEntity('Token', tokens)\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/mug-shot.svg","actorIds":[],"_id":"41389AccHAyLMG2U"}
{"name":"Tool Proficiency","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}}},"scope":"global","command":"/**\r\n * Grab a list of tools in the selected player's inventory, then all the user to make a roll on the tool.\r\n * Will take into consideration if the player is proficient in using the tool.\r\n */\r\n\r\n// get the first entry from the array of currently selected tokens. Works best/exclusively with one selected token\r\nconst target = canvas.tokens.controlled[0].actor;\r\n// get the abilities of the selected token for ease of access later\r\nconst { abilities } = target.data.data;\r\n// Only items set as \"tools\" will be included!\r\n// get all held and equipped Tools/Kits/Supplies. Might want to replace with /[tT]ools|[kK]it|[sS]upplies|[sS]et$/ if gaming sets should be included\r\nconst toolsInInventory = target.items.filter( item => item.name.match(/[tT]ools|[kK]it|[sS]upplies$/) && item.data.data.hasOwnProperty(\"proficient\"));\r\n// const toolProficiencies = target.data.data.traits.toolProf; // Tools have proficiency mod in the object under <item>.data.data.proficient. \r\nlet tool = undefined;\r\n\r\n// Choose ability mod dialog\r\nconst abilityDialog = (async () => {\r\n    let template = `\r\n    <div>\r\n        <div class=\"form-group\">\r\n            <label>Choose ability</label>\r\n            <select id=\"selectedAbility\">`\r\n    for (let ability in abilities) {\r\n        switch (ability) {\r\n            case \"str\":\r\n                abilities[ability].name = \"Strength\"\r\n                break;\r\n            case \"dex\":\r\n                abilities[ability].name = \"Dexterity\"\r\n                break;\r\n            case \"con\":\r\n                abilities[ability].name = \"Constitution\"\r\n                break;\r\n            case \"int\":\r\n                abilities[ability].name = \"Intelligence\"\r\n                break;\r\n            case \"wis\":\r\n                abilities[ability].name = \"Wisdom\"\r\n                break;\r\n            case \"cha\":\r\n                abilities[ability].name = \"Charisma\"\r\n                break;\r\n            default:\r\n                console.log(\"something went wrong\");\r\n        }\r\n        template += `<option value=\"${ability}\">${abilities[ability].name} (${abilities[ability].value})</option>`;\r\n    }\r\n    template += `</select>\r\n        </div>\r\n    </div>`\r\n\r\n\r\n    new Dialog({\r\n        title: tool.name,\r\n        content: template,\r\n        buttons: {\r\n            ok: {\r\n                icon: '<i class=\"fas fa-check\"></i>',\r\n                label: \"OK\",\r\n                callback: async (html) => {\r\n                    const selection = html.find(\"#selectedAbility\")[0].value;\r\n                    console.log(tool, target);\r\n                    let prof = tool.data.data.proficient * target.data.data.attributes.prof; // target might be half or doubly proficient. This will make sure it is accounted for\r\n\r\n                    let messageContent = `${target.name} rolled a <b>[[1d20+${abilities[selection].mod}(${abilities[selection].name})+${prof}(Proficiency)]]</b> for the ${tool.name} check.<br>`;\r\n                    let chatData = {\r\n                        user: game.user.id,\r\n                        speaker: ChatMessage.getSpeaker(),\r\n                        content: messageContent,\r\n                        // uncomment the line below to always whisper the roll to the GM\r\n                        // whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n                    };\r\n                    ChatMessage.create(chatData, {});\r\n               }\r\n            },\r\n            cancel: {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: 'Cancel'\r\n            }\r\n        },\r\n        default: \"cancel\"\r\n    }).render(true);\r\n})\r\n\r\n// Choose tool dialog\r\nif (toolsInInventory.length) {\r\n    (async () => {\r\n        let template = `\r\n        <div>\r\n            <div class=\"form-group\">\r\n                <label>Choose a tool</label>\r\n                <select id=\"selectedTool\">`\r\n        toolsInInventory.forEach( tempTool => {    \r\n            template += `<option value=\"${tempTool.name}\">${tempTool.name}</option>`;\r\n        });\r\n        template += `</select>\r\n            </div>\r\n        </div>`;\r\n\r\n        new Dialog({\r\n            title: 'Which tool?',\r\n            content: template,\r\n            buttons: {\r\n                ok: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: \"OK\",\r\n                    callback: async (html) => {\r\n                        let selection = html.find(\"#selectedTool\")[0].value;\r\n                        tool = toolsInInventory.find( item => item.name === selection )\r\n                        abilityDialog();\r\n                   }\r\n                },\r\n                cancel: {\r\n                    icon: '<i class=\"fas fa-times\"></i>',\r\n                    label: 'Cancel'\r\n                }\r\n            },\r\n            default: \"cancel\"\r\n        }).render(true);\r\n    })()    \r\n}\r\n\r\nelse {\r\n    new Dialog({\r\n        title: 'No Tools!',\r\n        content: '<p>You don\\'t seem to have any tool with you.</p>',\r\n        buttons: {\r\n            ok: {\r\n                icon: '<i class=\"fas fa-check\"></i>',\r\n                label: \"OK\"\r\n            }\r\n        },\r\n        default: \"ok\"\r\n    }).render(true);\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/active_5.png","actorIds":[],"_id":"45P4oi4FSLiXCqhm"}
{"name":"Burning Hands","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fog-orange-2.jpg","tooltip":"Burning Hands_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Burning Hands\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fog-orange-2.jpg","actorIds":[],"_id":"45YQs6KTWDfOnEWI"}
{"name":"Mass Roll Check Creatures","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\r\n* Gets a list of selected tokens (or defaults to the user's character), provides a list of\r\n* skills, and then makes a roll for all the selected tokens with that skill. It then spits out\r\n* the poorly-formatted results to chat (or the GM if you uncomment the whisper line).\r\n*/\r\n\r\nlet targetActors = getTargetActors().filter(a => a != null);\r\nfunction checkForActors(){\r\n    if (!targetActors.length > 0)\r\n        throw new Error('You must designate at least one token as the roll target');\r\n};\r\ncheckForActors();\r\n\r\n// Choose roll type dialog\r\nlet rollTypeTemplate = `\r\n<div>\r\n    <div class=\"form-group\">\r\n        <label>Choose roll type</label>\r\n        <select id=\"selectedType\">\r\n            <option value=\"save\">Saving Throw</option>\r\n            <option value=\"ability\">Ability Check</option>\r\n            <option value=\"skill\">Skill Check</option>\r\n        </select>\r\n    </div>\r\n</div>`;\r\n\r\nlet chooseCheckType = new Dialog({\r\n    title: \"Choose check type\",\r\n    content: rollTypeTemplate,\r\n    buttons: {\r\n        ok: {\r\n            icon: '<i class=\"fas fa-check\"></i>',\r\n            label: \"OK\",\r\n            callback:  async (html) => {\r\n                let checkType = html.find(\"#selectedType\")[0].value;\r\n                selectedCheckDialog(checkType).render(true);\r\n            }\r\n        },\r\n        cancel: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: 'Cancel'\r\n        }\r\n    },\r\n    default: \"cancel\"\r\n});\r\n\r\n// Choose ability mod dialog\r\nfunction selectedCheckDialog(checkType) {\r\n\r\n    let dialogTitle = getCheckDialogTitle(checkType);\r\n    let dialogContent = getCheckTemplate(checkType);\r\n\r\n    return new Dialog({\r\n        title: dialogTitle,\r\n        content: dialogContent,\r\n        buttons: {\r\n            ok: {\r\n                icon: '<i class=\"fas fa-check\"></i>',\r\n                label: \"OK\",\r\n                callback: async (html) => {\r\n                    let id = html.find(\"#selectedAbility\")[0].value;\r\n\r\n                    let messageContent = `<div><h2>${checkType.toUpperCase()} Roll</h2></div>`\r\n                    for (let a of targetActors) {\r\n                        let name = a.name;\r\n                        let mod = 0;               \r\n                        switch (checkType) {\r\n                            case \"save\":\r\n                                mod = a.data.data.abilities[id].save;\r\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} saving throw)<br>`;\r\n                                break;\r\n                            case \"ability\":\r\n                                mod = a.data.data.abilities[id].mod + a.data.data.abilities[id].checkBonus;\r\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} check)<br>`;\r\n                                break;\r\n                            case \"skill\":\r\n                                mod = a.data.data.skills[id].total;\r\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.skills[id]} (${a.data.data.skills[id].ability}) check)<br>`;\r\n                                break;\r\n                            default:\r\n                                objects = game.dnd5e.config.skills;\r\n                                break;\r\n                        }\r\n                    }\r\n    \r\n                    let chatData = {\r\n                        user: game.user.id,\r\n                        speaker: game.user,\r\n                        content: messageContent,\r\n                        // Uncomment the following line if you want the results whispered to the GM.\r\n                        whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n                    };\r\n                    ChatMessage.create(chatData, {});\r\n                }\r\n            },\r\n            cancel: {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: 'Cancel'\r\n            }\r\n        },\r\n        default: \"cancel\"\r\n    });\r\n}\r\n\r\n// Gets list of selected tokens, or if no tokens are selected then the user's character.\r\nfunction getTargetActors() {\r\n    const character = game.user.character;\r\n    const controlled = canvas.tokens.controlled;\r\n    let actors = [];\r\n\r\n    if (controlled.length === 0) return [character] || null;\r\n\r\n    if (controlled.length > 0) {\r\n        let actors = [];\r\n        for (let i = 0; i < controlled.length; i++) {\r\n            actors.push(controlled[i].actor);\r\n    }\r\n\r\n    return actors;\r\n}\r\nelse throw new Error('You must designate at least one token as the roll target');\r\n}\r\n\r\n\r\n// Gets a template of abilities or skills, based on the type of check chosen.\r\nfunction getCheckTemplate(checkType) {\r\n    let objects = new Object();\r\n    \r\n    switch (checkType) {\r\n        case \"save\":\r\n        case \"ability\":\r\n            objects = game.dnd5e.config.abilities;\r\n            break;\r\n        case \"skill\":\r\n            objects = game.dnd5e.config.skills;\r\n            break;\r\n        default:\r\n            objects = game.dnd5e.config.skills;\r\n            break;\r\n    }\r\n\r\n    let template = `\r\n    <div>\r\n        <div class=\"form-group\">\r\n            <label>Choose check</label>\r\n            <select id=\"selectedAbility\">`\r\n    \r\n            for (let [checkId, check] of Object.entries(objects)) {\r\n                template += `<option value=\"${checkId}\">${check}</option>`;    \r\n            }            \r\n    \r\n    template += `</select>\r\n        </div>\r\n    </div>`;\r\n\r\n    return template;\r\n}\r\n\r\nfunction getCheckDialogTitle(checkType) {\r\n    switch (checkType) {\r\n        case \"save\":\r\n            return \"Saving Throw\"\r\n        case \"ability\":\r\n            return \"Ability Check\"\r\n        case \"skill\":\r\n            return \"Skill Check\"\r\n        default:\r\n            return \"Unknown Check\"\r\n    }\r\n}\r\n\r\nchooseCheckType.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/dice-fire.svg","actorIds":[],"_id":"4AkCMmgKhAGrJZyh"}
{"name":"All Alerts in Combat","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"modules/turnAlert/icons/debug.svg","tooltip":"All Alerts in Combat    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"function main() {\r\n    if (!game.combat) {\r\n        ui.notifications.error(\"There is no currently active combat.\");\r\n        return;\r\n    }\r\n    const alerts = game.combat?.data?.flags?.turnAlert?.alerts;\r\n\r\n    if (!alerts || alerts.length === 0) {\r\n        ui.notifications.error(\"There are no alerts on the currently active combat.\");\r\n        return;\r\n    }\r\n\r\n    const content = JSON.stringify(alerts, null, 2);\r\n    new Dialog(\r\n        {\r\n            title: \"DEBUG - All ALerts\",\r\n            content: `<textarea rows=\"40\" style=\"resize: none\" readonly>${content}</textarea>`,\r\n            buttons: {\r\n                done: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: \"Done\",\r\n                },\r\n            },\r\n        },\r\n        { width: 700 }\r\n    ).render(true);\r\n}\r\n\r\nmain();\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/debug.svg","actorIds":[],"_id":"4FRa7mz1ZZle46oH"}
{"name":"Loot Roll","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Table (Copy)   ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\n\r\nconst table = game.tables.entities.find(t => t.name === \"Treasure Table CR 0-4\");\r\nlet roll = table.roll();\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/open-treasure-chest.svg","actorIds":[],"_id":"4GP91K8nsYE0fCaW"}
{"name":"Ammo Updater","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Ammunition Updater\r\n(() => {\r\n  if(canvas.tokens.controlled.length !== 1) return ui.notificiations.error(`Select 1 Token.`);\r\n\r\n  let target = canvas.tokens.controlled[0];\r\n  let items = target.actor.items;\r\n\r\n  let weapons = items.filter(i=>i.type === \"weapon\" && i.data.data.properties.amm);\r\n  let weapon_options = ``;\r\n  for(let weapon of weapons)\r\n  {\r\n    weapon_options += `<option value=\"${weapon.id}\">${weapon.name}</option>`;\r\n  }\r\n\r\n  let ammos = items.filter(i=>i.type === \"consumable\" && i.data.data.consumableType === \"ammo\");\r\n  let ammo_options = ``;\r\n  for(let ammo of ammos)\r\n  {\r\n    ammo_options += `<option value=\"${ammo.id}\">${ammo.name}</option>`;\r\n  }\r\n\r\n  let dialog_context = `\r\n    <p>Choose Options</p>\r\n    <div class =\"form-group\">\r\n      <label>Select Weapon</label>\r\n      <select id=\"weapon\" name=\"weapon\">\r\n        ${weapon_options}\r\n      </select>\r\n      <p></p>\r\n      <label>Select Ammunition</label>\r\n      <select id =\"ammo\" name =\"ammo\">\r\n        ${ammo_options}\r\n      </select>\r\n      <p></p>\r\n    </div>`;\r\n\r\n  new Dialog({\r\n    content : dialog_context,\r\n    buttons : {\r\n      one : {\r\n        icon :`<i class=\"fas fa-check\"></i>`,\r\n        label : \"Switch Ammo\",\r\n        callback : async (html) => {\r\n          let update_weapon = items.get(html.find('[name=weapon]')[0].value);\r\n          let old_ammo = items.get(update_weapon.data.data.consume.target);\r\n          let update_ammo = items.get(html.find('[name=ammo]')[0].value);\r\n          let update = {\r\n            _id : update_weapon._id,\r\n            data : { \r\n              consume : {\r\n                type : \"ammo\",\r\n                target : update_ammo.id,\r\n                amount : 1\r\n              },\r\n              attackBonus : (update_weapon.data.data.attackBonus + update_ammo.data.data.attackBonus - old_ammo.data.data.attackBonus),\r\n              damage :{\r\n                parts : [\r\n                  update_weapon.data.data.damage.parts[0],\r\n                  update_ammo.data.data.damage.parts[0]\r\n                ]\r\n              }\r\n            }\r\n          };\r\n          await target.actor.updateEmbeddedEntity(\"OwnedItem\",update);\r\n          display(`\r\n            <img src=${target.data.img} width=\"50\" height=\"50\">\r\n            <img src=${update_weapon.data.img} width=\"25\" height=\"25\">\r\n            =>\r\n            <img src=${update_ammo.data.img} width=\"25\" height=\"25\">\r\n            <p></p>\r\n            <table>\r\n              <tr>\r\n                <td>\r\n                  ${target.data.name} has changed his ammunition on ${update_weapon.name} to ${update_ammo.name}.\r\n                </td>\r\n              </tr>\r\n            </table>`);\r\n            //console.log(target,update_weapon,old_ammo,update_ammo,update);\r\n        }\r\n      }\r\n    }\r\n  }).render(true);\r\n})();\r\n\r\nfunction display(data = \"\")\r\n{\r\n  ChatMessage.create({\r\n    content : data\r\n  });\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/quiver.svg","actorIds":[],"_id":"4SCxlQue6TO7M5dK"}
{"name":"F - 01 - Delete filters by Placeable","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"F - 01 - Delete filters by Placeable   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Delete all filters on the placeable in parameter (token or tile)\r\nTokenMagic.deleteFilters(_token);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/boomerang-cross.svg","actorIds":[],"_id":"50CsgkTKLtN8fTyf"}
{"name":"Wilderness Encounter Day","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{},"scope":"global","command":"// Wilderness Encounter - Daytime\r\n// Setting Variables\r\nlet msgContent = 'Wandering Monster Roll was: ';\r\nlet result = '';\r\n\r\n// Roll to Check For Wandering Monster\r\nresult = new Roll(`1d20`).roll().total;\r\n\r\n// Create the message\r\nif(result !== '') {\r\n\tlet chatData = {\r\n\t\tsound: CONFIG.sounds.dice,\r\n\t\tcontent: msgContent + result,\r\n\t\twhisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n\t}\r\n\tChatMessage.create(chatData, {});\r\n}\r\n\r\nif (result >= 17) {\r\n\tconst table = game.tables.entities.find(t => t.name === \"Wilderness Encounter Daytime\");\r\n\ttable.draw({}, {rollMode: \"gmroll\"});\r\n}","author":"s7gxOGja1p9WAX4j","img":"icons/svg/d20.svg","actorIds":[],"_id":"58QKJc9SzN6njxrx"}
{"name":"26 - T01 - Spectral Body (liquid)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"26 - T01 - Spectral Body (liquid)   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"liquid\",\r\n    filterId: \"mySpectralBody\",\r\n    color: 0x20AAEE,\r\n    time: 0,\r\n    blend: 8,\r\n    intensity: 4,\r\n    spectral: true,\r\n    scale: 0.9,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0010, \r\n          animType: \"move\" \r\n       },\r\n       color: \r\n       {\r\n          active: true, \r\n          loopDuration: 6000, \r\n          animType: \"colorOscillation\", \r\n          val1:0xFFFFFF, \r\n          val2:0x00AAFF\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/26-t01-spectralbody-liquid.JPG","actorIds":[],"_id":"59Ih2DqUosvbhx6C"}
{"name":"24 - T10 - Evil Aura","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T10 - Evil Aura  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myEvilField\",\r\n    shieldType: 9,\r\n    gridPadding: 1,\r\n    color: 0xFF3010,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 1,\r\n    lightAlpha: 4,\r\n    lightSize: 0.8,\r\n    scale: 0.5,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0012, \r\n        animType: \"move\" \r\n      },\r\n      lightSize:        \r\n      {\r\n        val1: 0.4, val2: 1.5,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 5000\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/24-t10-evilaura.JPG","actorIds":[],"_id":"5HqgFz09a9qB9pzk"}
{"name":"17 - Fumes","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"17 - Fumes   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fumes\",\r\n    filterId: \"myFumes\",\r\n    color: 0x808080,\r\n    time: 0,\r\n    blend: 8,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.001, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/fumes.png","actorIds":[],"_id":"5LhljA79TXohkpOC"}
{"name":"Mage Hand","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/ice_16.jpg","tooltip":"Mage Hand_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Mage Hand\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/ice_16.jpg","actorIds":[],"_id":"5PBhXYcFyc2my000"}
{"name":"Command","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/explosion-magenta-1.jpg","tooltip":"Command_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Command\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/explosion-magenta-1.jpg","actorIds":[],"_id":"5nm9ie6DQQ39LncA"}
{"name":"Vicious Mockery","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Random Mockeries (Vicious Mockery)  ","icon":"systems/dnd5e/icons/skills/emerald_06.jpg","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Courtesy of @Zarek\r\n// Selected target receives a random mockery from a table called \"mockeries\" along with the DC and damage.\r\n// You can find a table called mockeries in the community tables module.\r\n\r\n\r\nlet tableName = \"mockeries\";\r\n// default mockery if no table found.\r\nlet mockery = \"Now go away or I shall taunt you a second time-a!\";\r\n\r\nlet viciousMockeries = () => {\r\n  if (!actor) {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n    return\r\n  }\r\n\r\n  let actorLevels = actor.data.data.levels || 1;\r\n  let table = game.tables.entities.find(t => t.name == tableName);\r\n\r\n  // Get Targets name\r\n  const targetId = game.user.targets.ids[0];\r\n  const targetToken = canvas.tokens.get(targetId);\r\n  if (!targetToken) {\r\n    ui.notifications.warn(\"You must target a token.\");\r\n    return\r\n  }\r\n  const targetName = targetToken.name;\r\n\r\n  // Roll the result, and mark it drawn\r\n  if (table) {\r\n    if (checkTable(table)) {\r\n      let roll = table.roll();\r\n      let result = roll.results[0];\r\n      mockery = result.text;\r\n      table.updateEmbeddedEntity(\"TableResult\", {\r\n        _id: result._id,\r\n        drawn: true\r\n      });\r\n    }\r\n  }\r\n\r\n  function checkTable(table) {\r\n    let results = 0;\r\n    for (let data of table.data.results) {\r\n      if (!data.drawn) {\r\n        results++;\r\n      }\r\n    }\r\n    if (results < 1) {\r\n      table.reset();\r\n      ui.notifications.notify(\"Table Reset\")\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  // Add a message with damage roll\r\n  let numDie = 1;\r\n  if (actorLevels >= 17) {\r\n    numDie = 4;\r\n  } else if (actorLevels >= 11) {\r\n    numDie = 3;\r\n  } else if (actorLevels >= 5) {\r\n    numDie = 2;\r\n  }\r\n\r\n  let messageContent = `<p>${targetName} Roll WIS save DC [[8+${actor.data.data.abilities.cha.mod}+@attributes.prof]] or take [[${numDie}d4]] damage and have disadvantage.</p>`\r\n  messageContent += `<p>${token.name} exclaims <b><i>\"${mockery}\"</i></b></p>`\r\n  messageContent += `<details closed=\"\"><summary><a>Vicious Mockery</a></summary><p>You unleash a string of insults laced with subtle enchantments at a creature you can see within range. If the target can hear you (though it need not understand you), it must succeed on a <strong>Wisdom saving throw</strong> or take <strong>1d4 psychic damage</strong> and have <strong>disadvantage on the next attack roll</strong> it makes before the end of its next turn.</p>\r\n    <p>This spell’s damage increases by 1d4 when you reach 5th level ([[/r 2d4]]), 11th level ([[/r 3d4]]), and 17th level ([[/r 4d4]]).</p></details>`\r\n\r\n  // create the message\r\n  if (messageContent !== '') {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: messageContent,\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n  }\r\n};\r\n\r\nviciousMockeries();\r\n","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/emerald_06.jpg","actorIds":[],"_id":"5uMb3aA3p2feUsP1"}
{"name":"TeleportToToken","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"TeleportToToken ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let targetScene;\r\nif (!token) return ChatMessage.create({content: `No token selected`})\r\nfor (let scene of game.scenes.entities) {\r\n  var targetToken = scene.data.tokens.find(t => t.name === args[0]);\r\n  if (targetToken) {\r\n   targetScene = scene;\r\n   break;\r\n  }\r\n}\r\nif (!targetScene) return ChatMessage.create({content: `Could not find token ${args[0]} in any scene`});\r\nCanvasAnimation.terminateAnimation(`Token.${token.id}.animateMovement`);\r\n\r\nlet x = targetToken.x + targetScene.data.grid * (args[1] || 0);\r\nlet y = targetToken.y + targetScene.data.grid * (args[2] || 0);\r\nlet startScene = canvas.scene.id;\r\n\r\nawait game.macros.getName(\"createToken\")?.execute(targetScene.id, x, y, token.data)\r\nif(targetScene.id === startScene) {\r\n  await game.macros.getName(\"deleteToken\")?.execute(startScene, token.id)\r\n} else {\r\n  Hooks.once(\"canvasReady\", () => {\r\n    game.macros.getName(\"deleteToken\")?.execute(startScene, token.id)\r\n  })\r\n  await targetScene.view();\r\n}\r\ncanvas.pan(x,y)\r\n// This macro is intended to be used with Trigger Happy and requires Furnace advanced macros to run.\r\n// Sample trigger happy setup.\r\n// You must place two tokens on some scene(s). They must have unqiue name (not actor name, but token name).\r\n// @Token[Target1] @Trigger[move capture] @ChatMessage[/TeleportToToken Target2 -1 1]\r\n// The sample will, when a player moves their token over the target token \"Target1\", \r\n// delete the players token and recreate it next to the token named Target2\r\n// For the example above the players token will be placed 1 grid unit to the left of Target2 and one grid unit down from Target2\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/icon27.png","actorIds":[],"_id":"5vOKSVUI9e5vy2DZ"}
{"name":"EnlargeReduce","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"EnlargeReduce ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet originalSize = target.data.width;\r\nlet mwak = target.actor.data.data.bonuses.mwak.damage\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet TokenSetFlag = game.macros.getName(\"TokenSetFlag\");\r\nlet TokenUnSetFlag = game.macros.getName(\"TokenUnSetFlag\");\r\nif (args[0] === \"on\" && !target.getFlag('world', 'enlageReduceSpell')) {\r\n    if (target) {\r\n        new Dialog({\r\n            title: \"Enlarge or Reduce\",\r\n            buttons: {\r\n                one: {\r\n                    label: \"Enlarge\",\r\n                    callback: () => {\r\n                        let bonus = mwak + \" 1d4\";\r\n                        let enlarge = (originalSize + 1);\r\n                        ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : bonus });\r\n                        TokenUpdate.execute(args[1],{\"width\": enlarge, \"height\": enlarge});\r\n                        TokenSetFlag.execute(args[1], 'world', 'enlageReduceSpell', originalSize)\r\n                        ChatMessage.create({content: target.name + \" is enlarged\"})\r\n                    }\r\n                },\r\n                    two: {\r\n                        label: \"Reduce\",\r\n                        callback: () => {\r\n                        let bonus = mwak +  \" -1d4\";\r\n                        let size = originalSize\r\n                        let newSize = (size > 1) ? (size -1) : (size - 0.3)\r\n                        ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : bonus });\r\n                        TokenUpdate.execute(args[1],{\"width\": newSize, \"height\": newSize});\r\n                        TokenSetFlag.execute(args[1], 'world', 'enlageReduceSpell', originalSize)\r\n                        ChatMessage.create({content: target.name + \" is reduced\"})\r\n                        }\r\n                },\r\n            }\r\n        }).render(true);\r\n    }\r\n} else if(args[0] === \"off\" && target.getFlag('world', 'enlageReduceSpell')){\r\n    let newSize = target.getFlag('world', 'enlageReduceSpell')\r\n    ActorUpdate.execute(args[1],{\"data.bonuses.mwak.damage\" : mwak })\r\n    TokenUpdate.execute(args[1],{\"width\": newSize, \"height\": newSize});\r\n    TokenUnSetFlag.execute(args[1], 'world', 'enlageReduceSpell')\r\n    ChatMessage.create({content: target.name + \" is returned to normal size\"})\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/link-blue-2.jpg","actorIds":[],"_id":"6J2Zk2k8cGElCV6k"}
{"name":"Lucky (Halfling)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/lucky.jpg","tooltip":"Lucky (Halfling)_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Lucky (Halfling)\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/lucky.jpg","actorIds":[],"_id":"6LWzE6VycCdJNIB8"}
{"name":"F - 02 - Delete filters on Selected","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"F - 02 - Delete filters on Selected          ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\r\nTokenMagic.deleteFiltersOnSelected();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/magnet.svg","actorIds":[],"_id":"6OjdNnUW7n1qOE3n"}
{"name":"Random Cutting Words","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"// Courtesy of @Zarek\r\n// Selected target receives a random cutting word from a table called \"Mockeries\" along with the roll reduction.\r\n// You can find a mockeries table in the community table module.\r\n\r\nlet cuttingWords = () => {\r\n  // Setup variables\r\n  let tableName = \"mockeries\";\r\n  let mockery = \"Now go away or I shall taunt you a second time-a!\"; // if table can't be found, use this.\r\n\r\n  if (!actor) {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n    return\r\n  }\r\n  \r\n  let actorLevels = actor.data.data.levels || 1;\r\n  let table = game.tables.entities.find(t => t.name == tableName);\r\n  // Get Targets name\r\n  const targetId = game.user.targets.ids[0];\r\n  const targetToken = canvas.tokens.get(targetId);\r\n  if (!targetToken) {\r\n    ui.notifications.warn(\"You must target a token.\");\r\n    return\r\n  }\r\n  const targetName = targetToken.name;\r\n\r\n  // Roll the result, and mark it drawn\r\n  if (table) {\r\n    if (checkTable(table)) {\r\n      let roll = table.roll();\r\n      let result = roll.results[0];\r\n      mockery = result.text;\r\n      table.updateEmbeddedEntity(\"TableResult\", {\r\n        _id: result._id,\r\n        drawn: true\r\n      });\r\n    }\r\n  }\r\n\r\n  function checkTable(table) {\r\n    let results = 0;\r\n    for (let data of table.data.results) {\r\n      if (!data.drawn) {\r\n        results++;\r\n      }\r\n    }\r\n    if (results < 1) {\r\n      table.reset();\r\n      ui.notifications.notify(\"Table Reset\")\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  let dieType = 'd6';\r\n  if (actorLevels >= 15) {\r\n    dieType = 'd12';\r\n  } else if (actorLevels >= 10) {\r\n    dieType = 'd10';\r\n  } else if (actorLevels >= 5) {\r\n    dieType = 'd8';\r\n  }\r\n\r\n  let messageContent = `<p>${targetName} Reduce your roll by: <b>[[1${dieType}]]</b>.</p>`\r\n  messageContent += `<p>${token.name} exclaims <b><i>\"${mockery}\"</i></b></p>`\r\n  messageContent += `<details closed=\"\"><summary><a>Cutting Words</a></summary>\r\n  <p>When a creature that you can see within 60 feet of you makes an <b>Attack roll, an ability check, or a damage roll</b>, you can use your <b>Reaction</b> to expend one of your uses of <b>Bardic Inspiration</b>,\r\n  rolling a Bardic Inspiration die and subtracting the number rolled from the creature’s roll.</p>\r\n  <p>You can choose to use this feature after the creature makes its roll, but before the GM determines whether the Attack roll or ability check succeeds or fails, or before the creature deals its damage. \r\n  The creature is immune if it can’t hear you or if it’s immune to being <b>Charmed</b>.</p></details>`\r\n\r\n  // create the message\r\n  if (messageContent !== '') {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: messageContent,\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n  }\r\n};\r\n\r\ncuttingWords();\r\n","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/red_10.jpg","actorIds":[],"_id":"6SV3N68kKywE2Ma4"}
{"name":"Silent Image","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/air-burst-jade-2.jpg","tooltip":"Silent Image_Albrek ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Silent Image\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/air-burst-jade-2.jpg","actorIds":[],"_id":"6dNFZV9ioAthplCa"}
{"name":"WEC Encounter","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-black.svg","tooltip":"Wilderness Encounter Night (Copy)    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Wilderness Encounter - Wave Echo Cave\r\n// Setting Variables\r\nlet msgContent = 'Wandering Monster Roll was: ';\r\nlet result = '';\r\n\r\n// Roll to Check For Wandering Monster\r\nresult = new Roll(`1d20`).roll().total;\r\n\r\n// Create the message\r\nif(result !== '') {\r\n\tlet chatData = {\r\n\t\tsound: CONFIG.sounds.dice,\r\n\t\tcontent: msgContent + result,\r\n\t\twhisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n\t}\r\n\tChatMessage.create(chatData, {});\r\n}\r\n\r\nif (result >= 17) {\r\n    const table = game.tables.getName(\"WEC Encounters\");\r\n    game.betterTables.betterTableRoll(table);\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/troglodyte.svg","actorIds":[],"_id":"6ld4NgzSZvkv1xg2"}
{"name":"Resistance","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-royal-1.jpg","tooltip":"Resistance_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Resistance\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-royal-1.jpg","actorIds":[],"_id":"6q8VV7WSUJSmPrkN"}
{"name":"Trigger: Toggle Night","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Toggle Day    ","icon":"icons/svg/sun.svg","colour":"#ff8000","trigger":"return !canvas.scene.data.globalLight;","module":"macro-marker"}},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* Toggle between day and night\r\n * by setting the darkness and global illumination.\r\n *\r\n * Check out the marker tab for more information!\r\n */\r\n\r\nconst dayDarkness = 0;\r\nconst nightDarkness = 0.75;\r\n\r\ncanvas.scene.update({ \r\n  globalLight: !canvas.scene.data.globalLight,\r\n  darkness: canvas.scene.data.globalLight\r\n    ? nightDarkness\r\n    : dayDarkness\r\n});","author":"s7gxOGja1p9WAX4j","img":"icons/svg/sleep.svg","actorIds":[],"_id":"7CczblbLtRfYDP3i"}
{"name":"See Invisibility","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/evil-eye-eerie-2.jpg","tooltip":"See Invisibility_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"See Invisibility\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/evil-eye-eerie-2.jpg","actorIds":[],"_id":"7F1rwfIjqhBkbg8i"}
{"name":"Channel Divinity: Turn Undead","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/yellow_19.jpg","tooltip":"Channel Divinity: Turn Undead_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Channel Divinity: Turn Undead\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/yellow_19.jpg","actorIds":[],"_id":"7KaWirkoLwKPowvD"}
{"name":"Slow","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fog-magenta-2.jpg","tooltip":"Slow_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Slow\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fog-magenta-2.jpg","actorIds":[],"_id":"7UMvB01iyXZnoREO"}
{"name":"current-time","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"current-time  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Returns the current time in format \"HH:MM\" (24 hour format)\r\nconst now = new Date();\r\nreturn `${now.getHours()}:${now.getMinutes()}`;","author":"s7gxOGja1p9WAX4j","img":"imports/icons/watch.svg","actorIds":[],"_id":"7ZPrIUddbTc8cCZa"}
{"name":"Find Traps","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/light-blue-1.jpg","tooltip":"Find Traps_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Find Traps\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/light-blue-1.jpg","actorIds":[],"_id":"7cq077vN8F617krX"}
{"name":"24 - T07 - Mage Armor","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T07 - Mage Armor     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myMageField\",\r\n    shieldType: 7,\r\n    gridPadding: 1.05,\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 10,\r\n    intensity: 0.8,\r\n    lightAlpha: 1,\r\n    lightSize: 0.45,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/magearmor.png","actorIds":[],"_id":"7hCpbTY0M09CaKfw"}
{"name":"Staff of Defense > Shield (Staff of Defense)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"MagicItems.roll(\"Staff of Defense\",\"Shield (Staff of Defense)\");","author":"s7gxOGja1p9WAX4j","img":"/systems/dnd5e/icons/spells/protect-magenta-1.jpg","actorIds":[],"_id":"80AOUJ0LCkejowpx"}
{"name":"Check Spellslots","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro             ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Get me the Spell counts for the tokens I select\r\n// Written by Jon Whitehouse [MTGCarver#7753]\r\n\r\n// Get my selected tokens please\r\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\r\n\r\n// if there are no selected tokens, display default character\r\nif (actors.length < 1) {\r\n    actors = game.users.entities.map(entity => {\r\n        if (entity.active && entity.character !== null) {\r\n            return entity.character;\r\n        }\r\n    });\r\n}\r\nconst validActors = actors.filter(actor => actor != null);\r\nlet messageContent = '<h2><b><center>Current Spellslots</b></h2></center><br><br>';\r\n\r\nfor (const selectedActor of validActors) {\r\n    let spellsdc = selectedActor.data.data.attributes.spelldc; // Spell DC\r\n    let flc = selectedActor.data.data.spells.spell1.value; // 1st level Current Spells\r\n    let flm = selectedActor.data.data.spells.spell1.max; // 1st level MAX Spells\r\n    let slc = selectedActor.data.data.spells.spell2.value; // 2nd level Current\r\n    let slm = selectedActor.data.data.spells.spell2.max; // 2nd level Max\r\n    let tlc = selectedActor.data.data.spells.spell3.value; // 3rd level Current\r\n    let tlm = selectedActor.data.data.spells.spell3.max; // 3rd level Max\r\n\r\n    messageContent += `<h2>${selectedActor.name} - Spell DC: ${spellsdc}</h2>1st Level: <b>${flc}</b>/${flm}</b><br>2nd level: <b>${slc}/${slm}</b><br>3rd level: <b>${tlc}/${tlm}</b><br><br>`; // creating the output string\r\n}\r\n\r\n// create the message\r\nif (messageContent !== \"\") {\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: messageContent,\r\n        whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/sun.svg","actorIds":[],"_id":"81mHRXsBcpvYHsfF"}
{"name":"Howto Roll with Adv or Dis","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"game.journal.getName(\"Roll with adv or dis\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Nat-d20.svg","actorIds":[],"_id":"88DkdKKEfMMGCW6V"}
{"name":"Coordinated Attack","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/coordinated-attack.jpg","tooltip":"Coordinated Attack_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Coordinated Attack\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/coordinated-attack.jpg","actorIds":[],"_id":"88R8IPAgqWxQIY7J"}
{"name":"25 - T02 - Lucky Clover (xray)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"25 - T02 - Lucky Clover (xray)    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xray\",\r\n    filterId: \"myLuckyRays\",\r\n    time: 0,\r\n    color: 0x00FF00,\r\n    blend: 9,\r\n    dimX: 0.05,\r\n    dimY: 0.05,\r\n    anchorX: 0.5,\r\n    anchorY: 0.5,\r\n    divisor: 4,\r\n    intensity: 1,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0012, \r\n          animType: \"move\" \r\n       },\r\n       anchorX:\r\n       {\r\n          animType: \"syncCosOscillation\",\r\n          loopDuration : 6000,\r\n          val1: 0.40,\r\n          val2: 0.60\r\n       },\r\n       anchorY:\r\n       {\r\n          animType: \"syncSinOscillation\",\r\n          loopDuration : 6000,\r\n          val1: 0.40,\r\n          val2: 0.60\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/25-t02-luckyclover-xray.JPG","actorIds":[],"_id":"8AFBw7jpoJjSFgyZ"}
{"name":"Phandalin Tales","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Table (Copy)        ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\n\r\nconst table = game.tables.entities.find(t => t.name === \"Phandalin Tales\");\r\nlet roll = table.roll();\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/black-book.svg","actorIds":[],"_id":"8QZyhsfnEwcTqcxd"}
{"name":"Basic Macro","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{},"scope":"global","command":"/**\r\n * Basic Macro Turn Alert\r\n * Creates an alert that triggers on the current turn in\r\n *   the next round and executes a macro.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 1,\r\n    roundAbsolute: false,\r\n    turnId: game.combat.combatant._id,\r\n    macro: \"My Macro Name\",\r\n};\r\n\r\nTurnAlert.create(alertData);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"8Zs80hMAr1hKiBIc"}
{"name":"01 - Bevel","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"01 - Bevel    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"bevel\",\r\n    filterId: \"myBevel\",\r\n    rotation: 0,\r\n    thickness: 5,\r\n    lightColor: 0xFF0000,\r\n    lightAlpha: 0.8,\r\n    shadowColor: 0x00FF00,\r\n    shadowAlpha: 0.5,\r\n    animated :\r\n    {\r\n       rotation: \r\n       { \r\n          active: true,\r\n          clockWise: true, \r\n          loopDuration: 1600, \r\n          animType: \"syncRotation\"\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/bevel.png","actorIds":[],"_id":"8mlfjA3OcjYI1JZL"}
{"name":"Silence","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/runes-magenta-1.jpg","tooltip":"Silence_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Silence\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/runes-magenta-1.jpg","actorIds":[],"_id":"8oZvAvzavh6whNfX"}
{"name":"Gentle Repose","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/light-blue-2.jpg","tooltip":"Gentle Repose_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Gentle Repose\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/light-blue-2.jpg","actorIds":[],"_id":"8wcnR2htPBXPXGkF"}
{"name":"Dagger: The Eye Doctor","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/dagger.jpg","tooltip":"Dagger: The Eye Doctor_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Dagger: The Eye Doctor\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/dagger.jpg","actorIds":[],"_id":"9BJKaabFLYSyGGES"}
{"name":"Folder To Rollable Table","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Folder To Rollable Table ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Take the entries of a folder and turn it into a rollable table.\r\n// NOTE: you must click the \"Normalize Result Weights\" button (scale icon) after import.\r\n// Author: @Atropos#3814\r\n\r\n// name of folder whos entities you wish to push into a rollable table.\r\nconst folder = game.folders.getName(\"Herbalism & Alchemy\");\r\n// name of table you will be overwriting\r\nconst table = game.tables.getName(\"Common Ingredients\");\r\n// change this to match the entity type you are importing.\r\n// Actor, Item, Scene, JournalEntry, Macro, RollTable, Playlist\r\nconst entityType = \"Item\"\r\n\r\nconst items = folder.entities;\r\nconst results = folder.entities.map(i => {\r\n  return {\r\n    text: i.data.name,\r\n    type: 1,\r\n    collection: \"Item\",\r\n    resultId: i.data._id,\r\n    img: i.data.img,\r\n    weight: 1,\r\n    range: [1, 1],\r\n    drawn: false\r\n  }\r\n});\r\nawait table.createEmbeddedEntity(\"TableResult\", results);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/rolling-dice-cup.svg","actorIds":[],"_id":"9GgHik9rLBh4q14p"}
{"name":"Folder to Compendium","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Folder to Compendium  ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Import folder into writable compendium. Locked compendiums will not show as an option.\r\n * Folder type is optional, however will help if you have the same folder name across multiple system types.\r\n * Also contains options to store subfolder contents, update existing records (or only add new), and delete duplicate records.\r\n * Author: KrishMero#1792\r\n */\r\n\r\nlet packOptions = game.packs.filter(pack => !pack.locked).map(pack => `<option value=\"${pack.collection}\">${pack.title}</option>`);\r\nlet entityType = COMPENDIUM_ENTITY_TYPES.map(type => `<option value=\"${type}\">${type}</option>`);\r\nconst form = `\r\n  <div style=\"display: inline-block; width: 100px\">Folder:</div>\r\n  <input type=\"string\" id=\"folderName\">\r\n  <br />\r\n\r\n  <div style=\"display: inline-block; width: 100px\">Folder Type:</div>\r\n  <select id=\"entityType\" />\r\n    <option value=\"\">--</option>\r\n    ${entityType}\r\n  </select>\r\n  <br />\r\n\r\n  <div style=\"display: inline-block; width: 100px\">Compendium:</div>\r\n  <select id=\"destinationPack\" />\r\n    ${packOptions}\r\n  </select>\r\n  <br />\r\n\r\n  <label>\r\n    <input type=\"checkbox\" id=\"recurse\" checked/>\r\n    Store subfolders too\r\n  </label>\r\n  <br />\r\n\r\n  <label>\r\n    <input type=\"checkbox\" id=\"update\" checked/>\r\n    Update existing records (unchecked = only add new)\r\n  </label>\r\n  <br />\r\n\r\n  <label>\r\n    <input type=\"checkbox\" id=\"delete\" checked/>\r\n    Delete duplicates\r\n  </label>\r\n`;\r\n\r\nconst dialog = new Dialog({\r\n  title: \"Store folder in compendium\",\r\n  content: form,\r\n  buttons: {\r\n    use: {\r\n      label: \"Apply\",\r\n      callback: storeFolder\r\n    }\r\n  }\r\n}).render(true);\r\n\r\nfunction storeFolder(html) {\r\n  const folderName = html.find(`input#folderName`)[0].value;\r\n  const folderType = html.find(`select#entityType`)[0].value;\r\n  const destinationPack = html.find(`select#destinationPack`)[0].value;\r\n  const recurse = html.find(`input#recurse`)[0].checked;\r\n  const update = html.find(`input#update`)[0].checked;\r\n  const deleteRecords = html.find(`input#delete`)[0].checked;\r\n  \r\n  let folders = game.folders.filter(f => f.name === folderName);\r\n  if (folderType) {\r\n    folders = folders.filter(f => f.type === folderType);\r\n  }\r\n  if (folders.length === 0) {\r\n    ui.notifications.error(`Your world does not have any folders named '${folderName}'.`);\r\n  }\r\n  else if(folders.length > 1) {\r\n    ui.notifications.error(`Your world has more than one folder named ${folderName}`) \r\n  }\r\n  else {\r\n    console.log(`storing in ${destinationPack}`);\r\n    let packObject = game.packs.get(destinationPack);\r\n    storeRecursively(folders[0], packObject, recurse, update, deleteRecords);\r\n    ui.notifications.notify(`'${folderName}' stored successfully in '${packObject.title}'.`);\r\n  }\r\n}\r\n\r\nfunction storeRecursively(currentFolder, packObject, recurse, update, deleteRecords) {\r\n  console.log('store recursively for ' + currentFolder.name);\r\n  if (currentFolder.content) {\r\n    currentFolder.content.map(item => {\r\n      console.debug(\"  Item:\", item.data.name);\r\n      let existingRecords = packObject.index.filter(i => i.name === item.data.name);\r\n      if (item.data.name === 'Augury') {\r\n        console.log(existingRecords);\r\n        console.log(existingRecords.length);\r\n      }\r\n\r\n      // Delete all but the first duplicate.\r\n      if(existingRecords.length > 1) {\r\n        if (deleteRecords) {\r\n          console.log(existingRecords);\r\n          existingRecords.shift();\r\n          existingRecords.map(record => packObject.deleteEntity(record._id));\r\n        } else {\r\n          console.log(`Skipped: ${existingRecords[0].name}`)\r\n          ui.notifications.error(`Can't store '${existingRecords[0].name}' as multiple records were found. Delete the extras or check 'Delete duplicates'. Logged to console.`);\r\n        }\r\n      }\r\n\r\n      if (existingRecords.length === 1 && update) {\r\n        packObject.updateEntity(existingRecords[0]);\r\n      } else if (!existingRecords.length) {\r\n        packObject.createEntity(item);\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  if (currentFolder.children && recurse) {\r\n    currentFolder.children.map(({ data }) => {\r\n      storeRecursively(\r\n        game.folders.entities.filter(f => f.data._id == data._id)[0],\r\n        packObject,\r\n        recurse, \r\n        update,\r\n        deleteRecords\r\n      );\r\n    });\r\n  }\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/mailbox.svg","actorIds":[],"_id":"9SgQmPfX9tjVAbyj"}
{"name":"Thunder Step","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/spells/embrassed-energy2.svg","tooltip":"Thunder Step_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Thunder Step\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/embrassed-energy2.svg","actorIds":[],"_id":"9T7Ffo9gavjuMoEV"}
{"name":"End Of Turn","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"modules/turnAlert/icons/timer-icon.svg","tooltip":"End Of Turn   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * End of Turn Turn Alert\r\n * Creates an alert that triggers at the end of the current\r\n *   combatant's turn this round and displays a message.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 0,\r\n    roundAbsolute: false,\r\n    turnId: game.combat.combatant._id,\r\n    endOfTurn: true,\r\n    message: \"<h1>End of Turn!</h1>\",\r\n};\r\n\r\nTurnAlert.create(alertData);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"9jPP9g0ELtzK5HNO"}
{"name":"Longstrider","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/wind-sky-1.jpg","tooltip":"Longstrider_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Longstrider\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/wind-sky-1.jpg","actorIds":[],"_id":"9t4wRyR6bdTKcsYn"}
{"name":"13 - Shockwave","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"13 - Shockwave  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"shockwave\",\r\n    filterId: \"myShockwave\",\r\n    time: 0,\r\n    amplitude: 8,\r\n    wavelength: 75,\r\n    radius: 500,\r\n    brightness: 1.5,\r\n    speed: 25,\r\n    padding: 0,\r\n    animated:\r\n    {\r\n        time: \r\n        { \r\n           animType: \"cosOscillation\",\r\n           active: true, \r\n           loopDuration: 1800, \r\n           val1: 0, val2: 10\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/shockwave.JPG","actorIds":[],"_id":"A9CsJTmuhNejPT7e"}
{"name":"Show Token Actions","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Show Token Actions   ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\r\n* Requires: DND5e.\r\n* Provides a dialog showing all action-triggered equipment, prepared and at-will spells, feats, and consumables,\r\n* as well as passive feats. Hopefully makes triggering actions easier without needing the character sheet open\r\n* all the time.\r\n* WARNING: Very ugly.\r\n* author/blame: ^ and stick#0520\r\n* with enormous help on the button events (and no blame to be attributed to): Skimble#8601\r\n*/\r\n\r\nclass ActionDialog extends Application {\r\n    super(options){\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        const buttons = html.find(\"button[class='show-action-button']\");\r\n        \r\n        if (buttons.length > 0)\r\n            buttons.on(\"click\", event => {this.openActionTab(event, html);});\r\n    }   \r\n      \r\n    openActionTab(event, html) {\r\n        // Declare all variables\r\n        var i, tabcontent, tablinks;\r\n      \r\n        // Get all elements with class=\"tabcontent\" and hide them\r\n        tabcontent = document.getElementsByClassName(\"show-action-category\");\r\n        for (let t of tabcontent) {\r\n          t.style.display = \"none\";\r\n        }\r\n      \r\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n        tablinks = document.getElementsByClassName(\"show-action-button\");\r\n        for (let t of tablinks) {\r\n          t.className = t.className.replace(\" active\", \"\");\r\n        }\r\n      \r\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n        if (event.target.value == \"showActionAll\") {\r\n            tabcontent = document.getElementsByClassName(\"show-action-category\");\r\n            for (let t of tabcontent) {\r\n                t.style.display= \"block\";\r\n            }\r\n        } else {\r\n            if (document.getElementById(event.target.value) != null)\r\n                document.getElementById(event.target.value).style.display = \"block\";\r\n        }\r\n        event.currentTarget.className += \" active\";\r\n    } \r\n\r\n    getData(){\r\n        // Get user's character or the first token from the controlled list.\r\n        function getTargetActor() {\r\n            const character = game.user.character;\r\n            if (character != null)\r\n                return character;\r\n\r\n            const controlled = canvas.tokens.controlled;\r\n\r\n            if (controlled.length === 0) return character || null;\r\n\r\n            if (controlled.length > 0 && controlled[0] != null) {\r\n                return controlled[0].actor;\r\n            }\r\n        }\r\n\r\n        function buildActionsList(targetActor) {\r\n            let equipped = targetActor.data.items.filter(i => i.type !=\"consumable\" && i.data.equipped);\r\n            let activeEquipped = getActiveEquipment(equipped);\r\n            let weapons = activeEquipped.filter(i => i.type == \"weapon\");\r\n            let equipment = activeEquipped.filter(i => i.type == \"equipment\");\r\n\r\n            let other = activeEquipped.filter(i => i.type != \"weapon\" && i.type != \"equipment\");\r\n            let consumables = targetActor.data.items.filter(i => i.type == \"consumable\");\r\n            let items = { \"weapons\": weapons, \"equipment\": equipment, \"other\": other, \"consumables\": consumables };\r\n\r\n            let preparedSpells = targetActor.data.items.filter(i => i.type == \"spell\" && i.data.preparation.prepared);\r\n            let spells = categoriseSpells(preparedSpells);\r\n\r\n            let allFeats = targetActor.data.items.filter(i => i.type == \"feat\");\r\n            let activeFeats = getActiveFeats(allFeats);\r\n            let passiveFeats =  getPassiveFeats(allFeats);\r\n            let feats = {\"active\": activeFeats, \"passive\": passiveFeats};\r\n            \r\n\r\n            return { \"equipment\": items,\"spells\": spells, \"feats\": feats };\r\n        }\r\n\r\n        function getActiveEquipment(equipment) {\r\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\r\n\r\n            let activeEquipment = equipment.filter(e => {\r\n                if (e.data.activation == undefined)\r\n                    return false;\r\n\r\n                for (let [key, value] of activationTypes) {\r\n                    if (e.data.activation.type == key)\r\n                        return true;\r\n                }\r\n                \r\n                return false;\r\n            });\r\n\r\n            return activeEquipment;\r\n        }\r\n\r\n        function categoriseSpells(spells) {\r\n            let powers = {};\r\n            let book = {}\r\n\r\n            book = spells.reduce(function (book, spell) {\r\n                var level = spell.data.level;\r\n                let prep = spell.data.preparation.mode;\r\n\r\n                const prepTypes = game.dnd5e.config.spellPreparationModes;\r\n                let prepType = prepTypes[prep];\r\n\r\n                if (prep == \"pact\" || prep == \"atwill\" || prep == \"innate\") {\r\n                    if (!powers.hasOwnProperty(prepType)) {\r\n                        powers[prepTypes[prep]] = [];\r\n                    }\r\n\r\n                    powers[prepType].push(spell);\r\n                } else {\r\n                    if (!book.hasOwnProperty(level)) {\r\n                        book[level] = [];\r\n                    }\r\n\r\n                    book[level].push(spell);\r\n                }\r\n\r\n                return book;\r\n            }, {});\r\n            \r\n            return {\"book\": Object.entries(book), \"powers\": Object.entries(powers)};\r\n        }\r\n\r\n        function getActiveFeats(feats) {\r\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\r\n            let activeFeats = feats.filter(f => {\r\n                if (f.data.activation == undefined)\r\n                    return false;\r\n\r\n                for (let [key, value] of activationTypes) {\r\n                    if (f.data.activation.type == key)\r\n                        return true;\r\n                }\r\n                \r\n                return false;\r\n            });\r\n\r\n            return Object.entries(activeFeats);\r\n        }\r\n\r\n        function getPassiveFeats(feats) {\r\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\r\n            let passiveFeats = feats.filter(f => {\r\n                if (f.data.activation == undefined)\r\n                    return false;\r\n\r\n                for (let [key, value] of activationTypes) {\r\n                    if (f.data.activation.type == key)\r\n                        return false;\r\n                }\r\n                \r\n                return true;\r\n            });\r\n\r\n            return Object.entries(passiveFeats);\r\n        }\r\n\r\n        function getContentTemplate(actions) {\r\n            let template = `\r\n            <div>\r\n                 ${getCssStyle()}\r\n                <div class=\"show-action-form-group\">\r\n                    <div class=\"show-action-buttons\">\r\n                        <button value=\"showActionItems\" class=\"show-action-button\">Items</button>\r\n                        <button value=\"showActionSpells\" class=\"show-action-button\">Spells</button>\r\n                        <button value=\"showActionFeats\" class=\"show-action-button\">Feats</button>\r\n                        <button value=\"showActionAll\" class=\"show-action-button\">Show all</button>\r\n                    </div>\r\n                    </div>\r\n                    <div class=\"show-action-categories\">\r\n                        <div id=\"showActionItems\" class=\"show-action-category\">\r\n                            ${getItemsTemplate(actions.equipment)}\r\n                        </div>\r\n                        <div id=\"showActionSpells\" class=\"show-action-category\">\r\n                            ${getSpellsTemplate(actions.spells)}\r\n                        <div id=\"showActionFeats\" class=\"show-action-category\">\r\n                            ${getFeatsTemplate(actions.feats)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>`;\r\n            \r\n            return template;\r\n        }\r\n\r\n                // Gets a template of abilities or skills, based on the type of check chosen.\r\n        function getItemsTemplate(items) {\r\n            if (items.weapons.length + items.equipment.length + items.other.length + items.consumables.length === 0)\r\n                return \"\";\r\n\r\n            let template = `<div id=\"actionItems\" class=\"show-action-tabcontent\">\r\n                                <div class=\"show-action-tabcontent-title\">Items</div>\r\n                                    ${getItemsCategoryTemplate(\"Weapons\", items.weapons)}\r\n                                    ${getItemsCategoryTemplate(\"Equipment\", items.equipment)}\r\n                                    ${getItemsCategoryTemplate(\"Other\", items.other)}\r\n                                    ${getItemsCategoryTemplate(\"Consumables\", items.consumables)}\r\n                                </div>\r\n                            </div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        function getSpellsTemplate(spells) {                \r\n            let template = `<div id=\"actionSpells\" class=\"show-action-tabcontent\">\r\n                                <div class=\"show-action-tabcontent-title\">Spells</div>\r\n                                    ${getSpellsCategoryTemplate(spells.powers)}\r\n                                    ${getSpellsCategoryTemplate(spells.book)}\r\n                                </div>\r\n                            </div>`;\r\n\r\n            return template;\r\n        }\r\n        \r\n        function getFeatsTemplate(feats) {\r\n            if (feats.active.length + feats.passive.length === 0)\r\n                return \"\";\r\n\r\n            let template = `<div id=\"actionFeats\" class=\"show-action-tabcontent\">\r\n                                <div class=\"show-action-tabcontent-title\">Feats</div>\r\n                                    ${getFeatsCategoryTemplate(\"Active\", feats.active)}\r\n                                    ${getFeatsCategoryTemplate(\"Passive\", feats.passive)}\r\n                                </div>\r\n                            </div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        function getItemsCategoryTemplate(title, items) {\r\n            if (items.length === 0)\r\n                return \"\";\r\n\r\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${title}</div>\r\n                            <div class=\"show-action-tabcontent-actions\">`;\r\n            for (let i of items) {\r\n                template += `<input id=\"weapon-${i.name}\" type=\"button\" value=\"${i.name}\" onclick=\"${getRollItemMacro(i.name)}\"/>`;    \r\n            } \r\n\r\n            template += `</div>`;\r\n\r\n            return template;\r\n        }\r\n\r\n        function getSpellsCategoryTemplate(spells) {\r\n            if (spells.length === 0)\r\n                return \"\";\r\n\r\n            let template = \"\";\r\n\r\n            for (let [level, entries] of spells) {\r\n                console.log(isNumber(level.toString()));\r\n                let subtitle = !isNumber(level) ? level : (level === 0 ? `Cantrips` : `Level ${level}`);\r\n\r\n                template += `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\r\n                                <div class=\"show-action-tabcontent-actions\">`;\r\n        \r\n                for (let s of entries) {\r\n                    template += `<input id=\"spell-${s.name}\" type=\"button\" value=\"${s.name}\" onclick=\"${getRollItemMacro(s.name)}\"/>`;    \r\n                }\r\n    \r\n                template += `</div>`;\r\n            }\r\n            \r\n            return template;\r\n        }\r\n\r\n        function getFeatsCategoryTemplate(subtitle, feats) {\r\n            if (feats.length === 0)\r\n                return \"\";\r\n            \r\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\r\n                            <div class=\"show-action-tabcontent-actions\">`\r\n                            \r\n            for (let [index, f] of feats) {\r\n                template += `<input id=\"feat-${f.name}\" type=\"button\" value=\"${f.name}\" onclick=\"${getRollItemMacro(f.name)}\"/>`;    \r\n            }\r\n\r\n            template += `</div>`\r\n            \r\n\r\n            return template;\r\n        }\r\n\r\n        function getCssStyle() {\r\n            return `\r\n            <style type=\"text/css\">\r\n            .show-action-buttons {\r\n                display: grid;\r\n                grid-template-columns: repeat(5, 1fr);\r\n                grid-gap: 10px;\r\n            }\r\n\r\n            .show-action-buttons button {\r\n                width: auto;\r\n                height: auto;\r\n                background-color: #eee;\r\n                float: left;\r\n                border: none;\r\n                outline: none;\r\n                cursor: pointer;\r\n                padding: 5px 8px;\r\n                transition: 0.3s;\r\n                display: block;\r\n              }\r\n                            \r\n              /* Change background color of buttons on hover */\r\n              .show-action-buttons button:hover {\r\n                background-color: #ddd;\r\n              }\r\n              \r\n              /* Create an active/current tablink class */\r\n              .show-action-buttons button.active {\r\n                background-color: #ccc;\r\n              }\r\n\r\n              .show-action-categories {\r\n                clear: both;\r\n              }\r\n              \r\n              /* Style the tab content */\r\n              .show-action-tabcontent {\r\n                display: block;\r\n                padding: 6px 12px;\r\n                border: 1px solid #ccc;\r\n                border-bottom: none;\r\n                border-left: none;\r\n                border-right: none;\r\n              }\r\n\r\n              .show-action-tabcontent-title {\r\n                    clear: both;\r\n                    font-size: large;\r\n              }\r\n\r\n              .show-action-tabcontent-subtitle {\r\n                  padding: 5px;\r\n                  margin: 2px;\r\n                  float: left;\r\n              }\r\n\r\n              .show-action-tabcontent input {\r\n                border: 1px solid #555;\r\n                padding: 5px;\r\n                margin: 2px;\r\n              }\r\n              \r\n              .show-action-tabcontent input:hover {\r\n              background-color: #ddd;\r\n              }\r\n            </style>`\r\n        }\r\n\r\n        function getRollItemMacro(itemName) {\r\n            return `game.dnd5e.rollItemMacro(&quot;${itemName}&quot;)`;\r\n        }\r\n\r\n        // set this to true if you want results whispered to the GM\r\n        let targetActor = getTargetActor();\r\n        let innerContent = \"\";\r\n\r\n        if (targetActor != null || targetActor) {\r\n            this.options.title = `${targetActor.name} actions`;\r\n            let actionLists = buildActionsList(targetActor);\r\n            innerContent = getContentTemplate(actionLists);\r\n        } else {\r\n            ui.notifications.error(\"No token selected or user character found.\");\r\n            throw new Error(\"No token selected or character found\");\r\n        }\r\n        \r\n        var content =  `<div id=\"actionDialog\">${innerContent}</div>`;\r\n        var contentsObject = {content:`${content}`}\r\n        return contentsObject;\r\n    }\r\n}\r\n\r\nlet opt=Dialog.defaultOptions;\r\nopt.resizable=true;\r\nopt.title=\"Choose action\";\r\nopt.minimizable=true;\r\nopt.width=600;\r\nvar viewer;\r\nviewer = new ActionDialog(opt);\r\nviewer.render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/clapperboard.svg","actorIds":[],"_id":"AEuD03qngYSA1mvz"}
{"name":"Madness Short Term","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Table (Copy)      ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\n\r\nconst table = game.tables.entities.find(t => t.name === \"Short-Term Madness\");\r\nlet roll = table.roll();\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/paranoia.svg","actorIds":[],"_id":"AGotRgLor0XsBpgY"}
{"name":"Rallying Cry","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/active11.png","tooltip":"Rallying Cry_Meatshield ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Rallying Cry\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/active11.png","actorIds":[],"_id":"AJ4B5wmJIRYCH4t9"}
{"name":"Blade Ward","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/icon11.png","tooltip":"Blade Ward_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Blade Ward\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/icon11.png","actorIds":[],"_id":"AOvVYkvaKoKc3oHA"}
{"name":"Eldritch Blast","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fireball-eerie-1.jpg","tooltip":"Eldritch Blast_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Eldritch Blast\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fireball-eerie-1.jpg","actorIds":[],"_id":"AcQx0ffG25PUxFFx"}
{"name":"26 - T02 - Mantle of Madness (liquid)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"26 - T02 - Mantle of Madness (liquid)  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"liquid\",\r\n    filterId: \"myMantle\",\r\n    color: 0x0090FF,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 0.0001,\r\n    spectral: false,\r\n    scale: 7,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0015, \r\n          animType: \"move\" \r\n       },\r\n       intensity : \r\n       { \r\n          active: true, \r\n          animType: \"syncCosOscillation\",\r\n          loopDuration: 30000,\r\n          val1: 0.0001, \r\n          val2: 4 \r\n       },\r\n       scale: \r\n       { \r\n          active: true, \r\n          animType: \"syncCosOscillation\",\r\n          loopDuration: 30000,\r\n          val1: 7, \r\n          val2: 1 \r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/26-t02-mantleofmadness-liquid.JPG","actorIds":[],"_id":"AcX9QVyheT0xBveI"}
{"name":"Stealth Check","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Stealth Check ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\r\n\r\n// getting all actors of selected tokens\r\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\r\n\r\n// if there are no selected tokens, roll for the player's character.\r\nif (actors.length < 1) {\r\n  actors = game.users.entities.map(entity => {\r\n    if (entity.active && entity.character !== null) {\r\n      return entity.character;\r\n    }\r\n  });\r\n}\r\nconst validActors = actors.filter(actor => actor != null);\r\n\r\nlet messageContent = 'pp = passive perception<br>';\r\n\r\n// roll for every actor\r\nfor (const selectedActor of validActors) {\r\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\r\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\r\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\r\n\r\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\r\n  const uniqueActor = {};\r\n  const caughtBy = canvas.tokens.placeables\r\n    .filter(token => !!token.actor)\r\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\r\n      if (uniqueActor[actor.name]) {\r\n        return false;\r\n      }\r\n      uniqueActor[actor.name] = true;\r\n      return true;\r\n    })\r\n    .filter(({ actor }) => {\r\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\r\n    })\r\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\r\n\r\n  if (!caughtBy.length) {\r\n    messageContent += 'Stealth successful!<br>';\r\n  } else {\r\n    messageContent += 'Stealth questionable:<br>';\r\n    caughtBy.map(({ actor }) => {\r\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\r\n    });\r\n  }\r\n}\r\n\r\n// create the message\r\nconst chatData = {\r\n  user: game.user._id,\r\n  speaker: game.user,\r\n  content: messageContent,\r\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/invisible.svg","actorIds":[],"_id":"AdzbWXwPpQHdSx3A"}
{"name":"TokenUpdate","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"TokenUpdate ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"//args[0] = token ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).update(args[1]);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/token-refresh.svg","actorIds":[],"_id":"AhtBTtsHLNkMpc9O"}
{"name":"5E Heavy Armor Feat Workaround","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"//Crude but effective way to simulate Heavy Armor Master.\r\n//Every time the player takes eligible damage, they can just click this macro with their token selected to \"get their 3HP back.\"\r\n//Questions? Ask in #macro-polo on Discord. If absolutely needed, please ping Norc#5108.\r\n\r\n//Known minor limitation: Does not take into account temp HP AT ALL.\r\n\r\nfunction modifyHP(token, amount) {\r\n    let hp_cur = token.actor.data.data.attributes.hp.value;\r\n    let hp_max = token.actor.data.data.attributes.hp.max;\r\n    let hp_min = token.actor.data.data.attributes.hp.min;\r\n    hp_cur = (hp_cur+amount > hp_max) ? hp_max : hp_cur+amount;\r\n    hp_cur = (hp_cur < hp_min) ? hp_min : hp_cur;\r\n    token.actor.update({'data.attributes.hp.value': parseInt(hp_cur)});\r\n    return hp_cur;\r\n  }\r\n\r\nif(token) {\r\n    //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\r\n    modifyHP(token,3);\r\n} else {\r\n    ui.notifications.notify(\"Please select a token.\");\r\n}6","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.1_05.png","actorIds":[],"_id":"AkbKOyLRDOZxrKog"}
{"name":"Hunters Mark - GM Conditions","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"//This macro must be called 'GMConditions' and be on the GM's\r\n//hot bar for the castMark.js macro to function correctly.\r\n//you must tick the option 'Excecute Macro As GM' to grant\r\n//players access to this macro.\r\n\r\n\r\nconst action = args[0]\r\nconst condition = args[1]\r\nconst targetId = args[2]\r\nconst target = canvas.tokens.get(targetId);\r\nif (action == \"apply\"){\r\n    game.cub.applyCondition(condition, target, {warn: true});\r\n}\r\nelse if (action == \"remove\"){\r\n    game.cub.removeCondition(condition, target, {warn: true});\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.1_16.png","actorIds":[],"_id":"AyHej7KrdLnhv26M"}
{"name":"Breath Weapon (Brass)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/copper-dragon.png","tooltip":"Breath Weapon (Brass)_Meatshield ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Breath Weapon (Brass)\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/copper-dragon.png","actorIds":[],"_id":"BMFyjnmGN6pwE0Qw"}
{"name":"09 - Twist","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"09 - Twist    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"twist\",\r\n    filterId: \"myTwist\",\r\n    radiusPercent: 120,\r\n    angle: 0,\r\n    animated:\r\n    {\r\n        angle:         \r\n        { \r\n            active: true, \r\n            animType: \"sinOscillation\",\r\n            loopDuration: 10000, \r\n            val1: -0.6*Math.PI, \r\n            val2: +0.6*Math.PI\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/twist.png","actorIds":[],"_id":"BNXT7VEV5A6xhJ7E"}
{"name":"5E Fighter Second Wind","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"//With your fighter token selected, click this macro to regain your second wind.\r\n//Questions? Ask in #macro-polo on Discord. If absolutely needed, please ping Norc#5108.\r\n\r\n//TO DO:    Add option to check for available Second Wind uses and automatcally expend one.\r\n//          Add additional option to fail usage if no uses left.\r\n\r\nfunction modifyHP(token, amount) {\r\n    //Known minor limitation: Does not take into account temp HP AT ALL.\r\n    let hp_cur = token.actor.data.data.attributes.hp.value;\r\n    let hp_max = token.actor.data.data.attributes.hp.max;\r\n    let hp_min = token.actor.data.data.attributes.hp.min;\r\n    hp_cur = (hp_cur+amount > hp_max) ? hp_max : hp_cur+amount;\r\n    hp_cur = (hp_cur < hp_min) ? hp_min : hp_cur;\r\n    token.actor.update({'data.attributes.hp.value': parseInt(hp_cur)});\r\n    return hp_cur;\r\n  }\r\n\r\nif(token) {\r\n    let fighter = actor.items.find(i => i.name == \"Fighter\");\r\n    if (fighter)  {\r\n        let fighterLevel = parseInt(fighter.data.data.levels);\r\n        let formula = `1d10 + ${fighterLevel}`;\r\n        console.log(formula);\r\n        let amount = new Roll(formula).roll().total; \r\n        //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\r\n        modifyHP(token, amount);\r\n    } else {\r\n        ui.notifications.notify(\"Please select a token that has at least one Fighter level.\");\r\n    } \r\n} else {\r\n    ui.notifications.notify(\"Please select a token.\");\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.3_83.png","actorIds":[],"_id":"BNsDxRB5UmfwqzT5"}
{"_id":"BRvBuslOyxAd8hSe","name":"Delete_Token_Macro","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//args[0] = token name\r\n\r\n(async()=>{\r\n  let token = canvas.tokens.placeables.find(i=>i.name===args[0]);\r\n  await canvas.tokens.deleteMany(token.data._id);\r\n})();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/trash-can.svg","actorIds":[]}
{"name":"Dissonant Whispers","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/dissonantwhispers.jpg","tooltip":"Dissonant Whispers_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Dissonant Whispers\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/dissonantwhispers.jpg","actorIds":[],"_id":"Bc9e7Xk6tfsuqiR1"}
{"_id":"Bf92g5S0hQluSOSn","name":"Where are the Dragons?","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"imports/dndbeyond/npc-Ancient-White-Dragon.jpeg","tooltip":"Where are the Dragons? ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\nconst cryovain = game.tables.entities.find(t => t.name === \"Where is Cryovain\");\r\nconst venomfang = game.tables.entities.find(t => t.name === \"Where is Venomfang\");\r\n\r\nlet roll = cryovain.roll();\r\nlet roll2 = venomfang.roll();\r\n\r\nlet msgContent = roll.results[0].text + '\\n' + roll2.results[0].text\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: msgContent,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});","author":"s7gxOGja1p9WAX4j","img":"imports/portraits/Monsters/Dragon/npc-Adult-Green-Dragon.jpeg","actorIds":[]}
{"name":"Enhance Ability","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/haste-royal-2.jpg","tooltip":"Enhance Ability_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Enhance Ability\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/haste-royal-2.jpg","actorIds":[],"_id":"Bh7FMWqGLA1WjrFl"}
{"name":"Measure Token Distances","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Measure Token Distances  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// This macro will measure the distance between the selected tokens\r\n// and every targetted tokens within a scene.\r\n// It will then output the measured distances to the chat\r\n// If called with an argument, determines who to whisper the message to,\r\n// otherwise sends it as a public message\r\n\r\nlet message = \"\"\r\nfor (let token of canvas.tokens.controlled) {\r\n   let ruler = canvas.controls.ruler;\r\n   for (let target of game.user.targets) {\r\n       ruler.clear()\r\n       ruler.waypoints.push(token.center)\r\n       ruler.labels.addChild(new PIXI.Text(\"\"));\r\n       ruler.measure(target.center);\r\n       let distance = ruler.labels.children[0].text;\r\n       message += `From '${token.name}' to '${target.name}' : ${distance}<br/>`\r\n       ruler.clear();\r\n   }\r\n}\r\nif (message) {\r\n   const whisper = args[0] ? ChatMessage.getWhisperIDs(args[0]) : undefined;\r\n   ChatMessage.create({content: message, whisper});\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/pencil-ruler.svg","actorIds":[],"_id":"BhCtpeWe1SHEvFQU"}
{"name":"16 - Inner Fog","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"16 - Inner Fog   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fog\",\r\n    filterId: \"myFog\",\r\n    color: 0x000000,\r\n    density: 0.65,\r\n    time: 0,\r\n    dimX: 1,\r\n    dimY: 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 2.2, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/16-innerfog.JPG","actorIds":[],"_id":"Bt8d5wLX2T8FjQDg"}
{"name":"Maximilian’s Earthen Grasp","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/violet_28.jpg","tooltip":"Maximilian’s Earthen Grasp_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Maximilian’s Earthen Grasp\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/violet_28.jpg","actorIds":[],"_id":"BvtTnetaeJ4V4s5w"}
{"name":"AA_DisableAllTraps","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let sw1 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_1\");\r\nlet sw2 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_2\");\r\nlet sw3 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_3\");\r\nlet sw4 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_4\");\r\n\r\nsw1.update({ disposition: TOKEN_DISPOSITIONS.FRIENDLY });\r\nsw2.update({ disposition: TOKEN_DISPOSITIONS.FRIENDLY });\r\nsw3.update({ disposition: TOKEN_DISPOSITIONS.FRIENDLY });\r\nsw4.update({ disposition: TOKEN_DISPOSITIONS.FRIENDLY });","author":"s7gxOGja1p9WAX4j","img":"imports/icons/satellite-communication.svg","actorIds":[],"_id":"BxN00sZikyINHi6P"}
{"name":"Journal Update ID With Name","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Journal Update ID With Name  ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Replaces the reference id to other items/tables/journals/actors to use their name.\r\n * Useful for after importing journal records from a compendium that has references to actors/items/etc...\r\n * Author: @KrishMero#1792\r\n */\r\n \r\ngame.journal.forEach(entry => {\r\n  let content = entry.data.content;\r\n  let matches = content.match(/@\\w*\\[\\w*\\]/g);\r\n  // now we have an array of things such as @Actor[5c8HWfrpvRV4XtZ1]\r\n  let uniqueMatches = matches\r\n    .filter((value, index, self) => self.indexOf(value) === index) //unique matches\r\n    .forEach(str => {\r\n      let arrayData = str.slice(1, -1).split('['); // cut off the @ and ] then make [0] the type and [1] the id.\r\n      // since the reference may not match directly with the game entity type, lets look that up.\r\n      let entityType = getEntityType(arrayData[0]);\r\n      let id = arrayData[1];\r\n      // with the id and our entity type, look up the name of the entry.\r\n      let name = game[entityType].get(id)?.name;\r\n      if (!name) {\r\n        return ui.notifications.error(`Could not find any record for the entity type ${entityType} with the id of ${id}`);\r\n      }\r\n\r\n      // replace the ID with the name.\r\n      console.log(`updating ${id} with ${name}`);\r\n\r\n      let regEx = new RegExp(id, 'g');\r\n      content.replace(regEx, name);\r\n    }); \r\n  entry.update({ content });\r\n});\r\n\r\nfunction getEntityType(entity) {\r\n  switch (entity) {\r\n    case 'JournalEntry': return 'journal';\r\n    case 'RollTable': return 'tables';\r\n    default: return entity.toLowerCase() + 's';\r\n  }\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/newspaper.svg","actorIds":[],"_id":"C2V38jj854iG4jQ0"}
{"name":"Link Actors","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}}},"scope":"global","command":"const scene = game.scenes.active;\r\nconst unlinked = canvas.scene.data.tokens.map(t => {\r\n    const actor = game.actors.entities.find(a => a.name === t.name);\r\n    if (actor) {\r\n        return {\r\n            _id: t._id,\r\n            actorId: actor.id\r\n        }\r\n    } else {\r\n        console.log(t.name);\r\n        return {\r\n            _id: t._id,\r\n            actorId: \"\"\r\n        }\r\n    }\r\n});\r\nconst updates = duplicate(unlinked);\r\n\r\nscene.updateEmbeddedEntity(\"Token\", updates);\r\n\r\nui.notifications.info('Tokens linked to actors.');\r\nconsole.log(updates);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.7_26.png","actorIds":[],"_id":"CJ1z0zBoVxsc6Khn"}
{"name":"Spiritual Weapon","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/enchant-magenta-2.jpg","tooltip":"Spiritual Weapon_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Spiritual Weapon\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/enchant-magenta-2.jpg","actorIds":[],"_id":"CJJJ6D2VmAkTPr3A"}
{"name":"Pact Boon: Vicious Mockery","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/affliction_24.jpg","tooltip":"Pact Boon: Vicious Mockery_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Pact Boon: Vicious Mockery\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/affliction_24.jpg","actorIds":[],"_id":"CX0lnzQsBgACLKjU"}
{"name":"Encounter Table","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Change Disposition (Copy)      ","icon":"imports/icons/Icon.1_40.png","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Generate a Random Encounter based on the GM's choice\r\n// Written by Jon Whitehouse [MTGCarver#7753]\r\n// Based on LightPicker Macro and combined with RollTable\r\n// Was a fun first macro for me to figure out how it works.\r\n\r\n// Let's set the global variable to see what the wondering monster roll is\r\nlet msgContent = 'Wandering Monster Roll was: ';\r\nlet result = '';\r\n\r\n// Setup the Popup Window\r\nlet dialogEditor = new Dialog({\r\n    title: `Choose Your Encounter`,\r\n    content: `Please click on the encounter you wish you roll.`,\r\n    buttons: {\r\n        dayenc: {\r\n            label: `Day Encounter`,\r\n            callback: () => {\r\n\r\n                // Roll to Check For Wandering Monster\r\n                result = new Roll(`1d20`).roll().total;\r\n\r\n                // Create the message to display what was rolled\r\n                if (result !== '') {\r\n                    let chatData = {\r\n                        sound: CONFIG.sounds.dice,\r\n                        content: msgContent + result,\r\n                        whisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n                    }\r\n                    ChatMessage.create(chatData, {});\r\n                }\r\n\r\n                // If the result is 17 to 20, we have our encounter. Now roll on our encounter table.\r\n                if (result >= 17) {\r\n                    const table = game.tables.entities.find(t => t.name === \"Wilderness Encounter Day\");\r\n                    table.draw({}, {\r\n                        rollMode: \"gmroll\"\r\n                    });\r\n                }\r\n                dialogEditor.render(true);\r\n            }\r\n        },\r\n        nightenc: {\r\n            label: `Night Encounter`,\r\n            callback: () => {\r\n\r\n                // Roll to Check For Wandering Monster\r\n                result = new Roll(`1d20`).roll().total;\r\n\r\n                // Create the message to display what was rolled\r\n                if (result !== '') {\r\n                    let chatData = {\r\n                        sound: CONFIG.sounds.dice,\r\n                        content: msgContent + result,\r\n                        whisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n                    }\r\n                    ChatMessage.create(chatData, {});\r\n                }\r\n\r\n                // If the result is 17 to 20, we have our encounter. Now roll on our encounter table.\r\n                if (result >= 17) {\r\n                    const table = game.tables.entities.find(t => t.name === \"Wilderness Encounter Night\");\r\n                    table.draw({}, {\r\n                        rollMode: \"gmroll\"\r\n                    });\r\n                }\r\n                dialogEditor.render(true);\r\n            }\r\n        },\r\n        wecenc: {\r\n            label: `Wave Echo Cave Encounter`,\r\n            callback: () => {\r\n\r\n                // Roll to Check For Wandering Monster\r\n                result = new Roll(`1d20`).roll().total;\r\n\r\n                // Create the message to display what was rolled\r\n                if (result !== '') {\r\n                    let chatData = {\r\n                        sound: CONFIG.sounds.dice,\r\n                        content: msgContent + result,\r\n                        whisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n                    }\r\n                    ChatMessage.create(chatData, {});\r\n                }\r\n\r\n                // If the result is 17 to 20, we have our encounter. Now roll on our encounter table.\r\n                if (result >= 17) {\r\n                    const table = game.tables.entities.find(t => t.name === \"WEC Encounters\");\r\n                    table.draw({}, {\r\n                        rollMode: \"gmroll\"\r\n                    });\r\n                }\r\n                dialogEditor.render(true);\r\n            }\r\n        },\r\n        close: {\r\n            icon: \"<i class='fas fa-tick'></i>\",\r\n            label: `Close`\r\n        },\r\n    },\r\n    default: \"close\",\r\n    close: () => {}\r\n});\r\ndialogEditor.render(true)","author":"s7gxOGja1p9WAX4j","img":"imports/icons/beast-eye.svg","actorIds":[],"_id":"Cf1KpXv5hLYGDnEG"}
{"name":"Ambient Light Quick Edit","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Ambient Light Quick Edit ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let macroName = \"AmbientLight QuickEditor\"\r\nlet macroEndLog = \"---------------------------------------------\"\r\n\r\nlet i=0;\r\nlet lights = canvas.lighting.objects.children;\r\nlet lightSelected = lights[0];\r\nlet selectOptions = \"\";\r\nlet lightSelectedAngle = 0;\r\nlet lightSelectedBright = 0;\r\nlet lightSelectedDim = 0;\r\nlet lightSelectedRotation = 0;\r\nlet lightSelectedTintAlpha = 1;\r\nlet lightSelectedTintColor = \"\";\r\n\r\nconsole.log(\"---------------------------------------------\");\r\nconsole.log(`${macroName} by PaperPunk`);\r\nconsole.log(\"---------------------------------------------\");\r\nconsole.log(`${macroName} | Start`);\r\n\r\nconst drawingDetails = {\r\n      author: game.user._id,\r\n      fillAlpha: 0,\r\n      fillColor: \"#808080\",\r\n      fillType: 1,\r\n      fontFamily: \"FontAwesome\",\r\n      fontSize: 24,\r\n      height: 48,\r\n      hidden: false,\r\n      locked: false,\r\n      rotation: 0,\r\n      strokeAlpha: 1,\r\n      strokeColor: \"#000000\",\r\n      strokeWidth: 2,\r\n      text: i,\r\n      textAlpha: 1,\r\n      textColor: \"#ffffff\",\r\n      type: \"r\",\r\n      width: 48,\r\n      //x: 250,\r\n      x: lightSelected.x-24,\r\n      //y: 250\r\n      y: lightSelected.y+25\r\n};\r\n\r\n//let d = Drawing.create(drawingDetails);\r\n//d.update({\"x\": lights[i].x-24, \"y\": lights[i].y+25, \"text\": i});\r\n\r\nfor (i= 0; i< lights.length; i++) {\r\n selectOptions += `<option value=\"${i}\">AmbientLight ${i}</option>`;\r\n}\r\n\r\nconst htmlLightSelection = `\r\n    <form>\r\n      <h2>Select your light.</h2>\r\n      <div class=\"form-group\">\r\n        <label>Light:</label>\r\n        <select id=\"light-selector\" name=\"light-selector\">\r\n          ${selectOptions}\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `;\r\n\r\nlet dialogSelector = new Dialog({\r\n  title: `${macroName}`,\r\n  content: htmlLightSelection,\r\n  buttons: {\r\n    confirm: {\r\n      icon: \"<i class='fas fa-tick'></i>\",\r\n      label: `Confirm`,\r\n      callback: htmlLightSelection => { \r\n        lightSelected = (htmlLightSelection.find('[name=\"light-selector\"]')[0].value)\r\n        lightSelectedAngle = lights[lightSelected].data.angle;\r\n        lightSelectedBright = lights[lightSelected].data.bright;\r\n        lightSelectedDim = lights[lightSelected].data.dim;\r\n        lightSelectedRotation = lights[lightSelected].data.rotation;\r\n        lightSelectedTintAlpha = lights[lightSelected].data.tintAlpha;\r\n        lightSelectedTintColor = lights[lightSelected].data.tintColor;\r\n        //console.log(`${macroName} | lightSelected = ${lightSelected}`);\r\n        //console.log(`${macroName} | lightSelectedBright = ${lightSelectedBright}`);\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    cancel: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel`,\r\n      callback: () => {\r\n        console.log(`${macroName} | Goodbye`);\r\n        console.log(macroEndLog);\r\n      }\r\n    },\r\n  },\r\n  default: \"cancel\",\r\n  //close: () => console.log(\"AmbientLight QuickEditor | Dialog Window Closed\")\r\n});\r\n\r\nlet dialogEditor = new Dialog({\r\n  title: `${macroName}`,\r\n  content: `<h2>Edit your light.</h2>\r\n      <p>Emission Angle: ${lightSelectedAngle}</p>\r\n      <p>Bright light distance: ${lightSelectedBright}</p>\r\n      <p>Dim light distance: ${lightSelectedDim}</p>\r\n      <p>Rotation CW from down: ${lightSelectedRotation}</p>\r\n      <p>Tint Alpha: ${lightSelectedAngle}</p>\r\n      <p>Tint Color HexCode: ${lightSelectedAngle}</p>`,\r\n  buttons: {\r\n    rot5cw: {\r\n      icon: \"<i class='fas fa-redo'></i>\",\r\n      label: `Rotate 5* CW`,\r\n      callback: () => { \r\n        let rot = lights[lightSelected].data.rotation;\r\n        lights[lightSelected].update({\"rotation\":rot+5});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    rot15cw: {\r\n      icon: \"<i class='fas fa-redo'></i>\",\r\n      label: `Rotate 15* CW`,\r\n      callback: () => { \r\n        let rot = lights[lightSelected].data.rotation;\r\n        lights[lightSelected].update({\"rotation\":rot+15});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    rot45cw: {\r\n      icon: \"<i class='fas fa-redo'></i>\",\r\n      label: `Rotate 45* CW`,\r\n      callback: () => { \r\n        let rot = lights[lightSelected].data.rotation;\r\n        lights[lightSelected].update({\"rotation\":rot+45});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    rot5ccw: {\r\n      icon: \"<i class='fas fa-undo'></i>\",\r\n      label: `Rotate 5* CCW`,\r\n      callback: () => { \r\n        let rot = lights[lightSelected].data.rotation;\r\n        lights[lightSelected].update({\"rotation\":rot-5});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    rot15ccw: {\r\n      icon: \"<i class='fas fa-undo'></i>\",\r\n      label: `Rotate 15* CCW`,\r\n      callback: () => { \r\n        let rot = lights[lightSelected].data.rotation;\r\n        lights[lightSelected].update({\"rotation\":rot-15});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    rot45ccw: {\r\n      icon: \"<i class='fas fa-undo'></i>\",\r\n      label: `Rotate 45* CCW`,\r\n      callback: () => { \r\n        let rot = lights[lightSelected].data.rotation;\r\n        lights[lightSelected].update({\"rotation\":rot-45});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    brightup: {\r\n      icon: \"<i class='fas fa-circle'></i>\",\r\n      label: `Increase Bright by 5`,\r\n      callback: () => { \r\n        let bright = lights[lightSelected].data.bright;\r\n        lights[lightSelected].update({\"bright\":bright+5});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    brightdown: {\r\n      icon: \"<i class='fas fa-circle'></i>\",\r\n      label: `Decrease Bright by 5`,\r\n      callback: () => { \r\n        let bright = lights[lightSelected].data.bright;\r\n        lights[lightSelected].update({\"bright\":bright-5});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    brightoff: {\r\n      icon: \"<i class='fas fa-circle'></i>\",\r\n      label: `Remove Bright Light`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"bright\":0});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    dimup: {\r\n      icon: \"<i class='fas fa-dot-circle'></i>\",\r\n      label: `Increase Dim by 5`,\r\n      callback: () => { \r\n        let dim = lights[lightSelected].data.dim;\r\n        lights[lightSelected].update({\"dim\":dim+5});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    dimdown: {\r\n      icon: \"<i class='fas fa-dot-circle'></i>\",\r\n      label: `Decrease Dim by 5`,\r\n      callback: () => { \r\n        let dim = lights[lightSelected].data.dim;\r\n        lights[lightSelected].update({\"dim\":dim-5});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    dimoff: {\r\n      icon: \"<i class='fas fa-dot-circle'></i>\",\r\n      label: `Remove Dim Light`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"dim\":0});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    emit15: {\r\n      icon: \"<i class='fas fa-rss'></i>\",\r\n      label: `Emission Angle 15*`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"angle\":15});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    emit45: {\r\n      icon: \"<i class='fas fa-rss'></i>\",\r\n      label: `Emission Angle 45*`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"angle\":45});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    emit90: {\r\n      icon: \"<i class='fas fa-rss'></i>\",\r\n      label: `Emission Angle 90*`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"angle\":90});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    emit180: {\r\n      icon: \"<i class='fas fa-rss'></i>\",\r\n      label: `Emission Angle 180*`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"angle\":180});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    emit270: {\r\n      icon: \"<i class='fas fa-rss'></i>\",\r\n      label: `Emission Angle 270*`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"angle\":270});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    emit360: {\r\n      icon: \"<i class='fas fa-rss'></i>\",\r\n      label: `Emission Angle 360*`,\r\n      callback: () => { \r\n        lights[lightSelected].update({\"angle\":360});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    back: {\r\n      icon: \"<i class='fas fa-reply'></i>\",\r\n      label: `Back`,\r\n      callback: () => dialogSelector.render(true)\r\n    },\r\n    close: {\r\n      icon: \"<i class='fas fa-tick'></i>\",\r\n      label: `Close`\r\n    },\r\n  },\r\n  default: \"close\",\r\n  close: () => {\r\n    console.log(`${macroName} | Goodbye`);\r\n    console.log(macroEndLog);\r\n  }\r\n});\r\n\r\ndialogSelector.render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/all-seeing-eye.svg","actorIds":[],"_id":"CgG6yFdZ3tLnIusM"}
{"name":"debug output","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let report = {};\r\nlet output = '';\r\nfunction formatBytes(a,b=2){if(0===a)return\"0 Bytes\";const c=0>b?0:b,d=Math.floor(Math.log(a)/Math.log(1024));return parseFloat((a/Math.pow(1024,d)).toFixed(c))+\" \"+[\"Bytes\",\"KB\",\"MB\",\"GB\",\"TB\",\"PB\",\"EB\",\"ZB\",\"YB\"][d]}\r\n\r\n// Foundry Details\r\nreport.System = {\r\n  Foundry: game.data.version,\r\n  System: `${game.system.id} version ${game.system.data.version}`,\r\n};\r\n\r\nreport.User = {\r\n  Role: Object.keys(CONST.USER_ROLES)[game.user.role],\r\n}\r\n\r\nreport.Scene = {\r\n  Walls: canvas.walls.placeables.length,\r\n  Lights: canvas.lighting.placeables.length,\r\n  Tokens: canvas.tokens.placeables.length,\r\n  Dimensions: `${canvas.dimensions.width} x ${canvas.dimensions.height}`,\r\n  Background: `${canvas.background?.img?.texture?.width} x ${canvas.background?.img?.texture?.height}`,\r\n}\r\n\r\nreport.Database = {\r\n  Actors: game.actors.size,\r\n  Items: game.items.size,\r\n  Scenes: game.scenes.size,\r\n  Journals: game.journal.size,\r\n  Tables: game.tables.size,\r\n}\r\n\r\n// Module details\r\nlet ct = 0;\r\ngame.modules.forEach(m => {\r\n  if (m.active) ct++;\r\n});\r\n\r\nreport.Modules = {\r\n  Total: game.modules.size,\r\n  Enabled: ct,\r\n}\r\n\r\n// Browser Details\r\nreport.Browser = {\r\n  Platform: navigator.platform,\r\n  Vendor: navigator.vendor,\r\n  Agent: navigator.userAgent,\r\n}\r\n\r\n// Browser Details\r\nlet gl = canvas.app.renderer.gl;\r\nif (gl) {\r\n  report.WebGL = {\r\n    Context: gl.constructor.name,\r\n    GL_Vendor: gl.getParameter(gl.VENDOR),\r\n    Renderer: gl.getParameter(gl.RENDERER),\r\n    WebGL_Version: gl.getParameter(gl.VERSION),\r\n    MAX_TEXTURE_SIZE: gl.getParameter(gl.MAX_TEXTURE_SIZE),\r\n    MAX_RENDERBUFFER: gl.getParameter(gl.MAX_RENDERBUFFER_SIZE),\r\n  }\r\n} else {\r\n  report.WebGL = {\r\n    Context: 'FAILED TO GET WEBGL CONTEXT'\r\n  }\r\n}\r\n\r\n// If chromium browser we can check memory stats\r\nif (performance?.memory) {\r\n  report.Memory = {\r\n    Heap_Limit: formatBytes(performance?.memory.jsHeapSizeLimit),\r\n    Heap_Total: formatBytes(performance?.memory.totalJSHeapSize),\r\n    Heap_Used: formatBytes(performance?.memory.usedJSHeapSize),\r\n  }\r\n}\r\n\r\nfor (const [k1, v1] of Object.entries(report)) {\r\n  output += `${k1}:\\n`;\r\n  for (const [k2, v2] of Object.entries(v1)) {\r\n    output += `  ${k2}: ${v2}\\n`;\r\n  }\r\n}\r\n\r\nlet d = new Dialog({\r\n  title: `Debug Output`,\r\n  content: `<textarea style=\"height: 500px\" type=\"text\" id=\"debugmacro\">${output}</textarea>`,\r\n  buttons: {\r\n    copy: {\r\n      label: `Copy to clipboard`,\r\n      callback: () => {\r\n        $(\"#debugmacro\").select();\r\n        document.execCommand('copy');\r\n      }\r\n    },\r\n    close: {\r\n      icon: \"<i class='fas fa-tick'></i>\",\r\n      label: `Close`\r\n    },\r\n  },\r\n  default: \"close\",\r\n  close: () => {}\r\n});\r\n\r\nd.options.width = 600;\r\nd.position.width = 600;\r\nd.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/amber-mosquito.svg","actorIds":[],"_id":"Cn76roNUSSAHGfdq"}
{"name":"Lucky","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/lucky.jpg","tooltip":"Lucky_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Lucky\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/lucky.jpg","actorIds":[],"_id":"D4KPlYsDX0b3dST7"}
{"name":"Darkness","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/evil-eye-red-2.jpg","tooltip":"Darkness_Albrek ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Darkness\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/evil-eye-red-2.jpg","actorIds":[],"_id":"D5Rro6wTrMNP3gmm"}
{"name":"Channel Divinity: Abjure Enemy","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/passive5.png","tooltip":"Channel Divinity: Abjure Enemy_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Channel Divinity: Abjure Enemy\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/passive5.png","actorIds":[],"_id":"DA6gtwgSuqhfX95A"}
{"name":"Bruës Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Bruës Mädtil\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/dndbeyond/icon2.png","actorIds":[],"_id":"DJpl7DW5sBaYBGVL"}
{"name":"Tongues","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/light_07.jpg","tooltip":"Tongues_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Tongues\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/light_07.jpg","actorIds":[],"_id":"DSKeFHDarD1nUYHN"}
{"name":"Set Token bars and nameplate","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Set Token bars and nameplate ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* This will set every token in scene to always display their\r\n * token bars and nameplate, and sets the first bar to represent \r\n * HP and removes the second token bar.\r\n*/\r\n\r\nconst tokens =canvas.tokens.placeables.map(token => {\r\n   return {\r\n       _id: token.id,\r\n       \"bar1.attribute\": \"attributes.hp\",\r\n       \"bar2.attribute\": \"\",\r\n       \"displayName\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\r\n       \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n   };\r\n});\r\n\r\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","author":"s7gxOGja1p9WAX4j","img":"imports/icons/mug-shot.svg","actorIds":[],"_id":"DfZSxwYJ2Hgws37t"}
{"name":"Mace","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/morningstar.jpg","tooltip":"Mace_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Mace\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/morningstar.jpg","actorIds":[],"_id":"Du6P0nGdlUdvfMNh"}
{"name":"A - Multi-Filters Example","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"A - Multi-Filters Example  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fog\",\r\n    color: 0x00FF50,\r\n    density: 0.20,\r\n    time: 0,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 1.2, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"ray\",\r\n    time: 0,\r\n    color: 0x00DE50,\r\n    alpha: 0.25,\r\n    divisor: 32,\r\n    anchorY: 0,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0005, \r\n          animType: \"move\" \r\n       }\r\n    }\r\n},\r\n{\r\n    filterType: \"glow\",\r\n    distance: 10,\r\n    outerStrength: 8,\r\n    innerStrength: 0,\r\n    color: 0x003000,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0x003000, \r\n           val2:0x00EF00\r\n        }\r\n    }\r\n}\r\n];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/A-MultiFiltersExample.JPG","actorIds":[],"_id":"EF9DINozOvXy1fNP"}
{"name":"Quarterstaff","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/quarterstaff.jpg","tooltip":"Quarterstaff_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Quarterstaff\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/quarterstaff.jpg","actorIds":[],"_id":"ERnPZZBNqAAhwWL3"}
{"name":"24 - T13 - Simple Color","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T13 - Simple Color  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"mySimpleField\",\r\n    shieldType: 13,\r\n    gridPadding: 2,\r\n    color: 0x00CC00,\r\n    time: 0,\r\n    blend: 14,\r\n    intensity: 1,\r\n    lightAlpha: 0,\r\n    lightSize: 0,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/24-t13-simplecolor.JPG","actorIds":[],"_id":"EXjkrSUyHLO1O7Eb"}
{"name":"Sharpshooter","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Sharpshooter - feat ","icon":"imports/icons/97.png","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\r\nCreated Monkan#8752 with guidance from the Rage macro in the FVTT Community Macros\r\n\r\nTips to make it work\r\n 1 -    Have a feature called 'Sharpshooter' for your character.\r\n 2 -    Make sure you have your weapons with Ranged Weapon Attack. \r\n 3 -    if you make any changes to your damage or attack calculations, make sure you toggle it off.\r\n        As it stores the old values to replace once you disable the feat.  It could undo your changes.\r\n*/\r\n\r\nlet ss='';\r\nlet chatMsg='';\r\n\r\n\r\nif (actor !== undefined && actor !== null) {\r\n    // find the feat Sharpshooter\r\n    ss = actor.items.find(i => i.name === 'Sharpshooter');\r\n    if (ss == undefined) { \r\n        ui.notifications.warn(\"Please select a single token with the Sharpshooter feat.\");        \r\n    }\r\n\r\n    if (ss !== undefined && ss !== null) {\r\n\t\tchatMsg = '';\r\n\t\tlet enabled = false;\r\n\t\t// store the state of the Sharpshooter toggle in flags\r\n\t\tif (actor.data.flags.ssMacro !== null && actor.data.flags.ssMacro !== undefined) {\r\n\t\t\tenabled = true;\r\n\t\t}\r\n\t\t// if Sharpshooter is active, disable it\r\n\t\tif (enabled) {\r\n            chatMsg = `${actor.name} is aiming Normally now.`;\r\n            \r\n            let obj = {};\r\n\t\t\tobj['flags.ssMacro'] = null;\t\t\t\r\n\t\t\tactor.update(obj);\r\n\r\n\t\t\t// reset items\r\n\t\t\tfor (let item of actor.items) {\r\n\t\t\t\tif (item.data.flags.ssMacro !== null && item.data.flags.ssMacro !== undefined) {\r\n\t\t\t\t\t// restoring the old value from flags\r\n                    let oldDmg = item.data.flags.ssMacro.oldDmg;\r\n                    let oldAtk = item.data.flags.ssMacro.oldAtk;\r\n\t\t\t\t\tlet obj = {};\r\n                    obj['data.damage.parts'] = oldDmg;\r\n                    obj['data.attackBonus'] = oldAtk;\r\n\t\t\t\t\tobj['flags.ssMacro'] = null;\r\n\t\t\t\t\titem.update(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t// if Sharpshooter is disabled, enable it\r\n\t\t} else {\r\n            chatMsg = `${actor.name} is aiming very carefully!`;\r\n            \r\n            let obj = {};\r\n\t\t\tobj['flags.ssMacro.enabled'] = true;\r\n\t\t\tactor.update(obj);\r\n\r\n            // update items\r\n            let ssAtk = -5;\r\n\t\t\tlet ssDmg = 10;\r\n\t\t\tfor (let item of actor.items) {\r\n                let isRanged = getProperty(item, 'data.data.actionType') === 'rwak';                \r\n\t\t\t\tif (isRanged && item.data.data.damage.parts.length > 0) {\r\n\t\t\t\t\tconsole.log('updating ' + item);\r\n                    let obj = {};\r\n                    let atk = item.data.data.attackBonus;\r\n                    let dmg = item.data.data.damage.parts;\r\n                    // Save old attack and damage values\r\n                    obj['flags.ssMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\r\n                    obj['flags.ssMacro.oldAtk'] = JSON.parse(JSON.stringify(atk));\r\n                    // Set the new attack and damage values\r\n                    if (atk !== null) {\r\n                        atk += '' + ssAtk;\r\n                    } else {\r\n                        atk = ssAtk;\r\n                    }\r\n\t\t\t\t\tdmg[0][0] = `${dmg[0][0]} + ${ssDmg}`;\r\n                    obj['data.damage.parts'] = dmg;\r\n                    obj['data.attackBonus'] = atk;\r\n\t\t\t\t\titem.update(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n    }\r\n\r\n} else ui.notifications.warn(\"Please select a token.\");\r\n\r\n// write to chat if needed:\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n    };\r\n\tChatMessage.create(chatData, {});\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/97.png","actorIds":[],"_id":"EvBnFovY3LKccG3l"}
{"name":"27 - T05 - Pure Fire v2 (xglow+fire)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"27 - T05 - Pure Fire v2 (xglow+fire)    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// In this version, the glow is blending with the fire\r\n// This is to show that the order of the filters is important\r\nlet params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myPureFireShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myPureFireAura\",\r\n    auraType: 2,\r\n    color: 0x903010,\r\n    thickness: 9.8,\r\n    scale: 3.,\r\n    time: 0,\r\n    auraIntensity: 1,\r\n    subAuraIntensity: 0.3,\r\n    threshold: 0.25,\r\n    discard: true,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0027, \r\n           animType: \"move\" \r\n        },\r\n        thickness:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"cosOscillation\", \r\n           val1:2, \r\n           val2:3.6\r\n        }\r\n    }\r\n},\r\n{\r\n    filterType: \"fire\",\r\n    filterId: \"myPureFire\",\r\n    intensity: 1,\r\n    color: 0xFFFFFF,\r\n    amplitude: 1,\r\n    time: 0,\r\n    blend: 2,\r\n    fireBlend : 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0024, \r\n        animType: \"move\" \r\n      },\r\n      intensity:\r\n      {\r\n        active:true,\r\n        loopDuration: 15000,\r\n        val1: 0.8,\r\n        val2: 3,\r\n        animType: \"syncCosOscillation\"\r\n      },\r\n      amplitude:\r\n      {\r\n        active:true,\r\n        loopDuration: 4400,\r\n        val1: 1,\r\n        val2: 1.6,\r\n        animType: \"syncCosOscillation\"\r\n      }\r\n      \r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/27-t05-purefirev2-xglowfire.JPG","actorIds":[],"_id":"Ey5GdJvMUncmH907"}
{"name":"Show Token Artwork","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Show Token Artwork ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Macro showing Character's Artwork for selected token\r\n *\r\n * @author Forien#2130\r\n * @url https://patreon.com/forien\r\n * @licence MIT\r\n */\r\n\r\nif (token === undefined) {\r\n  ui.notifications.warn(\"Please select token first.\");\r\n} else {\r\n  let tActor = token.actor;\r\n  let ip = new ImagePopout(tActor.data.img, {\r\n    title: tActor.name,\r\n    shareable: true,\r\n    uuid: tActor.uuid\r\n  }).render(true);\r\n  ip.shareImage();\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/mona-lisa.svg","actorIds":[],"_id":"F9qko9JCRPGbkypC"}
{"name":"Ring of Invisibility","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Ring of Invisibility ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet hidden = target.data.hidden;\r\nlet visible = hidden ? false : true;\r\nTokenUpdate.execute(args[1],{\"hidden\": visible});\r\n","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/jewelry/ring-ruby.jpg","actorIds":[],"_id":"FD7e1OWLp80ftxD0"}
{"name":"Mage Armor","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-blue-1.jpg","tooltip":"Mage Armor_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Mage Armor\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-blue-1.jpg","actorIds":[],"_id":"FHX9mANH6JnwrLoB"}
{"name":"Handaxe: The Barber","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/handaxe.jpg","tooltip":"Handaxe: The Barber_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Handaxe: The Barber\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/handaxe.jpg","actorIds":[],"_id":"FcdloBQ5nWMCp2mn"}
{"name":"toggle-playlist-sound","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"toggle-playlist-sound ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and Playlist QoL\r\n * This will toggle the playing state of a sound in your playlists\r\n * Takes the playlist name as first argument, and the sound name as second argument \r\n * Example: /toggle-playlist-sound \"SFX\" \"Sword Clash\"\r\n */\r\n\r\nFurnacePlaylistQoL.PlaySound(args[0], args[1]);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/zigzag-tune.svg","actorIds":[],"_id":"FngEEVsjS9GVsBqo"}
{"name":"Morningstar","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/morningstar.jpg","tooltip":"Morningstar_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Morningstar\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/morningstar.jpg","actorIds":[],"_id":"G5gM7DkuZL46Tnud"}
{"name":"Detect Magic","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/light-blue-2.jpg","tooltip":"Detect Magic_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Detect Magic\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/light-blue-2.jpg","actorIds":[],"_id":"GZvl18cj6fbzJXHo"}
{"name":"Get Time","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Say hello    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"Hi {{game.user.name}}, it is now {{macro \"current-time\"}}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/watch.svg","actorIds":[],"_id":"Gs7hV0U3e5smLwea"}
{"name":"journal-dialog","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"journal-dialog ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// This macro requires the advanced macros of Furnace\r\n// This will display the contents of a journal as a dialog\r\n// Takes one argument, the journal name\r\n// Example: /journal-dialog \"Welcome to my world\"\r\n\r\nconst journal = game.journal.entities.find(j => j.name === args[0])\r\nif (!journal) return;\r\nnew Dialog({content: journal.data.content,\r\n            buttons: {ok: {label: args[1] || \"ok\"}}}).render(true)","author":"s7gxOGja1p9WAX4j","img":"imports/icons/scroll-quill.svg","actorIds":[],"_id":"GspUG9wxBkLLHrgC"}
{"name":"24 - T06 - Air Bubble","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T06 - Air Bubble   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myAirField\",\r\n    shieldType: 6,\r\n    gridPadding: 1.2,\r\n    color: 0x7090AA,\r\n    time: 0,\r\n    blend: 14,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/airbubble.png","actorIds":[],"_id":"GwyOOQgCZm9CV6NF"}
{"name":"Wrathful Smite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/enchant-acid-1.jpg","tooltip":"Wrathful Smite_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Wrathful Smite\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/enchant-acid-1.jpg","actorIds":[],"_id":"H2EGpkjuMVWelJND"}
{"name":"Staff of Defense","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/Wand2_1.PNG","tooltip":"Staff of Defense_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Staff of Defense\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Wand2_1.PNG","actorIds":[],"_id":"HHwup0BJhmF56T4K"}
{"name":"Thaumaturgy","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/explosion-royal-1.jpg","tooltip":"Thaumaturgy_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Thaumaturgy\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/explosion-royal-1.jpg","actorIds":[],"_id":"HaDsfaaBNBsFPyhc"}
{"name":"Branding Smite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/enchant-orange-2.jpg","tooltip":"Branding Smite_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Branding Smite\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/enchant-orange-2.jpg","actorIds":[],"_id":"HlnUN3ib7vk1nZle"}
{"name":"Shillelagh","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Shillelagh ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet weapons = target.actor.items.filter(i => i.data.type === `weapon`);\r\nlet weapon_content = ``;\r\n\r\n\r\nfor (let weapon of weapons) {\r\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\r\n}\r\nif (args[0] === \"on\" && !target.getFlag('world', 'shillelagh')) {\r\n    let content = `\r\n<div class=\"form-group\">\r\n  <label>Weapons : </label>\r\n  <select name=\"weapons\">\r\n    ${weapon_content}\r\n  </select>\r\n</div>`;\r\n\r\n    new Dialog({\r\n        title: \"Choose a club or quarterstaff\",\r\n        content,\r\n        buttons:\r\n        {\r\n            Ok:\r\n            {\r\n                label: `Ok`,\r\n                callback: (html) => {\r\n                    console.log(html.find('[name=weapons]')[0].value);\r\n                    let itemId = html.find('[name=weapons]')[0].value;\r\n                    let item = actor.items.get(itemId);\r\n                    let copy_item = duplicate(item);\r\n                    target.setFlag(`world`, `shillelagh`, itemId);\r\n                    copy_item.data.damage.parts[0][0] = \"1d8 +@mod\";\r\n                    copy_item.data.ability = \"wis\"\r\n                    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n                }\r\n            },\r\n            Cancel:\r\n            {\r\n                label: `Cancel`\r\n            }\r\n        }\r\n    }).render(true);\r\n}\r\n\r\nif (args[0] === \"off\") {\r\n    let itemId = token.getFlag(`world`, `shillelagh`);\r\n    let item = actor.items.get(itemId);\r\n    let copy_item = duplicate(item);\r\n    copy_item.data.damage.parts[0][0] = \"1d6 +@mod\";\r\n    copy_item.data.ability = \"\"\r\n    target.actor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\r\n    target.unsetFlag(`world`, `shillelagh`);\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/enchant-jade-1.jpg","actorIds":[],"_id":"HoLXoYzTDI8iCTt5"}
{"name":"Boots of Striding","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Boots of Striding ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet TokenSetFlag = game.macros.getName(\"TokenSetFlag\");\r\nlet TokenUnSetFlag = game.macros.getName(\"TokenUnSetFlag\");\r\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\r\n\r\nif (!target.getFlag('world', 'bootsOfStriding')) {\r\n    let newSpeed = (speed < 30) ? 30 : speed;\r\n    console.log(newSpeed)\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": (newSpeed + \"ft\") });\r\n    TokenSetFlag.execute(args[1], 'world', 'bootsOfStriding', speed);\r\n} else if (target.getFlag('world', 'bootsOfStriding')) {\r\n    let newSpeed = target.getFlag('world', 'bootsOfStriding')\r\n    ActorUpdate.execute(args[1], { \"data.attributes.speed.value\": (newSpeed + \"ft\") });\r\n    TokenUnSetFlag.execute(args[1], 'world', 'bootsOfStriding');\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Light%20Boot_1.png","actorIds":[],"_id":"Hp0WKRMjhSysdxFz"}
{"name":"Hold Person","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/shielding-eerie-2.jpg","tooltip":"Hold Person_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hold Person\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/shielding-eerie-2.jpg","actorIds":[],"_id":"Hrsaz93c05TcfWrE"}
{"name":"play-audio","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"play-audio ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will play audio from a URL\r\n * Takes the URL of the audio file as its first argument\r\n * The second argument, if set to true, will play the audio for every other player too.\r\n * Example: /play-audio \"https://example.com/sound-effects/explosion.mp3\" true\r\n */\r\nconst url = args[0];\r\nconst push = args[1];\r\n\r\nAudioHelper.play({src: [url]}, push);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/musical-score.svg","actorIds":[],"_id":"HytEeX9xQCHrC6U3"}
{"name":"Pact Boon: Thaumaturgy","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/explosion-royal-1.jpg","tooltip":"Pact Boon: Thaumaturgy_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Pact Boon: Thaumaturgy\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/explosion-royal-1.jpg","actorIds":[],"_id":"IA0x147diCBloxHy"}
{"name":"AA_TrapTrigger","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"AA_TrapTrigger ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"// Get the trap name as the first arugment. This is the trap token name. Should be passed in your Trigger Happy journal entry.\r\nlet trapname = args[0];\r\n\r\n// Get the trap macro name as the second argument. This is the macro that will be executed. Put your trap logic in here.\r\nlet trapmacro = args[1];\r\n\r\n// Check if the trap name has been passed.\r\nif (!trapname) {\r\n  // Throw an error message if no trap name argument has been passed.\r\n  ui.notifications.error(\"No arguments were passed to AA_TrapTrigger.\");\r\n  return;\r\n}\r\n\r\n// Get the token for the trap\r\nlet traptoken = canvas.tokens.placeables.find((t) => t.name === trapname);\r\n\r\n// Check if the token has been found\r\nif (!traptoken) {\r\n  // Throw an error message if no trap token has been found.\r\n  ui.notifications.error(\"Unable to location trap token.\");\r\n  return;\r\n}\r\n\r\n// If the trap is neutral or friendly we do nothing [-1 hostile; 0 neutral; 1 friendly]\r\nif (traptoken.data.disposition != -1) {\r\n  return;\r\n}\r\n\r\n// Get the token that triggered the trap\r\nif (!canvas.tokens.controlled[0]) {\r\n  // Throw an error if the actor could not be found\r\n  ui.notifications.error(\"No actor has been passed to AA_TrapTrigger.\");\r\n  return;\r\n}\r\n\r\n// Get the victom actor (actor that triggered the trap) from the token\r\nlet victomactor = canvas.tokens.controlled[0].actor;\r\n\r\n// Check if the victom actor exists\r\nif (!victomactor) {\r\n  // Return an error if no actor can be found\r\n  ui.notifications.error(\"No actor has been passed to AA_TrapTrigger.\");\r\n  return;\r\n}\r\n\r\n// Get the name of the victom actor\r\nlet victomactorname = victomactor.name;\r\n\r\n// Get the ID of the victom actor\r\nlet victomactorid = victomactor.id;\r\n\r\n// Create message for trap activation logging\r\nconst triggermessage =\r\n  \"A trap has been been activated by \" + victomactorname + \".\";\r\n\r\nconsole.log(\"++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\nconsole.log(triggermessage, ...args);\r\nconsole.log(\"++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\n\r\n// Get the macro object\r\nconst macro = game.macros.entities.find((m) => m.name === trapmacro);\r\n\r\n// Create message for missing macro\r\nconst missingmacromessage =\r\n  \"No trap macro with the name '\" + trapmacro + \"' could be found\";\r\n\r\n// Check if the macro exists\r\nif (!macro) {\r\n  // return error message of the macro doesn't exist\r\n  ui.notifications.error(missingmacromessage);\r\n  return;\r\n}\r\n\r\n// Execute the macro\r\nmacro.execute(victomactor.id, trapname);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/wolf-trap.svg","actorIds":[],"_id":"IAe7YWSsVOagS9b3"}
{"name":"27 - T03 - Ugly Villains Aura (xglow)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"27 - T03 - Ugly Villains Aura (xglow)   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myUglyZapShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myUglyGlow\",\r\n    auraType: 2,\r\n    color: 0x050505,\r\n    thickness: 2.7,\r\n    scale: 7,\r\n    time: 0,\r\n    auraIntensity: 5,\r\n    subAuraIntensity: 2,\r\n    threshold: 0.08,\r\n    discard: false,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0012, \r\n           animType: \"move\" \r\n        },\r\n        auraIntensity:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"syncCosOscillation\", \r\n           val1:5, \r\n           val2:0\r\n        },\r\n        subAuraIntensity:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"syncCosOscillation\", \r\n           val1:2, \r\n           val2:0\r\n        },\r\n        color:\r\n        {\r\n           active: true,\r\n           loopDuration: 6000, \r\n           animType: \"syncColorOscillation\", \r\n           val1:0x050505, \r\n           val2:0x200000\r\n        },\r\n        threshold:\r\n        {\r\n           active: true,\r\n           loopDuration: 1500, \r\n           animType: \"syncCosOscillation\", \r\n           val1:0.02, \r\n           val2:0.50\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/uglyvillanaura.png","actorIds":[],"_id":"ICEDe8Sz69jmIiC7"}
{"name":"Meatshield Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro      ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Meatshield Shinyhide\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/dndbeyond/Meatshield-Shinyhide.png","actorIds":[],"_id":"IPM4qhOK4Ao7se1N"}
{"name":"Guiding Bolt","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fireball-sky-2.jpg","tooltip":"Guiding Bolt_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Guiding Bolt\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fireball-sky-2.jpg","actorIds":[],"_id":"IZCU0AFfFgg8v8Da"}
{"name":"24 - T11 - Grid Force Field","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T11 - Grid Force Field   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myGridField\",\r\n    shieldType: 11,\r\n    gridPadding: 2,\r\n    color: 0x00CCCC,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 1,\r\n    lightSize: 0.3,\r\n    scale: 0.5,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/24-t11-gridforcefield.JPG","actorIds":[],"_id":"Ib3fA1BMeUZXZPZ1"}
{"name":"Random Inspiration (Bard)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"// Courtesy of @Zarek\r\n// Selected target receives a random inspiration from a table called \"inspirations\".\r\n// You can find a table called inspirations in the community tables module\r\n\r\n// Setup variables\r\nlet tableName = \"inspirations\";\r\n\r\nlet bardicInspiration = () => {\r\n  if (!actor) {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n    return\r\n  }\r\n\r\n  // Get Targets name\r\n  let actorLevels = actor.data.data.levels || 1;\r\n  const targetId = game.user.targets.ids[0];\r\n  const targetToken = canvas.tokens.get(targetId);\r\n  if (!targetToken) {\r\n    ui.notifications.warn(\"You must target a token.\");\r\n    return\r\n  }\r\n  const targetName = targetToken.name;\r\n\r\n\r\n  let table = game.tables.entities.find(t => t.name == tableName);\r\n\r\n  //default inspiration if no table is found.\r\n  //let inspiration = \"Cowards die many times before their deaths; the valiant never taste death but once.\";\r\n  let inspiration = `I don't know what effect ${targetName} will have upon the enemy, but, by God, he terrifies me.`;\r\n  \r\n  // Roll the result, and mark it drawn\r\n  if (table) {\r\n    if (checkTable(table)) {\r\n      // let result = table.roll()[1];\r\n      let roll = table.roll();\r\n      let result = roll.results[0];\r\n      inspiration = result.text;\r\n      table.updateEmbeddedEntity(\"TableResult\", {\r\n        _id: result._id,\r\n        drawn: true\r\n      });\r\n    }\r\n  }\r\n\r\n  function checkTable(table) {\r\n    let results = 0;\r\n    for (let data of table.data.results) {\r\n      if (!data.drawn) {\r\n        results++;\r\n      }\r\n    }\r\n    if (results < 1) {\r\n      table.reset();\r\n      ui.notifications.notify(\"Table Reset\")\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  let dieType = 'd6';\r\n  if (actorLevels >= 15) {\r\n    dieType = 'd12';\r\n  } else if (actorLevels >= 10) {\r\n    dieType = 'd10';\r\n  } else if (actorLevels >= 5) {\r\n    dieType = 'd8';\r\n  }\r\n\r\n  let messageContent = '';\r\n  messageContent += `<p>${token.name} exclaims <b><i>\"${inspiration}\"</i></b></p>`\r\n  messageContent += `<p>${targetName} is inspired.</p>`\r\n  messageContent += `<details closed=\"\"><summary><a>Bardic Inspiration</a></summary><p>${targetName} gains one Bardic Inspiration die, a <strong>${dieType}</strong>.<br>Once within the next 10 minutes, ${targetName} can roll the die and add the number rolled to one <b>ability check, attack roll, or saving throw</b>. ${targetName} can wait until after it rolls the <strong>d20</strong> before deciding to use the Bardic Inspiration die, but must decide before the DM says whether the roll succeeds or fails. Once the Bardic Inspiration die is rolled, it is lost.</p></details>`\r\n\r\n  // create the message\r\n  if (messageContent !== '') {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: messageContent,\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n  }\r\n};\r\nbardicInspiration();\r\n","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/inventory/lute.jpg","actorIds":[],"_id":"ImUoAEuMFHpyAtak"}
{"name":"24 - T12 - Warp Time Aura","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T12 - Warp Time Aura   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myWarpField\",\r\n    shieldType: 12,\r\n    gridPadding: 2,\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1,\r\n    lightAlpha: 0.8,\r\n    lightSize: 0.5,\r\n    scale: 0.9,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0009, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/24-t12-warptimeaura.JPG","actorIds":[],"_id":"J214hky0sYi0bcMc"}
{"name":"Fear","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Fear\");","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/horror-eerie-2.jpg","actorIds":[],"_id":"J7Qe5TqdxgnZtZEg"}
{"name":"Prayer of Healing","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/heal-jade-2.jpg","tooltip":"Prayer of Healing_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Prayer of Healing\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/heal-jade-2.jpg","actorIds":[],"_id":"JK1Vsoo8VZEBaooY"}
{"name":"Channel Divinity: Preserve Life","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/light_03.jpg","tooltip":"Channel Divinity: Preserve Life_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Channel Divinity: Preserve Life\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/light_03.jpg","actorIds":[],"_id":"K2va1kmIT5w76Qpt"}
{"name":"Leomund’s Tiny Hut","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Leomund’s Tiny Hut_Teferi  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Leomund’s Tiny Hut\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/hut.svg","actorIds":[],"_id":"KCKRxUNLekiUPc9X"}
{"name":"Warhammer: The Dentist","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/warhammer.png","tooltip":"Warhammer: The Dentist_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Warhammer: The Dentist\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/warhammer.png","actorIds":[],"_id":"KKYOV0G0ZYcbqlNK"}
{"name":"Frostbite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Frostbite\");","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/frostfire.svg","actorIds":[],"_id":"KLOuTYK6uwgyT5iX"}
{"name":"Calm Emotions","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/light-blue-2.jpg","tooltip":"Calm Emotions_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Calm Emotions\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/light-blue-2.jpg","actorIds":[],"_id":"KPIddLPUIYkoHMUs"}
{"name":"Change Disposition","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}}},"scope":"global","command":"let applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Disposition Changer`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Disposition Type:</label>\r\n        <select id=\"dispo-type\" name=\"dispo-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"hostile\">Hostile</option>\r\n          <option value=\"neutral\">Neutral</option>\r\n          <option value=\"friendly\">Friendly</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let dispoType = html.find('[name=\"dispo-type\"]')[0].value || \"none\";\r\n        switch (dispoType) {\r\n          case \"hostile\":\r\n            token.update({\"disposition\": -1});\r\n            break;\r\n          case \"friendly\":\r\n            token.update({\"disposition\": 1});\r\n            break;\r\n          case \"neutral\":\r\n            token.update({\"disposition\": 0});\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n        }\r\n      }\r\n    }\r\n  }\r\n}).render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.1_40.png","actorIds":[],"_id":"KWoodsF74um162mq"}
{"name":"Leave Axeholm1","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro   ","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/narrate As you leave\r\n\r\nYou notice high in the sky....\r\n\r\nThe outline of a white dragon...","author":"s7gxOGja1p9WAX4j","img":"imports/icons/black-book.svg","actorIds":[],"_id":"Kzm2y0udBKxc7hXN"}
{"name":"Levitate","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","tooltip":"Levitate_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Levitate\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","actorIds":[],"_id":"LNSGCqhhI0YnRFZC"}
{"name":"Leave Axeholm2","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro   ","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":false}},"scope":"global","command":"/narrate It circles around and starts descending\r\n\r\nThe yellow eye slits peer down at you\r\n\r\nthen...\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/black-book.svg","actorIds":[],"_id":"LTenIeWY4Bl39MWQ"}
{"name":"Ceremony","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/red_09.jpg","tooltip":"Ceremony_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Ceremony\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/red_09.jpg","actorIds":[],"_id":"LmBXjBJnRrrGZQsm"}
{"name":"Channel Divinity: Guided Strike","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/icon11.png","tooltip":"Channel Divinity: Guided Strike_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Channel Divinity: Guided Strike\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/icon11.png","actorIds":[],"_id":"LpxXsUsDD7QD7gq5"}
{"name":"War Caster","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/sparkling-sabre.svg","tooltip":"War Caster_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"War Caster\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/sparkling-sabre.svg","actorIds":[],"_id":"MKiUYtQrfTPsh0PJ"}
{"name":"27 - T06 - Pure Ice (xglow+smoke)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"27 - T06 - Pure Ice (xglow+smoke)    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n    [{\r\n        filterType: \"zapshadow\",\r\n        filterId: \"myPureIceZapShadow\",\r\n        alphaTolerance: 0.50\r\n    },\r\n    {\r\n        filterType: \"xglow\",\r\n        filterId: \"myPureIceAura\",\r\n        auraType: 1,\r\n        color: 0x5099DD,\r\n        thickness: 4.5,\r\n        scale: 10,\r\n        time: 0,\r\n        auraIntensity: 0.25,\r\n        subAuraIntensity: 1,\r\n        threshold: 0.5,\r\n        discard: false,\r\n        animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: 0.0018,\r\n                animType: \"move\"\r\n            },\r\n            thickness:\r\n            {\r\n                val1: 2, val2: 3.3,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            },\r\n            subAuraIntensity:\r\n            {\r\n                val1: 0.45, val2: 0.65,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 6000\r\n            },\r\n            auraIntensity:\r\n            {\r\n                val1: 0.9, val2: 2.2,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            }\r\n        }\r\n    },\r\n    {\r\n        filterType: \"smoke\",\r\n        filterId: \"myPureIceSmoke\",\r\n        color: 0x80CCFF,\r\n        time: 0,\r\n        blend: 2,\r\n        dimX: 0.3,\r\n        dimY: 1,\r\n        animated:\r\n        {\r\n            time:\r\n            {\r\n                active: true,\r\n                speed: -0.006,\r\n                animType: \"move\"\r\n            },\r\n            dimX:\r\n            {\r\n                val1: 0.4, val2: 0.2,\r\n                animType: \"cosOscillation\",\r\n                loopDuration: 3000\r\n            }\r\n        }\r\n    }];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/27-t06-pureice-xglow-smoke.JPG","actorIds":[],"_id":"MNrx4xL99XqOZ272"}
{"name":"Cunning Action","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/violet_10.jpg","tooltip":"Cunning Action_Billy ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Cunning Action\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/violet_10.jpg","actorIds":[],"_id":"MRgcsINl0YOQhymR"}
{"name":"Metamagic: Quickened Spell","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/mech_12.jpg","tooltip":"Metamagic: Quickened Spell_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Metamagic: Quickened Spell\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/mech_12.jpg","actorIds":[],"_id":"MTxkikiQNLBkRRza"}
{"name":"Control Flames","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Control Flames_Bruës  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Control Flames\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/fire-spell-cast.svg","actorIds":[],"_id":"Md9ff6pTmAc9F7eS"}
{"name":"Roll Knowledge Skill Check","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Knowledge Skill Check ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"const tokens = canvas.tokens.controlled;\r\nconst caster = tokens[0];\r\n\r\nif (tokens.length !== 1) {\r\n  ui.notifications.warn(\"Please select a token\");\r\n} else {\r\n  const knowledgeTypes = [\r\n    \"Arcana\",\r\n    \"Dungeoneering\",\r\n    \"Engineering\",\r\n    \"Geography\",\r\n    \"History\",\r\n    \"Local\",\r\n    \"Nature\",\r\n    \"Nobility\",\r\n    \"Planes\",\r\n    \"Religion\",\r\n  ];\r\n\r\n  const knowledgeData = [];\r\n  knowledgeTypes.forEach((type) => {\r\n    const knowledgeDatum =\r\n      caster.actor.data.data.skills[`k${type.toLowerCase().substring(0, 2)}`];\r\n    knowledgeDatum.name = type;\r\n    knowledgeData.push(knowledgeDatum);\r\n  });\r\n\r\n  const knownKnowledge = knowledgeData.filter((datum) => datum.rank > 0);\r\n\r\n  if (knownKnowledge.length < 1) {\r\n    ui.notifications.warn(\"You know nothing.\");\r\n  } else {\r\n    const buttons = {};\r\n    knownKnowledge.forEach((type) => {\r\n      buttons[type.name] = {\r\n        label: type.name,\r\n        callback: () => {\r\n          rollCheck(type.name, type.mod);\r\n        },\r\n      };\r\n    });\r\n\r\n    new Dialog({\r\n      title: \"Roll Knowledge!\",\r\n      content: `<p>Choose a knowledge skill</p>`,\r\n      buttons: buttons,\r\n    }).render(true);\r\n  }\r\n}\r\n\r\nfunction rollCheck(name, mod) {\r\n  const roll = new Roll(`1d20 + ${mod}`);\r\n  roll.roll();\r\n  roll.toMessage({\r\n    flavor: `Knowledge ${name} check`,\r\n    speaker: { alias: token.actor.data.name },\r\n  });\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/book-aura.svg","actorIds":[],"_id":"MjHVaijrBYOj96cv"}
{"name":"Searing Smite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/enchant-sky-3.jpg","tooltip":"Searing Smite_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Searing Smite\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/enchant-sky-3.jpg","actorIds":[],"_id":"MmstGRtL9SPNKMNt"}
{"name":"Wand of Pyrotechnics - equipment","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"tooltip":"","icon":""}}},"scope":"global","command":"MinorQOL.doRoll(event, \"Wand of Pyrotechnics\", {type: \"equipment\", versatile: false});","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Wand2_1.PNG","actorIds":[],"_id":"NEVqddEOZpVV75sm"}
{"name":"Create or Destroy Water","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/wind-blue-2.jpg","tooltip":"Create or Destroy Water_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Create or Destroy Water\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/wind-blue-2.jpg","actorIds":[],"_id":"NHdN83BIp1z6sFq7"}
{"name":"Guidance","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/haste-sky-1.jpg","tooltip":"Guidance_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Guidance\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/haste-sky-1.jpg","actorIds":[],"_id":"NMj2irtEt31cGxXw"}
{"name":"12 - Zoom Blur","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"12 - Zoom Blur   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"zoomblur\",\r\n    filterId: \"myZoomBlur\",\r\n    strength: 0.15,\r\n    innerRadiusPercent: 65,\r\n    radiusPercent: 100,\r\n    padding: 30,\r\n    animated:\r\n    {\r\n        innerRadiusPercent: \r\n        { \r\n           active: true, \r\n           animType: \"sinOscillation\", \r\n           loopDuration: 500, \r\n           val1: 65, \r\n           val2: 75\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/12-zoomblur.JPG","actorIds":[],"_id":"NVUo4r2OmzuX0X8K"}
{"name":"15 - Cosmic Ray","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"15 - Cosmic Ray   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"ray\",\r\n    filterId : \"myRay\",\r\n    time: 0,\r\n    color: 0xCF8000,\r\n    alpha: 0.5,\r\n    divisor: 32,\r\n    anchorX: 0,\r\n    anchorY: 0,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0005, \r\n          animType: \"move\" \r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/cosmicray.png","actorIds":[],"_id":"NvQ1tWFeDQkA3b4O"}
{"_id":"NyAITcoRymHgesmI","name":"Delete All Macros","permission":{"default":0,"Lh5pfUwqYBvIlqqt":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"// This will totally clear out the macros from the server.\r\n// Caution. Make sure you have a backup.\r\ngame.macros.map(macro => macro.delete());","author":"Lh5pfUwqYBvIlqqt","img":"imports/icons/stop-sign.svg","actorIds":[]}
{"name":"Rage","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is an evolved version of the original D&D 5e Rage Macro masterwork written by Felix#6196.\r\n//\t\t\t\t\t\tNorc#5108 is now maintaining this macro along with continued support from Felix.\r\n//\r\n//\r\n//\t\tUPDATES:\t\t1.\tFixed errors resulting from declarations of \"actor\" and \"token\" in a script macro. \r\n//\t\t\t\t\t\t\tAdded automatic Totem Spirit: Bear detection and resistance application \r\n//\t\t\t\t\t\t\tAdded error messages for trying to rage with no token or no barbarian selected\r\n//\t\t\t\t\t\t2.\t(Felix) Added resource/usage deduction and errors (re-added after accidentally overwriting the addition)\r\n//\t\t\t\t\t\t\tFixed rage damage at level 8\r\n//\t\t\t\t\t\t3.\t(2020/05/30) \"Version 2.0\" \t\r\n//\t\t\t\t\t\t\tImplemented Felix's idea to use global melee weapon attack bonus instead of modifying items\r\n//\t\t\t\t\t\t\tImproved Rage icon toggling to be more reliable\r\n//\t\t\t\t\t\t\tRemoved code from the resource management that created dependency on The Furnace Advanced Macros\r\n//\t\t\t\t\t\t\tImplemented Felix's fix for issue where new resistances and rage uses were not saving properly\r\n//\t\t\t\t\t\t\tFixed rage damage formula again...\r\n//\t\t\t\t\t\t\tAdded basic support for non-strength Based barbarians (Dex, Hexblade)\r\n//\t\t\t\t\t\t\tAdded optional ability to toggle the icon and name of the macro itself based on current raging state.\r\n//\t\t\t\t\t\t4.\t(2020/06/04) \r\n//\t\t\t\t\t\t\tFixed bug with experimental macro name/icon toggle only by renaming \"actor\" and \"token\"\r\n//\t\t\t\t\t\t\tAdded basic localization support to allow searching for translated class features\r\n//\t\t\t\t\t\t5.\t(2020/06/10)\r\n//\t\t\t\t\t\t\tRework to rage damage logic under the hood for edge case (other changes to bonus damage mid-combat) \r\n//\t\t\t\t\t\t\tRemoved logic that was causing multiple character sheets to open in some cases\r\n//\t\t\t\t\t\t\tEnhanced localization support\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!   Bonus Tip 1: \t\tOptional Rage Resource Consumption\r\n//!!!\tTo automatically use and track Rage, you must have a resource exactly named \"Rage\" on your character sheet. This text can be changed\r\n//!!!\tby altering the value for \"rageResourceName\" in the LOCALIZATION SUPPORT section below).\r\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro can then automatically detect the Rage resource.\r\n//!!!\r\n//!!!\tBonus Tip 2: \t\tBear Totem Spirit Barbs\r\n//!!!\tIf you chose the Spirit Seeker Primal path, and at level 3 you chose the Bear Totem Spirit (resistance to all non-psychic damage), \r\n//!!!\tin your 5E character sheet, double-check that the name of your Totem Spirit feature to EXACTLY \"Totem Spirit: Bear\". This text can be\r\n//!!!\tchanged by altering the value for \"bearTotemFeatureName\" in the LOCALIZATION SUPPORT section below).\r\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro then automatically adds the extra \r\n//!!!\t\t\tBear Totem Spirit resistances.\r\n//!!!\r\n//!!!\tBonus Tip 3: \t\tThrown Weapons\r\n//!!!\tWhen a barb throws a weapon using strength, typically a javelin but also possibly a dagger, dart, sword, bar table etc, the rage bonus\r\n//!!!\tshould not be added because it is a ranged attack. However, D&D5E calls javelins and daggers Melee Weapons, because technically they\r\n//!!!\tare both. To solve this issue, if you always throw the weapon, click the weapon's details and change the attack type to \"Ranged Weapon\r\n//!!!\tAttack\" in the Action Type dropdown. If you want, you can add a second copy of the item (with no weight/quantity) to use for meleeing.\r\n//!!!\r\n//!!!\tBonus Tip 4: \t\tThe Rage Condition\r\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Raging\" with the same icon\r\n//!!!\tas the optional rage icon overlay, 'icons/svg/explosion.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE section below.\r\n//!!!\r\n//!!!\tBonus Tip 5: \t\tObsidian Sheet Compatibility\r\n//!!!\tIf using Obsidian module, try replacing \"Barbarian\" with \"brb\" as the barbClassName value in LOCALIZATION SUPPORT below.\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL TOKEN ICON-\tOn by default. If a path to a rage icon is defined, it displays like a condition on the raging barbarian.\r\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\r\n//!!!\r\nconst rageIconPath = 'icons/svg/explosion.svg';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL RESOURCE DEDUCTION \tOn by default. First option automatically subtracts from the Rage Resource if enabled.\r\n//!!!\t\t\t\t\t\t\t\t\tSecond option prevents raging if no Rage resource is left. Set to false if you do not want this.\r\n\r\n\t\t\tconst deductResource = true;\r\n\t\t\tconst preventNegativeResource = true;\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL NON-STRENGTH BARBARIAN SUPPORT\t\tONLY override to FALSE if your barbarian does not use Strength to make melee attacks\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\tand therefore does not get the Rage bonus to melee weapon attack damage.\r\n//!!!\r\n\t\t\tconst strAttacks = true;\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on the barbarian's rage state.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one barbarian using this feature at a time.\r\n\r\n\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\r\n\t\t\tconst toggleMacro = false;\r\n\r\n\t\t\t//To use a different icon, manually change the filepath here\r\n\t\t\tconst stopRageIconPath = 'icons/svg/unconscious.svg';\r\n\r\n\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\r\n\t\t\tconst rageMacroName = 'Rage';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//declarations\r\nlet barb = '';\r\nlet chatMsg = '';\r\nlet bear = '';\r\nlet noRage = false;\r\nlet rageDmgAdded = false;\r\nlet toggleResult = false;\r\nlet macroActor = actor;\r\nlet macroToken = token;\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tLOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\r\n//!!!\t\t\t\t\t\t\t\t\t\tSets error messages and flavor text as constants also for easier translation.\r\n//!!!\r\n\t\t\t//MUST MATCH VALUES IN CHARACTER SHEET (if present)\r\n\t\t\tconst barbClassName = 'Barbarian';\r\n\t\t\tconst rageResourceName = 'Rage';\r\n\t\t\tconst bearTotemFeatureName = 'Totem Spirit: Bear';\r\n\r\n\t\t\t//All remaining values may be changed freely\r\n\r\n\t\t\t//Rage chat message flavor text. Actor's name appears immediately before these two strings in the message.\r\n\t\t\tconst rageMsg = ' is RAAAAAGING!'\r\n\t\t\tconst endRageMsg =  ' is no longer raging.';\r\n\r\n\t\t\t//error and warning messages\r\n\t\t\tconst errorSelectBarbarian = 'Please select a single barbarian token.';\r\n\t\t\tconst errorNoRage = ' does not have any rage left, time for a long rest!';\r\n\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Rage toggle successful but unable to alter macro.';\r\n\t\t\tconst errorSelectToken = 'Please select a token.';\r\n\t\t\tconst errorFailRevert = 'Failed to revert global melee weapon attack bonus, please check manually.';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n//main\r\n//check to see if Actor exists and is a barbarian\r\nif (macroActor !== undefined && macroActor !== null) {\r\n\r\n\t// get the barbarian class item\r\n\tbarb = macroActor.items.find(i => i.name === `${barbClassName}`);\r\n\tif (barb == undefined) {\r\n\t\tui.notifications.warn(`${errorSelectBarbarian}`);\r\n\t}\r\n\tif (barb !== undefined && barb !== null) {\r\n\t\tchatMsg = `${macroActor.name} + rageMsg`;\r\n\t\tlet enabled = false;\r\n\t\t// Store the state of the rage toggle flags that indicate if rage is active or not\r\n\t\tif (macroActor.data.flags.rageMacro !== null && macroActor.data.flags.rageMacro !== undefined) {\r\n\t\t\tenabled = true;\r\n\t\t\t\t// Store whether there is also a rage damage bonus currently active\r\n\t\t\t\tif (macroActor.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\r\n\t\t\t\t\trageDmgAdded = true;\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Calculate rage value for use in damage reversion and application\r\n\t\t// Determining the barbarian level\r\n\t\tlet barblvl = barb.data.data.levels;\r\n\r\n\t\t// Formula to determine the rage bonus damage depending on barbarian level\r\n\t\tlet lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\r\n\t\tlet rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\r\n\t\tlet dmg = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.damage));\r\n\r\n\t\t// if rage is active, disable it\r\n\t\tif (enabled) {\r\n\t\t\tchatMsg = `${macroActor.name} ${endRageMsg}`;\r\n\t\t\t// reset resistances and melee weapon attack bonus\r\n\t\t\tlet obj = {};\r\n\t\t\tobj['flags.rageMacro'] = null;\r\n\t\t\t//revert damage resistances\r\n\t\t\tobj['data.traits.dr'] = macroActor.data.flags.rageMacro.oldResistances;\r\n\r\n\t\t\t//carefully revert rage global mwak damage bonus to original value, if that bonus is active\r\n\t\t\t//eventually want to add support so only last instance found is replaced.\r\n\t\t\tif(rageDmgAdded) {\r\n\t\t\t\tif (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\r\n\t\t\t\t\tconsole.log('Removing simple rage damage');\r\n\t\t\t\t\tobj['data.bonuses.mwak.damage']='';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Removing complex rage damage');\r\n\t\t\t\t\tlet patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\r\n\t\t\t\t\tlet result = dmg.search(patt);\r\n\t\t\t\t\tif (result !== -1) {\r\n\t\t\t\t\t\tlet len = ('' + rageDmg).length;\r\n\t\t\t\t\t\tlet origDmg = duplicate(dmg);\r\n\t\t\t\t\t\tlet firstHalfDmg = duplicate(dmg).substring(0,result);\r\n\t\t\t\t\t\t//Test String: 2d6 + 2 + 2d6\r\n\t\t\t\t\t\tlet lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\r\n\t\t\t\t\t\tdmg = `${firstHalfDmg}${lastHalfDmg}`;\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage']=dmg;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tui.notifications.error(`${errorFailRevert}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmacroActor.update(obj);\r\n\r\n\t\t// if rage is disabled, enable it\r\n\t\t} else {\r\n\t\t\tif (deductResource) {\r\n\t\t\t\tlet hasAvailableResource = false;\r\n\t\t\t\tlet newResources = duplicate(macroActor.data.data.resources)\r\n\t\t\t\tlet obj = {}\r\n\t\t\t\t// Look for Resources under the Core macroActor data\r\n\t\t\t\tlet resourceKey = Object.keys(macroActor.data.data.resources).filter(k => macroActor.data.data.resources[k].label === `${rageResourceName}`).shift();\r\n\t\t\t\tif (resourceKey && (macroActor.data.data.resources[resourceKey].value > 0 || !preventNegativeResource)) {\r\n\t\t\t\t\thasAvailableResource = true;\r\n\t\t\t\t\tnewResources[resourceKey].value--;\r\n\t\t\t\t\tobj['data.resources'] = newResources \r\n\t\t\t\t\tmacroActor.update(obj);\r\n\t\t\t\t}\r\n\t\t\t\tif (!hasAvailableResource) {\r\n\t\t\t\t\tui.notifications.error(`${macroActor.name} ${errorNoRage}`);\r\n\t\t\t\t\tnoRage=true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//activate rage if there is rage available, or if it is okay to rage with 0 resources\r\n\t\t\tif (!noRage) {\r\n\t\t\t\tchatMsg = `${macroActor.name} ${rageMsg}`;\r\n\t\t\t\t// update resistance\r\n\t\t\t\tlet obj = {};\r\n\t\t\t\t// storing old resistances in flags to restore later\r\n\t\t\t\tobj['flags.rageMacro.enabled'] = true;\r\n\t\t\t\tobj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(macroActor.data.data.traits.dr));\r\n\t\t\t\t// add bludgeoning, piercing and slashing resistance\r\n\t\t\t\tlet newResistance = duplicate(macroActor.data.data.traits.dr);\r\n\t\t\t\tif (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\r\n\t\t\t\tif (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\r\n\t\t\t\tif (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\r\n\t\t\t\t//If bear totem, add bear totem resistances.\r\n\t\t\t\tbear = macroActor.items.find(i => i.name === `${bearTotemFeatureName}`)\r\n\t\t\t\tif (bear !== undefined && bear!== null) {\r\n\t\t\t\t\tif (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\r\n\t\t\t\t\tif (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\r\n\t\t\t\t\tif (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\r\n\t\t\t\t\tif (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\r\n\t\t\t\t\tif (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\r\n\t\t\t\t\tif (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\r\n\t\t\t\t\tif (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\r\n\t\t\t\t\tif (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\r\n\t\t\t\t\tif (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\r\n\t\t\t\t}\r\n\t\t\t\tobj['data.traits.dr'] = newResistance;\r\n\t\t\t\tmacroActor.update(obj);\r\n\r\n\t\t\t\t// For Strength barbarians, update global melee weapon attack bonus to include rage bonus\r\n\t\t\t\tif (strAttacks) {\r\n\t\t\t\t\tobj['flags.rageMacro.rageDmgAdded'] = true;\r\n\t\t\t\t\t// Preserve old mwak damage bonus if there was one, just in case\r\n\t\t\t\t\tobj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\r\n\t\t\t\t\t//actually add the bonus rage damage to the previous bonus damage\r\n\t\t\t\t\t//respect roll formulas by doing string addition if value is already present.\r\n\t\t\t\t\tif (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\r\n\t\t\t\t\t\tconsole.log('Adding simple rage damage');\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = rageDmg;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log('Adding complex rage damage');\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmacroActor.update(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!noRage) {\r\n\t\t\t// toggle rage icon, if rage path is defined above\r\n\t\t\t(async () => { \r\n\t\t\t\ttoggleResult = await macroToken.toggleEffect(rageIconPath);\r\n\t\t\t\tif (toggleResult == enabled) macroToken.toggleEffect(rageIconPath);  \r\n\t\t\t})();\r\n\t\t\t\r\n\t\t\t//toggle macro icon and name, if macro name is correct and stop rage icon path is defined\r\n\t\t\tlet rageMacro = game.macros.getName(rageMacroName);\r\n\t\t\t\t//check for name of macro in its \"off\" form\r\n\t\t\t\tif (rageMacro == null || rageMacro == undefined) {\r\n\t\t\t\t\trageMacro = game.macros.getName('Stop ' + rageMacroName);\r\n\t\t\t\t}\r\n\t\t\tlet obj = {};\r\n\t\t\tif ( (rageMacro !== null && rageMacro !== undefined) && toggleMacro == true && \r\n\t\t\t\t\t+ (stopRageIconPath !== null && stopRageIconPath !== undefined && stopRageIconPath !== '') ) {\r\n\t\t\t\tif (enabled) {\r\n\t\t\t\t  obj['img'] = rageIconPath;\r\n\t\t\t\t  obj['name'] = rageMacroName;\r\n\t\t\t\t} else {\r\n\t\t\t\t  obj['img'] = stopRageIconPath;\r\n\t\t\t\t  obj['name'] = 'Stop ' + rageMacroName;\r\n\t\t\t\t}\r\n\t\t\t\trageMacro.update(obj);\r\n\t\t\t} else {\r\n\t\t\tif (toggleMacro == true) ui.notifications.warn(`${rageMacroName} ${warnMacroNotFound}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else ui.notifications.warn(errorSelectToken);\r\n// write to chat if needed:\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n\t};\r\n\tChatMessage.create(chatData, {});\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/weapon_29.jpg","actorIds":[],"_id":"O680UGMXQ6iSvpVh"}
{"name":"War Priest","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/93.png","tooltip":"War Priest_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"War Priest\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/93.png","actorIds":[],"_id":"O8tahyepKY5CDHqE"}
{"name":"Wand of Pyrotechnics","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/staff-red.jpg","tooltip":"Wand of Pyrotechnics_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Wand of Pyrotechnics\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/staff-red.jpg","actorIds":[],"_id":"OGxS3gcRrqdcBAIG"}
{"name":"Eldritch Invocations: Devil’s Sight","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/devilsight.jpeg","tooltip":"Eldritch Invocations: Devil’s Sight_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Eldritch Invocations: Devil’s Sight\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/devilsight.jpeg","actorIds":[],"_id":"OHam9P6yHirHrfj3"}
{"name":"Get Token ID","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro      ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Display Name & IDs\r\nfor(let token of canvas.tokens.controlled)\r\n{\r\n    ChatMessage.create({\r\n        content : token.name + \" \" + token.id\r\n    });\r\n}\r\n\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/id-card.svg","actorIds":[],"_id":"OWLmHH89iELoi6El"}
{"name":"Mask of the Wild","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/double-face-mask.svg","tooltip":"Mask of the Wild_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Mask of the Wild\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/double-face-mask.svg","actorIds":[],"_id":"OgsJxPISSbz7wRG8"}
{"name":"Sanctuary","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-sky-2.jpg","tooltip":"Sanctuary_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Sanctuary\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-sky-2.jpg","actorIds":[],"_id":"OqC09q6SQ03ht3iq"}
{"name":"Share Image Via URL","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Share Image Via URL ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Share an image to all players when you have an image URL\r\n * Author: @Krishmero#1792\r\n */\r\n\r\nlet imagePopup = (imageUrl) => {\r\n\t// Display the image popout and share it.\r\n\tconst ip = new ImagePopout(imageUrl);\r\n\tip.render(true);\r\n\tip.shareImage();\r\n};\r\n\r\nlet chatDialog = (imageUrl) => {\r\n\tChatMessage.create({\r\n\t\tuser: game.user._id,\r\n\t\tcontent: `<img src=\"${imageUrl}\" />`,\r\n\t\ttype: CONST.CHAT_MESSAGE_TYPES.OOC\r\n\t});\r\n};\r\n\r\nlet selectOptions = game.user.isGM ? `\r\n<div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\r\n\t<label for=\"output-options\" style=\"margin-right: 10px\">Output Options:</label>\r\n\t<select id=\"output-options\" />\r\n\t\t<option value=\"popup\">Popup</option>\r\n\t\t<option value=\"chat\">Chat</option>\r\n\t\t<option value=\"both\">Both</option>\r\n\t</select>\r\n</div>\r\n<br />\r\n` : '';\r\n\r\nnew Dialog({\r\n\ttitle: `Share Image via URL`,\r\n\tcontent: `\r\n\t\t<form>\r\n\t\t\t${selectOptions}\r\n\t\t\t<div style=\"display: flex; width: 100%; margin-bottom: 10px\">\r\n\t\t\t\t<label for=\"image-url\" style=\"white-space: nowrap; margin-right: 10px; padding-top:4px\">Image URL:</label>\r\n\t\t\t\t<input type=\"text\" id=\"image-url\" name=\"image-url\" />\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t`,\r\n\tbuttons: {\r\n\t\tyes: {\r\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\r\n\t\t\tlabel: `Share`,\r\n\t\t\tcallback: (html) => {\r\n\t\t\t\tlet imageUrl = html.find('#image-url').val();\r\n\t\t\t\tlet permission = html.find('select#output-options')[0]?.value || null;\r\n\t\t\t\tif (!imageUrl) {\r\n\t\t\t\t\treturn ui.notifications.info(\"You did not provide a valid image.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (game.user.isGM && ['popup', 'both'].includes(permission)) {\r\n\t\t\t\t\timagePopup(imageUrl);\r\n\t\t\t\t}\r\n\t\t\t\tif (!game.user.isGM || ['chat', 'both'].includes(permission)) {\r\n\t\t\t\t\tchatDialog(imageUrl);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tno: {\r\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\r\n\t\t\tlabel: `Cancel`\r\n\t\t},\r\n\t},\r\n\tdefault: \"yes\"\r\n}).render(true)\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/radar-dish.svg","actorIds":[],"_id":"PAZuOdZ6IJu8ia05"}
{"name":"25 - T03 - X-ray Scan (xray)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"25 - T03 - X-ray Scan (xray)  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xray\",\r\n    filterId: \"myXrayScan\",\r\n    time: 0,\r\n    color: 0xFFFFFF,\r\n    blend: 5,\r\n    dimX: 20,\r\n    dimY: 20,\r\n    anchorX: 0.5,\r\n    anchorY: 0,\r\n    divisor: 8,\r\n    intensity: 1,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.00038, \r\n          animType: \"move\" \r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/25-t03-xrayscan.JPG","actorIds":[],"_id":"Plslt7jJQoAeAMIc"}
{"name":"Uncanny Dodge","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/armor_01.jpg","tooltip":"Uncanny Dodge_Billy ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Uncanny Dodge\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/armor_01.jpg","actorIds":[],"_id":"PtZjoP1VvOVzfhYr"}
{"name":"AA_ResetTraps","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let sw1 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_1\");\r\nlet sw2 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_2\");\r\nlet sw3 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_3\");\r\nlet sw4 = canvas.tokens.placeables.find((t) => t.name === \"Spider_Web_4\");\r\n\r\nsw1.update({ disposition: TOKEN_DISPOSITIONS.HOSTILE });\r\nsw2.update({ disposition: TOKEN_DISPOSITIONS.HOSTILE });\r\nsw3.update({ disposition: TOKEN_DISPOSITIONS.HOSTILE });\r\nsw4.update({ disposition: TOKEN_DISPOSITIONS.HOSTILE });","author":"s7gxOGja1p9WAX4j","img":"imports/icons/sword-mold.svg","actorIds":[],"_id":"Q1uMdu9PxJubl0aW"}
{"name":"Static: Toggle Token","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"markers":{"markers":{"C3RjWGm0h6qMIEpV":false,"ySzdUjDS69NMc7nO":false},"type":"Token"},"activeData":{"tooltip":"Static: Toggle Token ","icon":"icons/svg/ice-aura.svg","colour":"#00ffff","trigger":"","module":"macro-marker"}},"furnace":{"runAsGM":false}},"scope":"global","command":"/* Basic example to show toggling a macro for a specific token.\r\n * Important take-away: always check if `token` is set.\r\n *\r\n * Check out the marker tab for more information!\r\n */\r\n\r\nif (token)\r\n  MacroMarker.toggle(this, { entity: token });","author":"s7gxOGja1p9WAX4j","img":"icons/svg/aura.svg","actorIds":[],"_id":"QNTh3jcXyjfol6AL"}
{"name":"Comprehend Languages","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/runes-royal-1.jpg","tooltip":"Comprehend Languages_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Comprehend Languages\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/runes-royal-1.jpg","actorIds":[],"_id":"QSdgKzHtt6v8O7N1"}
{"name":"Sneak Attack","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeMacros":{"YvEweBmhD9GRvMYm":{"active":false}},"activeData":{"tooltip":"Sneak Attack ","icon":"imports/icons/icon27.png","module":"macro-marker","colour":"#ff0000","trigger":""},"markers":{"markers":{"YvEweBmhD9GRvMYm":false},"type":"Macro"}},"furnace":{"runAsGM":true},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let macro = this;\r\nMacroMarker.toggle(macro);\r\n\r\n//\t\tDISCLAIMER:\t\tThis macro is heavily based on the original D&D 5e Rage Macro masterwork written by Felix#6196.\r\n//\t\t\t\t\t\tNorc#5108 created and is maintaining this macro.\r\n//\r\n//\t\t\t\t\t\tUpdates:\t1.\t2020/06/05: Initial version.\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tBonus Tip: Sneak Attack as a Condition                                                                                                                       \r\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Sneaky\" with the same icon \t\t\t   \r\n//!!!\tas the optional sneak attack icon overlay, 'icons/svg/mystery-man-black.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE below.\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!   OPTIONAL TOKEN ICON-\tOn by default. If a path to a sneak attack icon is defined, it displays like a condition on the sneaking rogue.\r\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\r\n//!!!\r\nconst sneakIconPath = 'icons/svg/mystery-man-black.svg';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on whether the rogue is currently sneaking. \r\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY. \r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one rogue using this feature at a time.\r\n\r\n//To auto-toggle the macro's icon/name, override toggleMacro to true below.\r\nconst toggleMacro = false;\r\n\r\n//To use a different icon, manually change the filepath here\r\nconst stopSneakIconPath = 'icons/svg/cowled.svg';\r\n\r\n//You must update the following constant to this macro's exact name for the macro icon toggling to work.\r\nconst sneakMacroName = 'Sneak Attack';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nlet toggleResult = false;\r\nlet enabled = false;\r\nlet errorReason = '';\r\nlet sneakAttack = {};\r\nlet rogue = {};\r\nlet rogueLvls = 0;\r\nlet sneakDice = 0;\r\nlet chatMsg = '';\r\nlet oldMDmg = '';\r\nlet oldRDmg = '';\r\n\r\nlet macroActor = actor;\r\nlet macroToken = token;\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tBASIC LOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\tSets error messages as constants also for easier translation.\r\n\r\nconst rogueClassName = 'Rogue';\r\nconst sneakAttackFeatureName = 'Sneak Attack';\r\n\r\nconst errorSelectRogue = 'Please select a single rogue token.';\r\nconst warnMacroNotFound = ' is not a valid macro name, please fix. Sneak attack toggle successful but unable to alter macro.';\r\nconst errorSelectToken = 'Please select a token.';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n//check to ensure token is selected and attempt to define the sneak attack feature\r\nif (macroActor !== null && macroActor !== undefined) {\r\n    sneakAttack = macroActor.items.find(i => i.name == `${sneakAttackFeatureName}`);\r\n} else {\r\n    errorReason = `${errorSelectToken}`;\r\n}\r\n\r\n//check to ensure token is a rogue\r\nif (errorReason == '' && macroActor.items.find(i => i.name == `${rogueClassName}`) !== undefined) {\r\n    rogue = macroActor.items.find(i => i.name == `${rogueClassName}`);\r\n} else {\r\n    errorReason = `${errorSelectRogue}`;\r\n}\r\n\r\nconsole.log(`Error reason is: ${errorReason}`);\r\n//main execution now that errors are caught\r\n\r\nif (errorReason == '') {\r\n\r\n    chatMsg = '';\r\n    let enabled = false;\r\n    // store the state of the sneak attack toggle in flags\r\n    if (macroActor.data.flags.sneakMacro !== null && macroActor.data.flags.sneakMacro !== undefined) {\r\n        enabled = true;\r\n    }\r\n\r\n    // if sneak attack is active, disable it\r\n    if (enabled) {\r\n        chatMsg = `${macroActor.name} is no longer sneak attacking.`;\r\n        // ranged and melee weapon attack bonus\r\n        let obj = {};\r\n        obj['flags.sneakMacro'] = null;\r\n        obj['data.bonuses.mwak.damage'] = macroActor.data.flags.sneakMacro.oldMDmg;\r\n        obj['data.bonuses.rwak.damage'] = macroActor.data.flags.sneakMacro.oldRDmg;\r\n        macroActor.update(obj);\r\n\r\n        // if sneak attack is disabled, enable it\r\n    } else {\r\n        chatMsg = `${macroActor.name} starts sneak attacking!`;\r\n\r\n        let obj = {};\r\n        obj['flags.sneakMacro.enabled'] = true;\r\n\r\n        // Preserve old mwak damage bonus if there was one\r\n        let oldMDmg = macroActor.data.data.bonuses.mwak.damage;\r\n        if (oldMDmg == null || oldMDmg == undefined || oldMDmg == '') oldMDmg = 0;\r\n        obj['flags.sneakMacro.oldMDmg'] = JSON.parse(JSON.stringify(oldMDmg));\r\n\r\n        // Preserve old rwak damage bonus if there was one\r\n        let oldRDmg = macroActor.data.data.bonuses.rwak.damage;\r\n        if (oldRDmg == null || oldRDmg == undefined || oldRDmg == '') oldRDmg = 0;\r\n        obj['flags.sneakMacro.oldRDmg'] = JSON.parse(JSON.stringify(oldRDmg));\r\n\r\n\r\n        // Determining the rogue level\r\n        rogueLvls = rogue.data.data.levels;\r\n\r\n        // Formula to determine the sneak attack damage depending on rogue level\t\r\n        sneakDice = Math.ceil(rogueLvls / 2);\r\n\r\n        //actually add the bonus sneak attack damage to the previous bonus damage\r\n        //respect roll formulas if present.\r\n        if (oldMDmg == null || oldMDmg == undefined || oldMDmg == '' || oldMDmg == 0) {\r\n            obj['data.bonuses.mwak.damage'] = `${sneakDice}d6`;\r\n        } else {\r\n            obj['data.bonuses.mwak.damage'] = `${oldMDmg} + ${sneakDice}d6`;\r\n        }\r\n\r\n        if (oldRDmg == null || oldRDmg == undefined || oldRDmg == '' || oldRDmg == 0) {\r\n            obj['data.bonuses.rwak.damage'] = `${sneakDice}d6`;\r\n        } else {\r\n            obj['data.bonuses.rwak.damage'] = `${oldRDmg} + ${sneakDice}d6`;\r\n        }\r\n\r\n        macroActor.update(obj);\r\n\r\n    }\r\n\r\n    //mark or unmark character's token with Sneaky effect icon, if sneakIconPath is defined\r\n    (async () => {\r\n        toggleResult = await macroToken.toggleEffect(sneakIconPath);\r\n        if (toggleResult == enabled) macroToken.toggleEffect(sneakIconPath);\r\n    })();\r\n\r\n    //toggle macro icon and name, if enabled\r\n    if (toggleMacro) {\r\n        //\t\tNorc's preferred icons, not sure if publicly available\r\n        //\t\tsneakyMacroImgPath = 'systems/dnd5e/icons/skills/shadow_17.jpg';\r\n        //\t\tstopSneakIconPath = 'systems/dnd5e/icons/skills/yellow_11.jpg';\r\n        let sneakMacro = game.macros.getName(sneakMacroName);\r\n        //Also check for name of macro in its \"off\" form\r\n        if (sneakMacro == null || sneakMacro == undefined) {\r\n            sneakMacro = game.macros.getName('Stop ' + sneakMacroName);\r\n        }\r\n        let obj = {};\r\n        if ((sneakMacro !== null && sneakMacro !== undefined) &&\r\n            +(stopSneakIconPath !== null && stopSneakIconPath !== undefined && stopSneakIconPath !== '')) {\r\n            if (enabled) {\r\n                obj['img'] = sneakIconPath;\r\n                obj['name'] = sneakMacroName;\r\n            } else {\r\n                obj['img'] = stopSneakIconPath;\r\n                obj['name'] = 'Stop ' + sneakMacroName;\r\n            }\r\n            sneakMacro.update(obj);\r\n        } else {\r\n            ui.notifications.warn(`${sneakMacroName} ${warnMacroNotFound}`);\r\n        }\r\n    }\r\n\r\n} else {\r\n    ui.notifications.error(`${errorReason}`);\r\n}\r\nif (chatMsg !== '') {\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: chatMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/hooded-assassin.svg","actorIds":[],"_id":"QY7qeYsnLBVDhJDU"}
{"name":"Action Surge","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/red_01.jpg","tooltip":"Action Surge_Bramdahr ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Action Surge\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/red_01.jpg","actorIds":[],"_id":"QaVOgZB3MhtV6osi"}
{"name":"Staff of Defense > Mage Armor (Staff of Defense)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"MagicItems.roll(\"Staff of Defense\",\"Mage Armor (Staff of Defense)\");","author":"s7gxOGja1p9WAX4j","img":"/systems/dnd5e/icons/spells/protect-blue-1.jpg","actorIds":[],"_id":"QiM89OFBvTFHZXU6"}
{"name":"createToken","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"createToken  ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let targetScene = game.scenes.get(args[0])\r\nif (!targetScene || !args[3]) return;\r\nawait targetScene.createEmbeddedEntity('Token', mergeObject(duplicate(args[3]), { \"x\": args[1] || 0, \"y\": args[2] || 0}, { overwrite: true, inplace: true }));","author":"s7gxOGja1p9WAX4j","img":"imports/icons/chess-pawn.svg","actorIds":[],"_id":"QpxyJFt2Mi0UKpKj"}
{"name":"20 - Waves","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"20 - Waves    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Below, you can turn on the anchor animation.\r\nlet params =\r\n[{\r\n    filterType: \"wave\",\r\n    filterId: \"myWaves\",\r\n    time: 0,\r\n    anchorX: 0.5,\r\n    anchorY: 0.5,\r\n    strength: 0.015,\r\n    frequency: 120,\r\n    color: 0xFFFFFF,\r\n    maxIntensity: 2.5,\r\n    minIntensity: 0.9,\r\n    padding:10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0085, \r\n        animType: \"move\" \r\n      },\r\n      anchorX :\r\n      {\r\n        active: false,\r\n        val1: 0.15,\r\n        val2: 0.85,\r\n        animType: \"syncChaoticOscillation\",\r\n        loopDuration: 20000\r\n      },\r\n      anchorY :\r\n      {\r\n        active: false,\r\n        val1: 0.15,\r\n        val2: 0.85,\r\n        animType: \"syncSinOscillation\",\r\n        loopDuration: 20000\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/20-waves.JPG","actorIds":[],"_id":"Qu78I7PiLSdAXw5P"}
{"name":"Continual Flame","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/explosion-orange-2.jpg","tooltip":"Continual Flame_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Continual Flame\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/explosion-orange-2.jpg","actorIds":[],"_id":"RA6ruQAMshMpni0U"}
{"name":"Wild Magic Surge","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20.svg","tooltip":"Wilderness Encounter Day (Copy)      ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// This macro is wild... wild magic that is.\r\n// Sorcerer Wild Magic table.\r\n//\r\n// Starting when you choose this origin at 1st level, your spellcasting can unleash surges \r\n// of untamed magic. Once per turn, the DM can have you roll a d20 immediately after you \r\n// cast a sorcerer spell of 1st level or higher. If you roll a 1, roll on the Wild Magic \r\n// Surge table to create a magical effect. If that effect is a spell, it is too wild to be \r\n// affected by your Metamagic, and if it normally requires concentration, it doesn’t \r\n// require concentration in this case; the spell lasts for its full duration. - PHB. Pg. 103\r\nlet msgContent = 'Wild Magic Surge Roll: ';\r\nlet result = '';\r\n\r\n// Roll to Check For Wild Magic\r\nresult = new Roll(`1d20`).roll().total;\r\n\r\n// Create the message\r\nif(result !== '') {\r\n\tlet chatData = {\r\n\t\tsound: CONFIG.sounds.dice,\r\n\t\tcontent: msgContent + result,\r\n\t\twhisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n\t}\r\n\tChatMessage.create(chatData, {});\r\n}\r\n\r\nif (result <= 4) {\r\n\tconst table = game.tables.entities.find(t => t.name === \"Sorcerer Wild Magic Surge\");\r\n\ttable.draw({}, {rollMode: \"selfroll\"});\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/dissonantwhispers.jpg","actorIds":[],"_id":"RKZFUJkEibDJvVM2"}
{"name":"Sorcery Points","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Sorcery Points_Bruës  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Sorcery Points\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/fire_08.jpg","actorIds":[],"_id":"RNsLHXAGnhAQ8911"}
{"name":"Sleep","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/light-magenta-1.jpg","tooltip":"Sleep_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Sleep\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/light-magenta-1.jpg","actorIds":[],"_id":"RZ1A7Y4q9bh6USH5"}
{"name":"Delete All Templates","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Delete All Templates ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Deletes all templates on the current scene\r\n */\r\n \r\n// no dialog. Just delete all templates.\r\ncanvas.templates.deleteMany(canvas.templates.placeables.map(o =>o.id),{});\r\n\r\n// Get a dialog confirmation before deleting all templates on the scene:\r\n// canvas.templates.deleteAll()\r\n","author":"s7gxOGja1p9WAX4j","img":"icons/svg/explosion.svg","actorIds":[],"_id":"Rw7LH6K4CwHfAg1Z"}
{"_id":"SJv0Y7LKFkpLcYgB","name":"Inspiring Leadership","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Inspiring Leadership ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let log =(...args) => console.log(\"Inspiring Leadership | \", ...args);\r\n(async () => {\r\n    //error checking\r\n    log(\"Starting Macro\");\r\n    if(game.user.character === null) return ui.notifications.warn(`You do not have a character.`);\r\n    if(game.user.targets.size <= 0 || game.user.targets.size >= 7) return ui.notifications.warn(`Target between 1 and 6 tokens.`);    \r\n    if(game.user.character.items.find(i=>i.name===\"Inspiring Leader\") === null) return ui.notifications.warn (`You do not have Inspiring Leadership.`);\r\n    if(game.macros.find(i=>i.name===\"Call_New\") === null) return ui.notifications.warn(`Call Macro Uninstalled`);\r\n    if(!game.modules.get(\"furnace\").active) return ui.notifications.warn(`The Furnace is not installed/enabled.`);\r\n    //variable calls\r\n    let targets = game.user.targets;\r\n    let myActor = game.user.character;\r\n    let callMacro = game.macros.find(i=>i.name===\"Call_New\");\r\n    let tempHP = myActor.data.data.abilities.cha.mod + myActor.data.data.details.level;\r\n    let tempActorUpdate = { newData : { data : { attributes :{ hp :{ temp : tempHP }, }, }, }, };\r\n    game.dnd5e.rollItemMacro(\"Inspiring Leader\").then(() => {\r\n        for(let token of targets)\r\n        {\r\n            if(token.actor.data.data.attributes.hp.temp <= tempHP)\r\n            {\r\n                callMacro.execute(token.actor,\"\",\"\",tempActorUpdate);\r\n            }\r\n        }\r\n    });\r\n})();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/active11.png","actorIds":[]}
{"name":"Claws","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/red_31.jpg","tooltip":"Claws_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Claws\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/red_31.jpg","actorIds":[],"_id":"Sacc0ijxJXDe8WFY"}
{"name":"End Turn","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"End Turn                 ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// My players requested a macro to end their turn\r\n// Who is done? You are done! - Droop\r\n// Written by Jon Whitehouse [MTGCarver#7753]\r\nmain()\r\n\r\nasync function main() {\r\n    let charName = game.user.charname;\r\n\r\n    // Is combat active??\r\n    if (!game.combats.active) {\r\n        ui.notifications.error(`Hey ${charName}!!! Knock Knock... Nope... No combat!`);\r\n        return;\r\n    }\r\n    \r\n    let curCombatChar = game.combat.combatant.name;\r\n\r\n    // Is the current turn the same as the player? If not return\r\n    if (curCombatChar != charName) {\r\n        ui.notifications.error(`Woah there ${charName}!!! It's not your turn. Patience!`);\r\n        return;\r\n    }\r\n\r\n    // Time to end turn and send message to chatlog\r\n    let msgContent = \"<h2>End of Turn for \" + charName + \"</h2>\"\r\n\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: msgContent,\r\n      };\r\n    ChatMessage.create(chatData, {});\r\n    console.log(`Ending Turn for ${curCombatChar}`);\r\n    game.combat.nextTurn();\r\n\r\n    // Future Use to announce who is up next\r\n    // game.combat.turns[game.combat.turn +1]\r\n    // probably need to handle case where you are already on last combatant \r\n    // for the round though, in which case select game.combat.turns[0]\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/check-mark.svg","actorIds":[],"_id":"ShWD7E5lbWwuKv6c"}
{"name":"roll-skill","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"roll-skill  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and the LMRTFY module, v0.7+\r\n * This will request a skill check for the currently selected player using LMRTFY roll request dialog\r\n * Takes the skill as its first argument, or if not set, requests all\r\n * Example: /roll-skill \"prc\"\r\n */\r\n\r\nconst skill = args[0] || Object.keys(CONFIG.DND5E.skills);\r\nif (!actor) return;\r\nLMRTFYRoller.requestSkillChecks(actor, skill);","author":"s7gxOGja1p9WAX4j","img":"icons/svg/d20.svg","actorIds":[],"_id":"SsEmYrIlLTBqA5Cr"}
{"name":"Shortbow","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/bow-short.jpg","tooltip":"Shortbow_Billy ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Shortbow\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/bow-short.jpg","actorIds":[],"_id":"SuTWe99smrTZ0gd4"}
{"name":"Trinkets","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Table       ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"const table = game.tables.getName(\"Trinkets Table\");\r\ngame.betterTables.betterTableRoll(table);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/emerald-necklace.svg","actorIds":[],"_id":"T2qxEhq1A8M3d3o5"}
{"name":"Growl","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/growl.jpg","tooltip":"Growl_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Growl\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/growl.jpg","actorIds":[],"_id":"TK3QQxmXXIz5yX6K"}
{"name":"Longbow","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/bow-long.jpg","tooltip":"Longbow_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Longbow\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/bow-long.jpg","actorIds":[],"_id":"TOKEAcAWCjd93Txx"}
{"name":"Bestow Curse","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/haste-fire-2.jpg","tooltip":"Bestow Curse_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Bestow Curse\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/haste-fire-2.jpg","actorIds":[],"_id":"TOsyV6K54yk5E7Bi"}
{"_id":"TWpjVQcM2RZrAh3X","name":"Droops Resolve","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-black.svg","tooltip":"Wilderness Encounter Night (Copy)       ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// How does Droop Feel?\r\n// Setting Variables\r\nlet msgContent = 'Droop thinks about what to do.\\nThe Roll was ';\r\nlet DroopScared = 'Droop becomes frightened and passes out!';\r\nlet result = '';\r\n\r\n// Roll to Check For Wandering Monster\r\nresult = new Roll(`1d20`).roll().total;\r\n\r\n// Create the message\r\nif(result !== '') {\r\n\tlet chatData = {\r\n\t\tsound: CONFIG.sounds.dice,\r\n\t\tcontent: msgContent + result,\r\n\t\twhisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n\t}\r\n\tChatMessage.create(chatData, {});\r\n}\r\n\r\n// Drop the result amount as Droop gains resolve.\r\nif (result >= 10) {\r\n    const table = game.tables.getName(\"Droops Resolve\");\r\n    game.betterTables.betterTableRoll(table);\r\n}\r\nelse if(result <= 10) {\r\n\tlet chatData = {\r\n\t\tsound: CONFIG.sounds.dice,\r\n\t\tcontent: DroopScared,\r\n\t\twhisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n\t}\r\n\tChatMessage.create(chatData, {});\r\n}\r\n\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/portraits/NPCs/Droop.jpeg","actorIds":[]}
{"_id":"Tj3i1X4ztoiPckoF","name":"Create_Token_Macro","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//args[0] = actor name\r\n//args[1] = token data update object\r\n\r\n(async()=>{\r\n  let token_data = game.actors.getName(args[0]).data.token;\r\n  await canvas.tokens.createMany(token_data, {});\r\n  let token = canvas.tokens.placeables.find(i=>i.name===args[0]);\r\n  await token.update(args[1]);\r\n})();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/button-finger.svg","actorIds":[]}
{"name":"24 - T05 - Mega Chroma Shell (on top)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T05 - Mega Chroma Shell (on top)   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myEarthFieldTop\",\r\n    shieldType: 5,\r\n    gridPadding: 3,\r\n    color: 0xAAAAAA,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 1.9,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    zIndex: 5,\r\n    chromatic: true,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/megachromashell.png","actorIds":[],"_id":"U3eXNhufFBJZSCNU"}
{"name":"False Life","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro            ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"if (token) {\r\n    let increment = (args[1]-1)*5\r\n    let formula = `1d4 + 1`;\r\n    let amount = new Roll(formula).roll().total;\r\nChatMessage.create({content: \" False life healing healing is \" + amount + \"+ \" + increment })\r\n    let total= amount + increment\r\n    //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\r\n    token.actor.update({\"data.attributes.hp.temp\": total}) \r\n} else {\r\n    ui.notifications.notify(\"Please select a token.\");\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/heal-royal-1.jpg","actorIds":[],"_id":"U9BjmTYxYFhKTBzq"}
{"name":"Purify Food and Drink","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/light-jade-1.jpg","tooltip":"Purify Food and Drink_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Purify Food and Drink\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/light-jade-1.jpg","actorIds":[],"_id":"UbrKmOSST6jr5JlM"}
{"name":"Hit Die","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Hit Die  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Requires furnace to work correctly.\r\n// args[0] === name of character\r\n// args[1] === \"add\",\"sub\", or \"use\" \r\n//\t\t\"add\" : adds 1 hit die if able to\r\n//\t\t\"sub\" : removes 1 hit die if able to\r\n//\t\t\"use\" : removes 1 hit die and heals actor for rolled amount\r\n\r\n(async () => {\r\n\tconst actor = game.actors.find(i => i.name === args[0]); \r\n    if (!actor) return ui.notifications.warn(`No Actor by that name available.`);\r\n    const classItems = actor.data.items.filter(it => it.type === \"class\")\r\n    if (!classItems.length) return ui.notifications.warn(`Actor has no class!`);\r\n    if (classItems.length > 1) return ui.notifications.warn(`Actor has multiple classes! This is not (yet) supported.`);\r\n    const classItem = classItems[0];\r\n\t\r\n\tif(args[1] === \"add\")\r\n\t{\r\n\t\tif (classItem.data.hitDiceUsed <= 0) return ui.notifications.warn(`You are at maximum Hitdie!`);\r\n\r\n\t\tconst classItemUpdate = {\r\n\t\t\t_id: classItem._id,\r\n\t\t\tdata: {\r\n\t\t\t\thitDiceUsed: classItem.data.hitDiceUsed - 1,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tawait actor.updateEmbeddedEntity(\"OwnedItem\", classItemUpdate);\r\n\t}\r\n\t\r\n\tif(args[1] === \"sub\")\r\n\t{\r\n\t\tif (classItem.data.hitDiceUsed >= classItem.data.levels) return ui.notifications.warn(`You have no remaining hit dice to spend!`);\r\n\r\n\t\tconst classItemUpdate = {\r\n\t\t\t_id: classItem._id,\r\n\t\t\tdata: {\r\n\t\t\t\thitDiceUsed: classItem.data.hitDiceUsed + 1,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\tawait actor.updateEmbeddedEntity(\"OwnedItem\", classItemUpdate);\r\n\t}\r\n\t\r\n\tif(args[1] === \"use\")\r\n\t{\r\n\t\tif (classItem.data.hitDiceUsed >= classItem.data.levels) return ui.notifications.warn(`You have no remaining hit dice to spend!`);\t\t\r\n\t\tconst classItemUpdate = {\r\n\t\t\t_id: classItem._id,\r\n\t\t\tdata: {\r\n\t\t\t\thitDiceUsed: classItem.data.hitDiceUsed + 1,\r\n\t\t\t},\r\n\t\t};\r\n\t\tawait actor.updateEmbeddedEntity(\"OwnedItem\", classItemUpdate);\r\n\t\t\r\n\t\tconst hitDieRoll = new Roll(`1${classItem.data.hitDice} + ${actor.data.data.abilities.con.mod}`);\r\n\t\thitDieRoll.roll();\r\n\t\thitDieRoll.toMessage({\r\n\t\t\tuser : game.user._id,\r\n\t\t\tspeaker : speaker,\r\n\t\t\tflavor : \"Roll Hit Dice\"\r\n\t\t});\r\n\t\t\r\n\t\tconst actorUpdate = {\r\n\t\t\tdata: {\r\n\t\t\t\tattributes: {\r\n\t\t\t\t\thp: {\r\n\t\t\t\t\t\tvalue: Math.clamped(\r\n\t\t\t\t\t\t\tactor.data.data.attributes.hp.value + hitDieRoll.total,\r\n\t\t\t\t\t\t\tactor.data.data.attributes.hp.min,\r\n\t\t\t\t\t\t\tactor.data.data.attributes.hp.max\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t\tawait actor.update(actorUpdate);\r\n\t}    \r\n})();\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/heart-bottle.svg","actorIds":[],"_id":"Uf8242PlrNsVEYoR"}
{"name":"Tile Toggle Locked Status","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Tile Toggle Locked Status ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//Simple macro to loop through ALL SELECTED TILES and toggle their locked status.\r\n//In other words:\r\n    //If an individual tile is unlocked, this macro will lock it.\r\n    //If an individual tile is locked, this macro will unlock it.\r\n//Bonus function to lock or unlock all tiles instead also included.\r\n\r\n//Questions? Ask in Foundry VTT Discord #macro-polo channel. If absolutely needed, ping @Norc$5108\r\n\r\nasync function toggleTileLock(tile) {\r\n    await tile.update({locked: !tile.data.locked});\r\n    }\r\n\r\nasync function setTileLock(tile, trueOrFalse) {\r\n    await tile.update({locked: trueOrFalse});\r\n}\r\n\r\n//check to make sure at least one tile is selected\r\nif (canvas.tiles.controlled[0]) {\r\n    //loop through all selected tiles\r\n    for (let t of canvas.tiles.controlled) {\r\n        await toggleTileLock(t);\r\n        //lock all tiles instead\r\n        //await setTileLock(t,true);\r\n        //unlock all tiles instead\r\n        //await setTileLock(t,false); \r\n    }\r\n} else {\r\n    ui.notifications.notify(\"Please select at least one tile.\");\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/key-lock.svg","actorIds":[],"_id":"UfVvYQv2RNUpPBKt"}
{"name":"25 - T01 - Sunburst Rays (xray)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"25 - T01 - Sunburst Rays (xray)   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"xray\",\r\n    filterId: \"mySunburstRays\",\r\n    time: 0,\r\n    color: 0xFFBB00,\r\n    blend: 9,\r\n    dimX: 1,\r\n    dimY: 1,\r\n    anchorX: 0,\r\n    anchorY: 0,\r\n    divisor: 36,\r\n    intensity: 4,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0012, \r\n          animType: \"move\" \r\n       },\r\n       anchorX:\r\n       {\r\n          animType: \"syncCosOscillation\",\r\n          loopDuration : 6000,\r\n          val1: 0.40,\r\n          val2: 0.60\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/25-t01-sunburstrays.JPG","actorIds":[],"_id":"Uiq8FsetuEQJ3ajZ"}
{"name":"BlindDeaf","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"BlindDeaf ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nif (args[0] === \"on\") {\r\n    new Dialog({\r\n        title: \"Choose an Effect\",\r\n        buttons: {\r\n            one: {\r\n                label: \"Blindness\",\r\n                callback: () => {\r\n                    game.macros.getName(\"CUB condition control\").execute(\"Blinded\", args[1], 1 )\r\n                }\r\n            },\r\n            two: {\r\n                label: \"Deafness\",\r\n                callback: () => {\r\n                    game.macros.getName(\"CUB condition control\").execute(\"Deafened\", args[1], 1 )\r\n                }\r\n            }\r\n        },\r\n    }).render(true);\r\n} else {\r\n    if (target.getFlag('world', 'DE Blinded')) {\r\n        game.macros.getName(\"CUB condition control\").execute(\"Blinded\", args[1], 2 )\r\n    } else if (target.getFlag('world', 'DE Deafened')) {\r\n        game.macros.getName(\"CUB condition control\").execute(\"Deafened\", args[1], 2 )\r\n    }\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/evil-eye-red-2.jpg","actorIds":[],"_id":"V2DcqTFBIZCHWfB9"}
{"name":"Channel Divinity Paladin","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/yellow_38.jpg","tooltip":"Channel Divinity_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Channel Divinity\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/yellow_38.jpg","actorIds":[],"_id":"V8GZbchVTX8V5Ith"}
{"name":"AA_SpiderWeb","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"AA_SpiderWeb ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"function _dexCheck(dex) {\r\n  if (dex > 14) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction _strCheck(str) {\r\n  if (str > 10) {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction _triggerTrap() {\r\n  spidertable.draw({ rollMode: \"gmroll\" });\r\n  spidertable.draw({ rollMode: \"gmroll\" });\r\n  spidertable.draw({ rollMode: \"gmroll\" });\r\n}\r\n\r\nlet victomactorid = args[0];\r\n\r\nlet victomactor = game.actors.entities.find((a) => a.id === args[0]);\r\n\r\nlet traptoken = canvas.tokens.placeables.find((t) => t.name === args[1]);\r\n\r\nif (!victomactor) {\r\n  ui.notifications.error(\"No actor has been passed to AA_SpiderWeb.\");\r\n  return;\r\n}\r\n\r\nlet victomactorname = victomactor.name;\r\n\r\nlet victomtoken = canvas.tokens.placeables.find(\r\n  (t) => t.name === victomactorname\r\n);\r\n\r\nif (!victomtoken) {\r\n  ui.notifications.error(\"No token was found for the actor.\");\r\n  return;\r\n}\r\n\r\nconst triggermessage =\r\n  \"AA_SpiderWeb trap has been been activated by \" + victomactorname + \".\";\r\n\r\nconsole.log(\"++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\nconsole.log(triggermessage, ...args);\r\nconsole.log(\"++++++++++++++++++++++++++++++++++++++++++++++++++\");\r\n\r\nlet dexdiceroll = new Roll(\r\n  \"1d20 + @attributes.dex.mod\",\r\n  victomactor.getRollData()\r\n).roll();\r\n\r\nlet strdiceroll = new Roll(\r\n  \"1d20 + @attributes.str.mod\",\r\n  victomactor.getRollData()\r\n).roll();\r\n\r\nconst spidertable = game.tables.entities.find((t) => t.name === \"Spiders\");\r\n\r\nif (_dexCheck(dexdiceroll.total)) {\r\n  var message =\r\n    victomactorname + \" gracefully weaves their way through the spider webs.\";\r\n}\r\n\r\nif (!_dexCheck(dexdiceroll.total) && _strCheck(strdiceroll.total)) {\r\n  var message =\r\n    victomactorname + \" clumsily forces their way through the spider webs.\";\r\n  _triggerTrap();\r\n  traptoken.update({ disposition: TOKEN_DISPOSITIONS.FRIENDLY });\r\n  game.togglePause(true, true);\r\n}\r\n\r\nif (!_dexCheck(dexdiceroll.total) && !_strCheck(strdiceroll.total)) {\r\n  var message =\r\n    victomactorname +\r\n    \" tries to force their way through the spider webs but has become stuck.\";\r\n  _triggerTrap();\r\n  traptoken.update({ disposition: TOKEN_DISPOSITIONS.FRIENDLY });\r\n  game.cub.applyCondition(\"Restrained\", victomtoken);\r\n  game.togglePause(true, true);\r\n}\r\n\r\nChatMessage.create({\r\n  user: game.user._id,\r\n  content: message,\r\n  speak: ChatMessage.getSpeaker(),\r\n});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/web-spit.svg","actorIds":[],"_id":"VHYsMHGIuQwacs3U"}
{"name":"Tile XY Adjust","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Tile XY Adjust ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//Simple macro to loop through ALL SELECTED TILES and adjust their position by a set amount\r\n\r\n//Questions? Ask in Foundry VTT Discord #macro-polo channel. If absolutely needed, ping @Norc$5108\r\n\r\nasync function adjustTileXY(tile, xAdjust, yAdjust ) {\r\n    await tile.update({\r\n        x: tile.x + xAdjust,\r\n        y: tile.y + yAdjust,\r\n    });\r\n}\r\n\r\n//check to make sure at least one tile is selected\r\nif (canvas.tiles.controlled[0]) {\r\n    //loop through all selected tiles\r\n    for (let t of canvas.tiles.controlled) {\r\n        //REPLACE THE \"1\" VALUES BELOW AS NEEDED\r\n            //The first number controls side-to-side position:\r\n                //Positive values move tiles to the right\r\n                //Negative values move tiles to the left\r\n                //If you enter 0, tiles will not move side to side at all.\r\n            //The second number controls up-and-down position:\r\n                //Positive values move tiles down\r\n                //Negative values move tiles up\r\n                //If you enter 0, tiles will not move up or down at all.\r\n        adjustTileXY(t, 1, 1);\r\n    }\r\n} else {\r\n    ui.notifications.notify(\"Please select at least one tile.\");\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/direction-sign.svg","actorIds":[],"_id":"VgZoDjOR3CQH1Qxu"}
{"name":"FridayNoms","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"imports/icons/click.svg","tooltip":"Friday Nominations   ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"/p Who do you nominate for tonight's best roleplay?\r\nBilly Foxtrot (Teddy)\r\nBramdahr (Edward)\r\nBrues Madtil (Aaron)\r\nSethrael \"Tailor\" Copperkind (Jon)\r\nTeferi of Zhalfir (Joe)","author":"s7gxOGja1p9WAX4j","img":"imports/icons/click.svg","actorIds":[],"_id":"VpgHKaxWYyOhdiHN"}
{"name":"24 - T09 - Water Defense","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T09 - Water Defense  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myWaterField\",\r\n    shieldType: 9,\r\n    gridPadding: 1.2,\r\n    color: 0x20BBEE,\r\n    time: 0,\r\n    blend: 4,\r\n    intensity: 1,\r\n    lightAlpha: 0.7,\r\n    lightSize: 0.5,\r\n    scale: 0.6,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/24-t09-waterdefense.JPG","actorIds":[],"_id":"Vwre6JBV7fmm3gRg"}
{"_id":"W0CrTmN4tm55vnjz","name":"Import from Compendium","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Import from Compendium  ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/** \r\n * Import all the actors from a compendium.\r\n * In order to find the packName, you can use the following in your console (F12): game.packs.map(p => p.collection);\r\n * Author: KrishMero#1702\r\n */\r\n \r\nlet packOptions = game.packs.map(pack => `<option value=\"${pack.collection}\">${pack.title}</option>`);\r\nconst form = `\r\n  <div style=\"display: inline-block; width: 100px\">Folder:</div>\r\n  <input type=\"string\" id=\"folderName\">\r\n  <br />\r\n  <div style=\"font-size: 80%\">leave blank to put into root directory</div>\r\n  <br />\r\n\r\n  <div style=\"display: inline-block; width: 100px\">Compendium:</div>\r\n  <select id=\"destinationPack\" />\r\n    ${packOptions}\r\n  </select>\r\n  <br />\r\n\r\n  <label>\r\n    <input type=\"checkbox\" id=\"delete\"/>\r\n    Clear destination first\r\n  </label>\r\n`;\r\n\r\nconst dialog = new Dialog({\r\n  title: \"Import data from compendium\",\r\n  content: form,\r\n  buttons: {\r\n    use: {\r\n      label: \"Apply\",\r\n      callback: importCompendium\r\n    }\r\n  }\r\n}).render(true);\r\n\r\nfunction importCompendium(html) {\r\n  const folderName = html.find(`input#folderName`)[0].value;\r\n  const packName = html.find(`select#destinationPack`)[0].value;\r\n  const remove = html.find(`input#delete`)[0].checked;\r\n\r\n  let pack = game.packs.get(packName);\r\n  let folder = game.folders.find(f => f.name === folderName && f.type === pack.entity)?.id;\r\n  let type = getEntityType(pack);\r\n  let extra = folder ? { folder } : null\r\n\r\n  if (folderName && !folder) {\r\n    return ui.notifications.error(`Your world does not have any ${type} folders named '${folderName}'.`);\r\n  }\r\n\r\n  if (remove) removeDataFirst(type, folder);\r\n  pack.getIndex().then(index => index.forEach(entry => game[type].importFromCollection(packName, entry._id, extra)));\r\n}\r\n    \r\nfunction getEntityType(pack) {\r\n  const entity = pack.metadata.entity;\r\n  switch (entity) {\r\n    case 'JournalEntry': return 'journal';\r\n    case 'RollTable': return 'tables';\r\n    default: return entity.toLowerCase() + 's';\r\n  }\r\n}\r\n\r\nfunction removeDataFirst(type, folder) {\r\n  let removableData = game[type].filter(t => t.data.folder === folder);\r\n  if (typeof removableData.delete !== \"undefined\") {\r\n    removableData.delete();\r\n  } else {\r\n    removableData.map(d => d.delete());\r\n  }\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/box-unpacking.svg","actorIds":[]}
{"name":"Resolve Surprise","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Resolve Surprise  ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Resolve who is surprised between groups of players and enemies or individual players and enemies\r\n// This macro requires The Furnance module with \"Advanced Macros\" turned on.\r\n// ReadMe: https://gitlab.com/x.technocat/foundry-macros/-/blob/e67f9441b2d6d442258db1d51aa2be3ead97569d/surprise-macros/README.md\r\n\r\n// Get player character tokens\r\nconst playerActors = getPlayerActors();\r\n\r\n// Get hostile tokens\r\nconst enemyActors = getEnemyActors();\r\n\r\nlet warnMsg = \"\";\r\n\r\n// Main function\r\nconst isSuccessful = checkSurprise(playerActors, enemyActors);\r\n\r\nif (!isSuccessful) {\r\n  return ui.notifications.warn(warnMsg);\r\n}\r\n\r\nfunction checkSurprise(playerActors, enemyActors) {\r\n  if (!game.user.isGM) {\r\n    warnMsg = \"You do not have permission to run this macro.\";\r\n    return false;\r\n  }\r\n  if (!playerActors.length > 0) {\r\n    warnMsg =\r\n      \"Could not find player characters in the scene. Please add player characters to the scene.\";\r\n    return false;\r\n  }\r\n  if (!enemyActors.length > 0) {\r\n    warnMsg =\r\n      \"Could not find hostile tokens. You need tokens with hostile dispositions in the scene to check for Surprise!\";\r\n    return false;\r\n  }\r\n\r\n  // Displays a popup and handles the input. Thanks to PaperPunk for this.\r\n  let calculateSurprise = false;\r\n\r\n  new Dialog({\r\n    title: `What Group is Sneaking?`,\r\n    content: `\r\n    <form>\r\n      <div>\r\n        <label>Select which group is sneaking/ambushing:</label><br><br>\r\n        <div style=\"margin:auto; width: 50%;\">\r\n        <input type=\"radio\" name=\"sneaking-group\" id=\"enemies\" value=\"enemies\" checked=\"checked\">\r\n        <label for=\"enemies\"><b>Enemy</b> is sneaking</label><br>\r\n        <input type=\"radio\" name=\"sneaking-group\" id=\"party\" value=\"party\">\r\n        <label for=\"party\"><b>Party</b> is sneaking</label><br>\r\n        </div>\r\n        <br>\r\n      </div>\r\n    </form>\r\n    `,\r\n    buttons: {\r\n      yes: {\r\n        icon: \"<i class='fas fa-check'></i>\",\r\n        label: `Calculate Surprise`,\r\n        callback: () => (calculateSurprise = true), //if \"yes\" is selected, apply the selection.\r\n      },\r\n      no: {\r\n        icon: \"<i class='fas fa-times'></i>\",\r\n        label: `Cancel Surprise`,\r\n      },\r\n    },\r\n    // Defaulting to yes, so that when someone selects something and hits enter, it doesn't cancel:\r\n    default: \"yes\",\r\n\r\n    // Handle the input\r\n    close: (html) => {\r\n      if (calculateSurprise) {\r\n        // Determine which group is sneaking based on the user's selection\r\n        const sneakyOptions = html.find('[name=\"sneaking-group\"]'); \r\n        let sneakingGroup;\r\n        for (const option of sneakyOptions) {\r\n          if(option.checked) {\r\n            sneakingGroup = option.value;\r\n            break;\r\n          }\r\n        }      \r\n\r\n        let results = ``;\r\n        let lowestStealthCheck = 0;\r\n\r\n        switch (sneakingGroup) {\r\n          case \"enemies\":\r\n            lowestStealthCheck = rollStealth(enemyActors);\r\n            results = calculateSurpriseResults(\r\n              lowestStealthCheck,\r\n              playerActors\r\n            );\r\n            break;\r\n\r\n          case \"party\":\r\n            lowestStealthCheck = rollStealth(playerActors);\r\n            results = calculateSurpriseResults(\r\n              lowestStealthCheck, \r\n              enemyActors);\r\n            break;\r\n        }\r\n\r\n        handleChatMessage(results, lowestStealthCheck);\r\n      }\r\n    },\r\n  }).render(true); // display pop up window\r\n\r\n  return true; // no issues and we're done here!\r\n}\r\n\r\nfunction handleChatMessage(results, lowestStealth) {\r\n  let messageContent = ``;\r\n  messageContent += `<b>Lowest Stealth: </b> [[${lowestStealth}]] <br><br>`;\r\n  messageContent += results;\r\n\r\n  const surpriseRules =\r\n    \"<br><b>Surprise Rules</b><br>\" +\r\n    \"Compare the Dexterity (Stealth) checks of anyone hiding with the passive Wisdom (Perception) score of each creature on the opposing side. Any character or monster that doesn't notice <i><b>a</b></i> threat is surprised at the start of the encounter. <br><br>\" +\r\n    \"If you're surprised, you can't move or take an action on your first turn of the combat, and you can't take a reaction until that turn ends. A member of a group can be surprised even if the other members aren't.<br><br> <i>PHB. 189</i>\";\r\n\r\n  messageContent += surpriseRules;\r\n\r\n  let chatData = {\r\n    user: game.user._id,\r\n    speaker: game.user.name,\r\n    content: messageContent,\r\n    whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n  };\r\n\r\n  ChatMessage.create(chatData, {});\r\n}\r\n\r\nfunction getPlayerActors() {\r\n  // Get tokens in the scene that are player characters and not NPCs. Prioritize selected tokens.\r\n  const controlledPlayerActors = canvas.tokens.controlled\r\n    .filter((pc) => pc.actor.isPC && pc.actor.data.type === \"character\")\r\n    .map((a) => a.actor);\r\n\r\n  if (controlledPlayerActors.length > 0) {\r\n    return controlledPlayerActors;\r\n  }\r\n\r\n  // If none are selected, use all the player characters in the scene\r\n  return canvas.tokens.children[0].children\r\n    .filter((pc) => pc.actor.isPC && pc.actor.data.type === \"character\")\r\n    .map((a) => a.actor);\r\n}\r\n\r\nfunction getEnemyActors() {\r\n  // Prioritize selected hostile enemies\r\n  const controlledEnemyActors = canvas.tokens.controlled\r\n    .filter((ec) => ec.actor.isPC === false && ec.data.disposition === -1)\r\n    .map((a) => a.actor);\r\n\r\n  if (controlledEnemyActors.length > 0) {\r\n    return controlledEnemyActors;\r\n  }\r\n\r\n  // If none are selected, use all the enemies in the scene that are hostile\r\n  return canvas.tokens.children[0].children\r\n    .filter((ec) => ec.actor.isPC === false && ec.data.disposition === -1)\r\n    .map((a) => a.actor);\r\n}\r\n\r\nfunction rollStealth(sneakyGroup) {\r\n  // Roll stealth for the sneaking group\r\n  let stealthResults = [];\r\n  for (let actor of sneakyGroup) {\r\n    let stealth =\r\n      new Roll(\"1d20\").roll().total + actor.data.data.skills.ste.mod;\r\n    stealthResults.push(stealth);\r\n  }\r\n\r\n  // Return the lowest stealth roll, it's all we need\r\n  return Math.min(...stealthResults);\r\n}\r\n\r\nfunction calculateSurpriseResults(lowestStealth, perceptiveGroup) {\r\n  let resultMsg = ``;\r\n\r\n  const surprisedTxt = `[<span style=\"color:red\">Surprised</span>]`;\r\n  const notSurprisedTxt = `[<span style=\"color:green\">Not Surprised</span>]`;\r\n  const alertTxt = `<i>Alert</i>`;\r\n\r\n  const lowestPerception = Math.min.apply(\r\n    Math,\r\n    perceptiveGroup.map(function (actor) {\r\n      return actor.data.data.skills.prc.passive;\r\n    })\r\n  );\r\n\r\n  if (lowestPerception >= lowestStealth) {\r\n    resultMsg += `<i>No one is Surprised!</i> <br>`;\r\n  } else {\r\n    for (let actor of perceptiveGroup) {\r\n      const name = actor.data.name;\r\n      const prc = actor.data.data.skills.prc.passive;\r\n      let msg = ``;\r\n\r\n      // If Alert feat not surprised, else if win perception not surprised, else surprised\r\n      const alertFeat = actor.data.items.find((p) => p.name === \"Alert\");\r\n      if (alertFeat) {\r\n        msg = `${name} (${prc}) -- ${notSurprisedTxt} ${alertTxt}`;\r\n      } else if (prc >= lowestStealth) {\r\n        msg = `${name} (${prc}) -- ${notSurprisedTxt}`;\r\n      } else {\r\n        msg = `${name} (${prc}) -- ${surprisedTxt}`;\r\n      }\r\n\r\n      // Append this actor's surprise result to chat message variable.\r\n      resultMsg += `${msg} <div style=\"border-bottom: 1px solid gray\"></div> <br>`;\r\n    }\r\n  }\r\n\r\n  return resultMsg;\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.7_60.png","actorIds":[],"_id":"W69L318zgQbuWf9Y"}
{"name":"Hide Video Boxes","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Hide Video Boxes  ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Hides the camera boxes. If you just want to collapse the boxes to the name, change \"camera-views\" to \"video-container\"\r\n// Note: this has to be re-ran when the UI refreshes.\r\n\r\nlet cameras = document.getElementById(\"camera-views\");\r\ncameras.style.display = cameras.style.display === \"none\" ? \"flex\" : \"none\";\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/push.svg","actorIds":[],"_id":"W88E1moJGAToMfni"}
{"name":"Jukebox","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Jukebox  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Quickly play from a list of sound effects and set their audio level. (does not loop)\r\n * Author: Rockshow\r\n */\r\n\r\nlet playlist = {\r\n  'twigs breaking': 'audio/twigs_1.mp3',\r\n  'door opening': 'sounds/lock.wav',\r\n};\r\n\r\nlet optionList;\r\nfor (let [key, value] of Object.entries(playlist)) {\r\n  optionList += `<option value=\"${value}\">${key}</option>`;\r\n}\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Audio chosing form`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Canzone:</label>\r\n        <select id=\"idcanzone\" name=\"idcanzone\">\r\n          ${optionList}\r\n        </select>\r\n      </div>\r\n   \r\n        <div class=\"form-group\">\r\n        <label for=\"vol\">Volume:</label>\r\n           <div class=\"form-fields\">\r\n            <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"8\" value=\"1\" step=\"0.2\" data-dtype=\"Number\">\r\n            <span class=\"range-value\" id=\"demo\">1</span>\r\n           </div>\r\n        </div>\r\n </form> \r\n<script>\r\nvar slider = document.getElementById(\"vol\");\r\nvar output = document.getElementById(\"demo\");\r\noutput.innerHTML = slider.value;\r\n\r\nslider.oninput = function() {\r\n  output.innerHTML = this.value;\r\n}\r\n</script>\r\n          `,\r\n  buttons: {\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n        },\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n         },\r\n           },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n    let canzone= html.find('[name=\"idcanzone\"]')[0].value || \"none\";\r\n    let vol1= html.find('[name=\"vol\"]')[0].value || \"none\";\r\n    AudioHelper.play({src: canzone, volume:vol1, autoplay: true, loop: false}, true);\r\n                      }\r\n                 }\r\n  }).render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/musical-score.svg","actorIds":[],"_id":"WQNv7NYJymMI9i24"}
{"name":"Create Chat Message","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Create Chat Message  ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Courtesy of @errational\r\n// Creates a chat message.\r\nconst content = `<p>Monster attacks ${controlledToken.name}</p>`;\r\n\r\nChatMessage.create({\r\n  speaker: ChatMessage.getSpeaker(controlledToken),\r\n  content: content,\r\n  type: CONST.CHAT_MESSAGE_TYPES.OTHER\r\n});","author":"s7gxOGja1p9WAX4j","img":"imports/icons/talk.svg","actorIds":[],"_id":"WbArYMMhzVuKUM4K"}
{"name":"Hex Crawler Helper","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Hex Crawler Helper ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\r\nRequired Rollable Tables:\r\n*Wilderness Encounters*\r\n    coast\r\n    jungle1\r\n    jungle2\r\n    jungle3\r\n    mountains\r\n    rivers\r\n    ruins\r\n    swamp\r\n    wasteland\r\n\r\n*Other Tables*\r\n    weather\r\n    directions\r\n\r\n    cache\r\n    deadexplorers\r\n\r\nCache and Deadexplorers are not mandatory, but if you don't want them search the file for // CACHE LINES or // DEAD EXPLORER LINES and comment out the 2 lines below the comments\r\n\r\nExplanation of those tables:\r\nIf you have an encounter table that has the word cache in it, the cache table will be rolled automatically.\r\n    <br/><span id=\"cache\">The party finds a cache: </span>\r\nIf you have an encounter table that has DeadExplorers in it, the dead explorer table will be rolled automatically.\r\n    <br/><span id=\"DeadExplorers\">The party finds: </span> \r\n\r\n\r\nYou can have an automatic moving \"Actual Location\" Marker by creating a Token named \"Actual Location\" and placing it on your hex grid.\r\nThis will move if the players are \"Lost\". If the players are not lost it will not move.\r\n\r\n\r\n\r\n*/\r\n\r\n\r\n// Macro requires selecting a token to roll the survival check\r\n\r\nlet hexCrawl() => {\r\n    if (canvas.tokens.controlled.length === 0)\r\n        return ui.notifications.error(\"Please select the token of the Navigator!\");\r\n\r\n    const playerMarker = canvas.scene.data.tokens.find(a => a.name === 'Player Location');\r\n    const locationMarker = canvas.scene.data.tokens.find(a => a.name === 'Actual Location');\r\n\r\n    const gridSize = canvas.grid.size;\r\n    const vertical = gridSize * 0.866666;\r\n    const diagVertical = gridSize * 0.433333;\r\n    const diagHorizontal = gridSize * 0.75;\r\n\r\n    // The option values below are the names of your rollable tables for each hex type. If these get changed here you will need to change them in the Survival Check DC section too!\r\n\r\n    let pace = 'none';\r\n    new Dialog({\r\n        title: `Hex Crawl Helper`,\r\n        content: `\r\n        <form>\r\n            <div class=\"form-group\">\r\n                <label>Hex Type:</label>\r\n                <select id=\"hex-type\" name=\"hex-type\">\r\n                    <option value=\"coast\">Coast</option>\r\n                    <option value=\"jungle1\">Jungle: No Undead</option>\r\n                    <option value=\"jungle2\">Jungle: Lesser Undead</option>\r\n                    <option value=\"jungle3\">Jungle: Greater Undead</option>\r\n                    <option value=\"mountains\">Mountains</option>\r\n                    <option value=\"rivers\">River</option>\r\n                    <option value=\"ruins\">Ruins</option>\r\n                    <option value=\"swamp\">Swamp</option>\r\n                    <option value=\"wasteland\">Wasteland</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label>Travel Direction:</label>\r\n                <select id=\"travel-direction\" name=\"travel-direction\">\r\n                    <option value=\"North\">North</option>\r\n                    <option value=\"Northeast\">Northeast</option>\r\n                    <option value=\"Southeast\">Southeast</option>\r\n                    <option value=\"South\">South</option>\r\n                    <option value=\"Southwest\">Southwest</option>\r\n                    <option value=\"Northwest\">Northwest</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label>Travel Type:</label>\r\n                <select id=\"travel-type\" name=\"travel-type\">\r\n                    <option value=\"on-foot\">On Foot</option>\r\n                    <option value=\"canoe\">By Canoe</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n        `,\r\n        buttons: {\r\n            slow: {\r\n                icon: \"<i class='fas fa-user-ninja'></i>\",\r\n                label: `Slow Pace`,\r\n                callback: () => pace = 'slow'\r\n            },\r\n            average: {\r\n                icon: \"<i class='fas fa-hiking'></i>\",\r\n                label: `Average Pace`,\r\n                callback: () => pace = 'average'\r\n            },\r\n            fast: {\r\n                icon: \"<i class='fas fa-running'></i>\",\r\n                label: `Fast Pace`,\r\n                callback: () => pace = 'fast'\r\n            }\r\n        },\r\n        default: \"average\",\r\n        close: html => {\r\n            // set variables\r\n            let hexType = html.find('[name=\"hex-type\"]')[0].value;\r\n            let travelType = html.find('[name=\"travel-type\"]')[0].value;\r\n            let playerDirection = html.find('[name=\"travel-direction\"]')[0].value;\r\n            const weatherTable = game.tables.entities.find(t => t.name === \"weather\");\r\n            const directionTable = game.tables.entities.find(t => t.name === \"directions\");\r\n            const cacheTable = game.tables.entities.find(t => t.name === \"cache\");\r\n            const deadExplorerTable = game.tables.entities.find(t => t.name === \"deadexplorers\");\r\n            const encounterTable = game.tables.entities.find(t => t.name === hexType);\r\n            let weatherRoll = weatherTable.roll()[1].text;\r\n            let lostDirection = directionTable.roll()[1].text;\r\n            let msgContent = '<strong>Weather</strong> ' + weatherRoll + '<br/><br/>';\r\n            let navigator = Actors.instance.get(canvas.tokens.controlled[0].data.actorId);\r\n            let wis = navigator.data.data.abilities.wis.mod;\r\n            let survival = new Roll(`1d20`).roll().total + wis;\r\n            let slowPace = new Roll(`1d4`).roll().total;\r\n            let fastPace = new Roll(`1d2`).roll().total;\r\n            let hexesMoved = 1;\r\n            let encounter = '';\r\n            let hexText = 'hexes';\r\n\r\n            if (travelType === 'canoe') {\r\n                hexesMoved++;\r\n            }\r\n\r\n            // build pace message and hex movement\r\n            if (pace === 'slow') {\r\n                if (slowPace === 1)\r\n                    hexesMoved--;\r\n                if (hexesMoved === 1)\r\n                    hexText = 'hex';\r\n                msgContent += '<strong>Slow pace:</strong> Can hide from encounters or approach stealthily.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n                survival += 5;\r\n            } else if (pace === 'average') {\r\n                if (hexesMoved === 1)\r\n                    hexText = 'hex';\r\n                msgContent += '<strong>Average pace:</strong> For rivers, upstream and downstream have no effect, and waterfalls occur every 10 to 20 miles (requiring portage of canoes).<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n            } else if (pace === 'fast') {\r\n                if (fastPace === 1)\r\n                    hexesMoved++;\r\n                if (hexesMoved === 1)\r\n                    hexText = 'hex';\r\n                msgContent += '<strong>Fast pace:</strong> -5 to passive Perception.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\r\n                survival -= 5;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            // Survival Check DC for each hex type. If selected token rolls under DC the party is lost!\r\n            if (((hexType === 'coast' || hexType === 'ruins') && survival < 10) || ((hexType === 'jungle1' || hexType === 'jungle2' || hexType === 'jungle3' || hexType === 'mountains' || hexType === 'rivers' || hexType === 'swamp' || hexType === 'wasteland') && survival < 15)) {\r\n                msgContent += '<strong>Party is Lost:</strong> Move actual location ' + hexesMoved + ' ' + hexText + ' to the ' + lostDirection + '<br/><br/>';\r\n                if (locationMarker) {\r\n                    const locToken = canvas.tokens.get(locationMarker._id);\r\n                    switch (lostDirection) {\r\n                        case 'South':\r\n                            locToken.update({\r\n                                x: locToken.x,\r\n                                y: locToken.y + (vertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Southwest':\r\n                            locToken.update({\r\n                                x: locToken.x - (diagHorizontal * hexesMoved),\r\n                                y: locToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Southeast':\r\n                            locToken.update({\r\n                                x: locToken.x + (diagHorizontal * hexesMoved),\r\n                                y: locToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'North':\r\n                            locToken.update({\r\n                                x: locToken.x,\r\n                                y: locToken.y - (vertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Northwest':\r\n                            locToken.update({\r\n                                x: locToken.x - (diagHorizontal * hexesMoved),\r\n                                y: locToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Northeast':\r\n                            locToken.update({\r\n                                x: locToken.x + (diagHorizontal * hexesMoved),\r\n                                y: locToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if (playerMarker) {\r\n                    const playerToken = canvas.tokens.get(playerMarker._id);\r\n                    switch (playerDirection) {\r\n                        case 'South':\r\n                            playerToken.update({\r\n                                x: playerToken.x,\r\n                                y: playerToken.y + (vertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Southwest':\r\n                            playerToken.update({\r\n                                x: playerToken.x - (diagHorizontal * hexesMoved),\r\n                                y: playerToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Southeast':\r\n                            playerToken.update({\r\n                                x: playerToken.x + (diagHorizontal * hexesMoved),\r\n                                y: playerToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'North':\r\n                            playerToken.update({\r\n                                x: playerToken.x,\r\n                                y: playerToken.y - (vertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Northwest':\r\n                            playerToken.update({\r\n                                x: playerToken.x - (diagHorizontal * hexesMoved),\r\n                                y: playerToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Northeast':\r\n                            playerToken.update({\r\n                                x: playerToken.x + (diagHorizontal * hexesMoved),\r\n                                y: playerToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            } else {\r\n                if (playerMarker && locationMarker) {\r\n                    const locToken = canvas.tokens.get(locationMarker._id);\r\n                    const playerToken = canvas.tokens.get(playerMarker._id);\r\n\r\n                    switch (playerDirection) {\r\n                        case 'South':\r\n                            playerToken.update({\r\n                                x: locToken.x,\r\n                                y: locToken.y + (vertical * hexesMoved)\r\n                            });\r\n                            locToken.update({\r\n                                x: locToken.x,\r\n                                y: locToken.y + (vertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Southwest':\r\n                            playerToken.update({\r\n                                x: locToken.x - (diagHorizontal * hexesMoved),\r\n                                y: locToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            locToken.update({\r\n                                x: locToken.x - (diagHorizontal * hexesMoved),\r\n                                y: locToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Southeast':\r\n                            playerToken.update({\r\n                                x: locToken.x + (diagHorizontal * hexesMoved),\r\n                                y: locToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            locToken.update({\r\n                                x: locToken.x + (diagHorizontal * hexesMoved),\r\n                                y: locToken.y + (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'North':\r\n                            playerToken.update({\r\n                                x: locToken.x,\r\n                                y: locToken.y - (vertical * hexesMoved)\r\n                            });\r\n                            locToken.update({\r\n                                x: locToken.x,\r\n                                y: locToken.y - (vertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Northwest':\r\n                            playerToken.update({\r\n                                x: locToken.x - (diagHorizontal * hexesMoved),\r\n                                y: locToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            locToken.update({\r\n                                x: locToken.x - (diagHorizontal * hexesMoved),\r\n                                y: locToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        case 'Northeast':\r\n                            playerToken.update({\r\n                                x: locToken.x + (diagHorizontal * hexesMoved),\r\n                                y: locToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            locToken.update({\r\n                                x: locToken.x + (diagHorizontal * hexesMoved),\r\n                                y: locToken.y - (diagVertical * hexesMoved)\r\n                            });\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            msgContent += '<strong>Morning Encounter:</strong> ';\r\n\r\n            if (new Roll(`1d20`).roll().total > 15) {\r\n                encounter = encounterTable.roll()[1].text;\r\n                msgContent += encounter;\r\n                // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n                if (encounter.indexOf('cache') > -1)\r\n                    msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n                // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n                if (encounter.indexOf('DeadExplorers') > -1)\r\n                    msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n                msgContent += '<strong>Afternoon Encounter:</strong> ';\r\n            } else {\r\n                msgContent += 'None.<br/><br/><strong>Afternoon Encounter:</strong> ';\r\n            }\r\n\r\n            if (new Roll(`1d20`).roll().total > 15) {\r\n                encounter = encounterTable.roll()[1].text;\r\n                msgContent += encounter;\r\n                // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n                if (encounter.indexOf('cache') > -1)\r\n                    msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n                // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n                if (encounter.indexOf('DeadExplorers') > -1)\r\n                    msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n                msgContent += '<strong>Evening Encounter:</strong> ';\r\n            } else {\r\n                msgContent += 'None.<br/><br/><strong>Evening Encounter:</strong> ';\r\n            }\r\n\r\n            if (new Roll(`1d20`).roll().total > 15) {\r\n                encounter = encounterTable.roll()[1].text;\r\n                msgContent += encounter;\r\n                // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\r\n                if (encounter.indexOf('cache') > -1)\r\n                    msgContent += cacheTable.roll()[1].text + '<br/><br/>';\r\n                // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\r\n                if (encounter.indexOf('DeadExplorers') > -1)\r\n                    msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\r\n            } else {\r\n                msgContent += 'None.';\r\n            }\r\n\r\n            // create the message\r\n            let chatData = {\r\n                content: msgContent,\r\n                whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n            };\r\n            ChatMessage.create(chatData, {});\r\n        }\r\n    }).render(true);\r\n}\r\n\r\nhexCrawl();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/hexes.svg","actorIds":[],"_id":"Wk99gXVFrV1pMbwq"}
{"name":"22 - Smoke","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"22 - Smoke   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"smoke\",\r\n    filterId: \"mySmoke\",\r\n    color: 0x50FFAA,\r\n    time: 0,\r\n    blend: 2,\r\n    dimX: 1,\r\n    dimY: 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\"\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/22-smoke.png","actorIds":[],"_id":"X0L7jjZ3lp3Np7H7"}
{"name":"Basic Message - Open Config Dialog","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"modules/turnAlert/icons/timer-icon.svg","tooltip":"Basic Message - Open Config Dialog  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Configurable Basic Message Turn Alert\r\n * Opens the Turn Alert Configuration dialog for editing with\r\n *   some initial values.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 1,\r\n    roundAbsolute: false,\r\n    turnId: game.combat.combatant._id,\r\n    message: \"Edit me!\",\r\n};\r\n\r\nnew TurnAlertConfig(alertData).render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"X3i4epMfsqNFuYAB"}
{"name":"Show Active/Passive Effects","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Show Active/Passive Effects   ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"for ( let token of canvas.tokens.controlled ){\r\nDynamicEffects.effects(event.shiftKey, {token, activeOnly: false});\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/meditation.svg","actorIds":[],"_id":"XHgUaaPWkAjw8MlC"}
{"name":"Spider Staff","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/spiderstaff.jpg","tooltip":"Spider Staff_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Spider Staff\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spiderstaff.jpg","actorIds":[],"_id":"XKJYy0XfFY1dt54H"}
{"name":"Augury","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/evil-eye-eerie-2.jpg","tooltip":"Augury_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Augury\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/evil-eye-eerie-2.jpg","actorIds":[],"_id":"XPcWdJ6QMDuZIRfY"}
{"name":"move-token","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"move-token ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will move the selected token to the designated position\r\n * Takes X and Y as arguments for the position (in pixels)\r\n * A third, optional, argument, if set to true, will disable the movement animation\r\n * Example: /move-token 1000 1500 false\r\n */\r\n\r\nconst x = args[0];\r\nconst y = args[1];\r\nconst noAnimate = args[2];\r\n\r\nif (!token) return;\r\nif (noAnimate) token._noAnimate = true;\r\nawait token.update({x, y})\r\ntoken._noAnimate = false;","author":"s7gxOGja1p9WAX4j","img":"imports/icons/chess-pawn.svg","actorIds":[],"_id":"Xqgy4oWujJ2fdGlp"}
{"name":"21 - Flood","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"21 - Flood   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"flood\",\r\n    filterId: \"myFlood\",\r\n    time: 0,\r\n    color: 0x0020BB,\r\n    billowy: 0.43,\r\n    tintIntensity: 0.72,\r\n    glint: 0.31,\r\n    scale: 70,\r\n    padding: 10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0006, \r\n        animType: \"move\"\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/flood.png","actorIds":[],"_id":"XqoFk2IrMLtacVWe"}
{"name":"Shadow Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro      ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Shadow\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/tokens/Player/shadow-a.jpg","actorIds":[],"_id":"XypUalEERg62hqkl"}
{"name":"Barkskin","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Barkskin ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet armour = target.actor.data.data.attributes.ac.value\r\n\r\nif (args[0] === \"on\") {\r\n    let newArmour = armour <= 16 ? 16 : armour\r\n    console.log(newArmour)\r\n    target.setFlag('world', 'barkskin', armour)\r\n    target.actor.update({ \"data.attributes.ac.value\" : newArmour })\r\n} else {\r\n    let newArmour = target.getFlag('world', 'barkskin');\r\n    target.actor.update({ \"data.attributes.ac.value\" : newArmour });\r\n    target.unsetFlag('world', 'barkskin')\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-orange-2.jpg","actorIds":[],"_id":"Y0VAkIH9TbcvOPIv"}
{"name":"Pact Boon: Toll the Dead","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/inventory/bell_brass.jpg","tooltip":"Pact Boon: Toll the Dead_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Pact Boon: Toll the Dead\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/inventory/bell_brass.jpg","actorIds":[],"_id":"Y3tEqC5nK8jp1d0R"}
{"name":"Basic Message","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"modules/turnAlert/icons/timer-icon.svg","tooltip":"Basic Message  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Basic Message Turn Alert\r\n * Creates an alert that triggers on the current turn in\r\n *   the next round and displays a message.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 1,\r\n    roundAbsolute: false,\r\n    turnId: game.combat.combatant._id,\r\n    message: \"My Message\",\r\n};\r\n\r\nTurnAlert.create(alertData);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"Y4N52S9U4PGuIUbD"}
{"_id":"Y9neM2ioRCs9YQ36","name":"Dialog","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Dialog    ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"/*\r\n * Example dialog that requests user input, then uses the value\r\n */\r\nlet d = new Dialog({\r\n  title: 'Example',\r\n  content: `\r\n    <form class=\"flexcol\">\r\n      <div class=\"form-group\">\r\n        <label for=\"exampleInput\">Example Input</label>\r\n        <input type=\"text\" name=\"exampleInput\" placeholder=\"Enter Value\">\r\n      </div>\r\n    </form>\r\n  `,\r\n  buttons: {\r\n    no: {\r\n      icon: '<i class=\"fas fa-times\"></i>',\r\n      label: 'Cancel'\r\n    },\r\n    yes: {\r\n      icon: '<i class=\"fas fa-check\"></i>',\r\n      label: 'Yes',\r\n      callback: (html) => {\r\n        let val = html.find('input[name=\"exampleInput\"]').val();\r\n        console.log(`ExampleInput value was: ${val}`);\r\n      }\r\n    },\r\n  },\r\n  default: 'yes',\r\n  close: () => {\r\n    console.log('Example Dialog Closed');\r\n  }\r\n});\r\nd.options.width = 300;\r\nd.position.width = 300;\r\nd.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/whisper-ico.png","actorIds":[]}
{"name":"Scale Grid Size To Inches","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Scale Grid Size To Inches ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\nAuthor: @stan#1549 (github.com/janssen-io)\r\n\r\nDescription:\r\nThe first time you click the macro, it will prompt you for your screen size (diagonal).\r\nClicking the macro a second time will automatically scale to 1\"/grid unit (square/hex).\r\nShift-click the macro to update this value.\r\n\r\nNote:\r\nThe screen size is saved per client. So opening the macro on another device for the first time, will make it prompt for the screen size again.\r\n */\r\n\r\nfunction showDialog(inches, resolve) {\r\n  new Dialog({\r\n    content: `Screen size (inches): <input type=\"number\" min=\"10\" max=\"200\" value=\"${inches}\" />`,\r\n    default: 'scale',\r\n    buttons: {\r\n      scale: {\r\n        label: 'Scale',\r\n        callback: html => resolve(+html.find('input').val())\r\n      }\r\n    }\r\n  }).render(true);\r\n}\r\n\r\nfunction scale(screenSizeInches) {\r\n  const diagonal = Math.sqrt(screen.width ** 2 + screen.height ** 2);\r\n  const ppi = diagonal / screenSizeInches;\r\n  console.log(`PPI: ${screenSizeInches}\" screen | ${canvas.grid.size}px per grid unit | ${ppi}px per inch | Scaling to: ${ppi / canvas.grid.size}`);\r\n  canvas.animatePan({ scale: ppi / canvas.grid.size });\r\n}\r\n\r\nconst key = 'stan#1549.scale.screenSize';\r\nconst storedScreenSize = localStorage.getItem(key);\r\nconst shouldUpdatePPI = !storedScreenSize || event.shiftKey;\r\n\r\nconst getScreenSize = new Promise(resolve => {\r\n  if (shouldUpdatePPI) {\r\n    showDialog(storedScreenSize || 42, resolve);\r\n  } else {\r\n    resolve(storedScreenSize);\r\n  }\r\n});\r\n\r\ngetScreenSize.then(inches => {\r\n  scale(inches);\r\n  localStorage.setItem(key, inches);\r\n});\r\n\r\n\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/hexes.svg","actorIds":[],"_id":"YDR4s1RnDzsbNBn6"}
{"name":"Find_Familiar","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Find_Familiar                                                        ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"// Find Familiar Spell - Allows the player to select which familiar they want\r\n// Thanks to Kekilla and Cole for additonal help on Discord\r\n// \"You want a familiar? Oh boy!\" - Droop\r\n// Written by Jon Whitehouse [MTGCarver#7753]\r\nmain()\r\n\r\nasync function main() {\r\n    // Is token selected? If not, error\r\n    if (canvas.tokens.controlled.length == 0 || canvas.tokens.controlled.length > 1) {\r\n        ui.notifications.error(\"Please select a single token.\");\r\n        return;\r\n    }\r\n    let actor = canvas.tokens.controlled[0].actor;\r\n\r\n    // Does player have the find familiar spell?\r\n    console.log(\"Actor: \", actor);\r\n    let findFamiliar = actor.items.find(item => item.data.name == \"Find Familiar\")\r\n    if (findFamiliar == null || findFamiliar == undefined) {\r\n        ui.notifications.error(`Sorry ${actor.data.name}, but you don't have the find familiar spell. Get bent.`);\r\n        return;\r\n    }\r\n\r\n    // What are the familiars available?\r\n    //  bat, cat, crab, frog, hawk, lizard, octopus, owl, poisonous snake, fish, rat, raven, sea horse, spider, weasel.\r\n    let conjureTarget = \"Bat\";\r\n    let summonCreature = false;\r\n    new Dialog({\r\n        title: `Choose a familiar`,\r\n        content: `\r\n            <form>\r\n            <div class=\"form-group\">\r\n              <label>Familiar:</label>\r\n                <select id=\"familiar-type\" name=\"familiar-type\">\r\n                <option value=\"bat\">Bat</option>\r\n                <option value=\"cat\">Cat</option>\r\n                <option value=\"crab\">Crab</option>\r\n                <option value=\"frog\">Frog</option>\r\n                <option value=\"hawk\">Hawk</option>\r\n                <option value=\"lizard\">Lizard</option>\r\n                <option value=\"octopus\">Octopus</option>\r\n                <option value=\"owl\">Owl</option>\r\n                <option value=\"poisonous_snake\">Poisonous Snake</option>\r\n                <option value=\"fish\">Quipper (Fish)</option>\r\n                <option value=\"rat\">Rat</option>\r\n                <option value=\"raven\">Raven</option>\r\n                <option value=\"sea-horse\">Sea Horse</option>\r\n                <option value=\"spider\">Spider</option>\r\n                <option value=\"weasel\">Weasel</option>\r\n                </select>\r\n            </div>\r\n            </form>\r\n        `,\r\n        buttons: {\r\n            summon: {\r\n                icon: \"<i class='fas fa-check'></i>\",\r\n                label: `Summon`,\r\n                callback: () => summonCreature = true\r\n            },\r\n            cancelOut: {\r\n                icon: \"<i class='fas fa-times'></i>\",\r\n                label: `Cancel`\r\n            },\r\n        },\r\n        default: \"summon\",\r\n        close: html => {\r\n            if (summonCreature) {\r\n                for (let token of canvas.tokens.controlled) {\r\n                    let FamiliarType = html.find('[name=\"familiar-type\"]')[0].value || \"none\";\r\n                    let conjureTarget = \"Bat\";\r\n                    let targetFamiliarID = \"0\";\r\n\r\n                    // Determine the player's token location and grab the X & Y coordinates\r\n                    const playerName = actor.data.name;\r\n                    const playerToken = canvas.tokens.placeables.find(\r\n                        i => i.name === playerName\r\n                    );\r\n                    const playerX = playerToken.data.x;\r\n                    const playerY = playerToken.data.y;\r\n\r\n                    console.log(\"PlayerName: \", playerName);\r\n                    console.log(\"playerToken: \", playerToken);\r\n                    console.log(\"playerX: \", playerX);\r\n                    console.log(\"playerY: \", playerY);\r\n                  \r\n                    // Get Type of Creature\r\n                    switch (FamiliarType) {\r\n                        case \"bat\":\r\n                            conjureTarget = game.actors.getName(\"Bat\");\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"cat\":\r\n                            conjureTarget = game.actors.getName(\"Cat\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"crab\":\r\n                            conjureTarget = game.actors.getName(\"Crab\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"frog\":\r\n                            conjureTarget = game.actors.getName(\"Frog\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"hawk\":\r\n                            conjureTarget = game.actors.getName(\"Hawk\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"lizard\":\r\n                            conjureTarget = game.actors.getName(\"Lizard\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"octopus\":\r\n                            conjureTarget = game.actors.getName(\"Octopus\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"owl\":\r\n                            conjureTarget = game.actors.getName(\"Owl\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"poisonous_snake\":\r\n                            conjureTarget = game.actors.getName(\"Poisonous Snake\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"fish\":\r\n                            conjureTarget = game.actors.getName(\"Quipper\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"rat\":\r\n                            conjureTarget = game.actors.getName(\"Rat\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"raven\":\r\n                            conjureTarget = game.actors.getName(\"Raven\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"sea-horse\":\r\n                            conjureTarget = game.actors.getName(\"Sea Horse\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"spider\":\r\n                            conjureTarget = game.actors.getName(\"Spider\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        case \"weasel\":\r\n                            conjureTarget = game.actors.getName(\"Weasel\")\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                            break;\r\n                        default:\r\n                            conjureTarget = game.actors.getName(\"Bat\");\r\n                            console.log(\"Picked: \", conjureTarget.data.name);\r\n                    }\r\n                    // Now let's place it on the map and set all the values we want\r\n                    let updateToken = duplicate(conjureTarget.data.token);\r\n                    updateToken.x = playerX + 65;\r\n                    updateToken.y = playerY;\r\n                    updateToken.bar1 = {attribute: \"attributes.hp\"};\r\n                    updateToken.bar2 = {attribute: \"attributes.ac.value\"};\r\n                    updateToken.displayName = 20;\r\n                    updateToken.displayBars = 20;\r\n                    canvas.tokens.createMany(updateToken);\r\n                    console.log(\"Created token\");\r\n                }\r\n            }\r\n        }\r\n    }).render(true);\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/sonic-screech.svg","actorIds":[],"_id":"YGF5dEzp7VaxXeSQ"}
{"name":"24 - T04 - Earth Shell","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T04 - Earth Shell   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myEarthField\",\r\n    shieldType: 4,\r\n    gridPadding: 2,\r\n    color: 0xBB9070,\r\n    time: 0,\r\n    blend: 1,\r\n    intensity: 1.25,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/earthspell.png","actorIds":[],"_id":"YQ6E6KTStyOoK5Yh"}
{"name":"Hat of Wizardry","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/equipment/cowl.jpg","tooltip":"Hat of Wizardry_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hat of Wizardry\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/equipment/cowl.jpg","actorIds":[],"_id":"YQPTKhDlG4JDM7Yy"}
{"name":"Token Vision Configuration","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Token Vision Configuration ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. This script is taken from Sky's foundry repo here: https://github.com/Sky-Captain-13/foundry/blob/master/scriptMacros/tokenVision.js.\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/candle-holder.svg","actorIds":[],"_id":"YttihIjf1fQThyL5"}
{"name":"Metamagic: Empowered Spell","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/blue_13.jpg","tooltip":"Metamagic: Empowered Spell_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Metamagic: Empowered Spell\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/blue_13.jpg","actorIds":[],"_id":"YzCewVwS91tUK5Mh"}
{"name":"Remove Bless","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"DynamicEffects.applyActive(\"Bless\", false, \"spell\") ","author":"s7gxOGja1p9WAX4j","img":"imports/icons/broken-shield.svg","actorIds":[],"_id":"ZMqUAWSSHJMPjlkA"}
{"_id":"ZSa035UF3Eg8x7XK","name":"Ram","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Ram_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Ram\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/ram.svg","actorIds":[]}
{"name":"07 - Distortion","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"07 - Distortion    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// you can change the mask of the filter\r\n// the mask must have a power of 2 h and w (512x512, 128x128, ...) \r\n// the distortion applies on black and white and shades of grey\r\n// after testing the first version of this macro try this :\r\n// -> maskPath: \"/modules/tokenmagic/fx/assets/waves-2.png\"\r\n\r\nlet params =\r\n{\r\n    filterType: \"distortion\",\r\n    filterId: \"myDistortion\",\r\n    maskPath: \"/modules/tokenmagic/fx/assets/distortion-1.png\",\r\n    maskSpriteScaleX: 5,\r\n    maskSpriteScaleY: 5,\r\n    padding: 20,\r\n    animated:\r\n    {\r\n        maskSpriteX: { active: true, speed: 0.05, animType: \"move\" },\r\n        maskSpriteY: { active: true, speed: 0.07, animType: \"move\" }\r\n    }\r\n};\r\n\r\nTokenMagic.addUpdateFilterOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/distortion.png","actorIds":[],"_id":"ZZNsyL36kPov1ezG"}
{"name":"Tailor Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Sethrael \\\"Tailor\\\" Copperkind\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/dndbeyond/Sethrael-Tailor-Copperkind.jpeg","actorIds":[],"_id":"ZaWKjuwFVbB5CmUX"}
{"name":"Locate Object","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/rock-royal-2.jpg","tooltip":"Locate Object_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Locate Object\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/rock-royal-2.jpg","actorIds":[],"_id":"ZgLGYb2wHFdSipPJ"}
{"name":"Create Ambient Light","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Create Ambient Light ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Create a (pre-configured) lightsource on the current scene. \r\n// This example is a blue light for \"activating a stargate.\"\r\n\r\nAmbientLight.create({\r\n  t: \"l\", // l for local. The other option is g for global.\r\n  x: 1100, // horizontal positioning\r\n  y: 1150, // vertical positioning\r\n  dim: 20.50, // the total radius of the light, including where it is dim.\r\n  bright: 19.00, // the bright radius of the light\r\n  angle: 360, // the coverage of the light. (Try 30 for a \"spotlight\" effect.)\r\n  rotation: 0, // the beam direction of the light in degrees (if its angle is less than 360 degrees.) \r\n               // Oddly, degrees are counted from the 6 o'clock position.\r\n  tintColor: \"#0080FF\", // Light coloring.\r\n  tintAlpha: 0.5 // Light opacity (or \"brightness,\" depending on how you think about it.) \r\n});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/sun.svg","actorIds":[],"_id":"Zxet2obkaJJ0vDPc"}
{"name":"Pass without Trace","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fog-air-1.jpg","tooltip":"Pass without Trace_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Pass without Trace\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fog-air-1.jpg","actorIds":[],"_id":"a3LZAZiII4VHZReM"}
{"name":"Activate Effects","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Activate Effects ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"DynamicEffects.activateItem()","author":"s7gxOGja1p9WAX4j","img":"imports/icons/click.svg","actorIds":[],"_id":"a65v9qhTl4cAzchV"}
{"name":"Divine Smite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Divine Smite ","icon":"systems/dnd5e/icons/skills/light_05.jpg","module":"macro-marker","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\r\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\r\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\r\n * will also increase the number of damage dice.\r\n * \r\n * First, select a token to perform the smite, then target an enemy to be smitten. Make your regular \r\n * attack and then if you choose to use Divine Smite, run this macro.\r\n */\r\n\r\nlet confirmed = false;\r\n\r\n// Create a dialogue box to select spell slot level to use when smiting.\r\nnew Dialog({\r\n    title: \"Divine Smite Damage\",\r\n    content: `\r\n     <p>Spell Slot level to use Divine Smite with.</p>\r\n     <form>\r\n      <div class=\"form-group\">\r\n       <label>Spell Slot Level:</label>\r\n       <select id=\"slot-level\" name=\"slot-level\">\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n        <option value=\"5\">5</option>\r\n       </select>\r\n      </div>\r\n     </form>\r\n     `,\r\n    buttons: {\r\n        one: {\r\n            icon: '<i class=\"fas fa-check\"></i>',\r\n            label: \"SMITE!\",\r\n            callback: () => confirmed = true\r\n        },\r\n        two: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: \"Cancel\",\r\n            callback: () => confirmed = false\r\n        }\r\n    },\r\n    default: \"Cancel\",\r\n    close: html => {\r\n        if (confirmed) {\r\n            let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\r\n            smite(slotLevel);\r\n        }\r\n    }\r\n}).render(true);\r\n\r\n/**\r\n * Gives the spell slot information for a particular actor and spell slot level.\r\n * @param {Actor5e} actor - the actor to get slot information from.\r\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\r\n * @returns {object} contains value (number of slots remaining), max, and override.\r\n */\r\nfunction getSpellSlots(actor, level) {\r\n    let spells = actor.data.data.spells;\r\n    switch (level) {\r\n        case 1:\r\n            return spells.spell1;\r\n        case 2:\r\n            return spells.spell2;\r\n        case 3:\r\n            return spells.spell3;\r\n        case 4:\r\n            return spells.spell4;\r\n        case 5:\r\n            return spells.spell5;\r\n    }\r\n}\r\n\r\n/**\r\n * Use the controlled token to smite the targeted token.\r\n * @param {integer} slotLevel - the spell slot level to use when smiting.\r\n */\r\nfunction smite(slotLevel) {\r\n    let targets = game.user.targets;\r\n    let suseptible = [\"fiend\", \"undead\"];\r\n    let controlledActor = canvas.tokens.controlled[0].actor;\r\n    let chosenSpellSlots = getSpellSlots(controlledActor, slotLevel);\r\n\r\n    if (chosenSpellSlots.value < 1) {\r\n        ui.notifications.error(\"No spell slots of the required level available.\");\r\n        return;\r\n    }\r\n    if (targets.size !== 1) {\r\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\r\n        return;\r\n    }\r\n\r\n    targets.forEach(target => {\r\n        let numDice = slotLevel + 1;\r\n        let type = target.actor.data.data.details.type.toLocaleLowerCase();\r\n        if (suseptible.includes(type)) numDice += 1;\r\n        new Roll(`${numDice}d8`).roll().toMessage({ flavor: \"Macro Divine Smite - Damage Roll (Radiant)\", speaker })\r\n    })\r\n\r\n    chosenSpellSlots.value -= 1;\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/light_05.jpg","actorIds":[],"_id":"a8kZT4wIQHnKGeM3"}
{"name":"10 - BulgePinch","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"10 - BulgePinch     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"bulgepinch\",\r\n    filterId: \"myBulge\",\r\n    padding: 150,\r\n    strength: 0,\r\n    zIndex: 2,\r\n    radiusPercent: 200,\r\n    animated:\r\n    {\r\n        strength: \r\n        { \r\n           active: true, \r\n           animType: \"cosOscillation\", \r\n           loopDuration: 2000, \r\n           val1: 0, \r\n           val2: 0.45\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/10-bulgepinch.JPG","actorIds":[],"_id":"aGUMgwsUE96V2pKW"}
{"name":"Group Notes (Friday)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro          ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.journal.getName(\"Friday Night Group Notes\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/open-book.svg","actorIds":[],"_id":"aQZmkCMxcRBsFdJD"}
{"name":"All Token’s Passive Perception","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"All Token’s Passive Perception ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Pull the passive perception of each token in the current scene and whisper the results to the GM.\r\n// Only tested with the 5e System in Foundry.\r\n// Author: @Drunemeton#7955. Based on the original macro by author @Erogroth#7134.\r\n\r\n// Initalize variables.\r\nlet pcArray = [];\r\nlet npcArray = [];\r\nlet messageContentPC = \"\";\r\nlet messageContentNPC = \"\";\r\nlet messageHeaderPC = \"<b>PC Passive Perception</b><br>\";\r\nlet messageHeaderNPC = \"<b>NPC Passive Perception</b><br>\";\r\n\r\n// Gather tokens in the current scene into an array.\r\nlet tokens = canvas.tokens.placeables.filter((token) => token.data);\r\n\r\n// From the tokens array sort into PC and NPC arrays.\r\nfor (let count of tokens) {\r\n  let tokenType = count.actor.data.type;\r\n  let tokenName = count.data.name;\r\n  let tokenPassive = count.actor.data.data.skills.prc.passive;\r\n  \r\n  if(tokenType === \"character\") {\r\n    pcArray.push({ name: tokenName, passive: tokenPassive });\r\n  } \r\n  if(tokenType === \"npc\") {\r\n    npcArray.push({ name: tokenName, passive: tokenPassive });\r\n  }\r\n}\r\n\r\n// Sort each array.\r\nsortArray(pcArray);\r\nsortArray(npcArray);\r\n\r\n// Build chat message, with PCs first, then NPCs.\r\nfor (let numPC of pcArray) {\r\n  messageContentPC += `${numPC.name}: <b>${numPC.passive}</b><br>`;\r\n}\r\nfor (let numNPC of npcArray) {\r\n  messageContentNPC += `${numNPC.name}: <b>${numNPC.passive}</b><br>`;\r\n}\r\n\r\nlet chatMessage = (messageHeaderPC + messageContentPC + `<br>` + messageHeaderNPC + messageContentNPC);\r\n\r\nlet chatData = {\r\n  user: game.user._id,\r\n  speaker: ChatMessage.getSpeaker(),\r\n  content: chatMessage,\r\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n};\r\n\r\n// Display chat message.\r\nChatMessage.create(chatData, {});\r\n\r\n// Sort each array by Name.\r\n  function sortArray(checkArray) {\r\n    checkArray.sort(function (a, b) {\r\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\r\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\r\n      if (nameA < nameB) {\r\n        return -1;\r\n      }\r\n      if (nameA > nameB) {\r\n        return 1;\r\n      }\r\n      // names must be equal\r\n      return 0;\r\n    });\r\n\r\n    // Sort array by Passive Perception.\r\n    checkArray.sort(function (a, b) {\r\n      return b.passive - a.passive;\r\n    });\r\n  }\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/evil-tower.svg","actorIds":[],"_id":"ae7K3oZ26r5K9axh"}
{"name":"Scene Border Walls","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Scene Border Walls   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"for (let scene of game.scenes){\r\n  //Goes through the array of scenes and finds the active one.\r\n    if(scene.active == true){\r\n        //Height, Width, and Padding offsets. \r\n        //scene data.height and scene.data.width give image size.\r\n        //canvas dimensions give size including padding\r\n        //xf, yf = x and y offsets.\r\n        let h = scene.data.height;\r\n        let w = scene.data.width;\r\n        let xf = (canvas.dimensions.width - w)*0.5;\r\n        let yf = (canvas.dimensions.height - h)*0.5;\r\n        //Walls need two vertices: X Point 1, Y Point 1, X Point 2, Y Point 2\r\n        //top wall, right wall, bottom wall, left wall\r\n        let tw = [xf, yf, w + xf, yf];\r\n        let rw = [w + xf, yf, w + xf, h + yf];\r\n        let bw = [w + xf, h + yf, xf, h + yf];\r\n        let lw = [xf, h + yf, xf, yf];\r\n        //Creates walls. There is probably a cleaner way to do this.\r\n        Wall.create({\r\n            c: tw\r\n        });\r\n        Wall.create({\r\n            c: rw\r\n        });\r\n        Wall.create({\r\n            c: bw\r\n        });\r\n        Wall.create({\r\n            c: lw\r\n        });\r\n    }\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/brick-wall.svg","actorIds":[],"_id":"arxXQW3a92Ss3XD1"}
{"name":"Change Token Vision","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Change Token Vision    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Open a dialog for quickly changing token vision parameters of the controlled tokens.\r\n// This macro was written by @Sky#9453\r\n// https://github.com/Sky-Captain-13/foundry\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n  return ui.notifications.error(\"Please select a token first\");\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/evil-tower.svg","actorIds":[],"_id":"b28Ux12wnIBPRql1"}
{"name":"27 - T02 - Glacial Aura (xglow)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"27 - T02 - Glacial Aura (xglow)   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myGlacialZapShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myGlacialAura\",\r\n    auraType: 1,\r\n    color: 0x5099DD,\r\n    thickness: 4.5,\r\n    scale: 3,\r\n    time: 0,\r\n    auraIntensity: 0.8,\r\n    subAuraIntensity: 0.25,\r\n    threshold: 0.5,\r\n    discard: false,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0018, \r\n           animType: \"move\" \r\n        },\r\n        thickness:        \r\n        {\r\n           val1: 2, val2: 4.7,\r\n           animType: \"cosOscillation\",\r\n           loopDuration: 3000\r\n        },\r\n        subAuraIntensity:        \r\n        {\r\n           val1: 0.45, val2: 0.65,\r\n           animType: \"cosOscillation\",\r\n           loopDuration: 6000\r\n        },\r\n        auraIntensity:        \r\n        {\r\n           val1: 0.9, val2: 2.2,\r\n           animType: \"cosOscillation\",\r\n           loopDuration: 3000\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/27-t02-glacialaura.JPG","actorIds":[],"_id":"bAnmKzgSKw1NeAv2"}
{"name":"Hunter's Mark","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/evil-eye-red-1.jpg","tooltip":"Hunter's Mark_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hunter's Mark\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/evil-eye-red-1.jpg","actorIds":[],"_id":"bGPO8p7bHRSXJCml"}
{"name":"Ensnaring Strike","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Ensnaring Strike_Travaran  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Ensnaring Strike\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/spiked-tentacle.svg","actorIds":[],"_id":"bToNyAt6Q4mj5das"}
{"name":"Black Comb","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/blackcomb.png","tooltip":"Black Comb_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Black Comb\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/blackcomb.png","actorIds":[],"_id":"bnmHrn9qKD2LzXTv"}
{"name":"Invisibility ","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Invisibility  ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet TokenUpdate = game.macros.getName(\"TokenUpdate\");\r\nlet hidden = target.data.hidden\r\nif(args[0] === \"on\"){\r\nTokenUpdate.execute(args[1],{\"hidden\":true});\r\n} else {\r\n    TokenUpdate.execute(args[1],{\"hidden\": false});\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fog-sky-2.jpg","actorIds":[],"_id":"boLT2TfFQPS8aPf5"}
{"_id":"bpxhapjQIL2ujZRq","name":"AudioHelper","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"let src = encodeURI(\"music/sfx/example.mp3\");\r\nAudioHelper.play({\r\n  src,\r\n  volume: 1,\r\n  autoplay: true,\r\n  loop: false\r\n}, true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/musical-score.svg","actorIds":[]}
{"name":"Open Beyond Sheet Player","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":false}},"scope":"global","command":"// Here's one for your players if you are using Virtual Tabletop Assets - D&D Beyond Integration:\r\n// Requires https://www.vttassets.com/modules/vtta-dndbeyond with character sheets linked!\r\n\r\nlet popup = () => {\r\n  if (!game.user.character)\r\n      return ui.notifications.error(\"You must first have a character assigned to your user!\");\r\n\r\n  let char = game.user.character;\r\n\r\n  if (!char.data.flags.vtta && !char.data.flags.vtta.dndbeyond && !char.data.flags.vtta.dndbeyond.url)\r\n      return ui.notifications.error(\"Character must be linked with a D&D Beyond sheet!\");\r\n\r\n  let url = char.data.flags.vtta.dndbeyond.url;\r\n  let ratio = window.innerWidth / window.innerHeight;\r\n  let width = Math.round(window.innerWidth * 0.5);\r\n  let height = Math.round(window.innerWidth * 0.5 * ratio);\r\n  const dndBeyondPopup = window.open(\r\n      url,\r\n      \"ddb_sheet_popup\",\r\n      `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\r\n  );\r\n};\r\n\r\npopup();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/dndbeyond.png","actorIds":[],"_id":"c1AiY2Ax3DinZhys"}
{"name":"DoTrapAttack","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"DoTrapAttack ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"// Requires minor-qol to work completely\r\n// Rolls an attack from actor args[0] using item args[1] and display a token args[2]\r\nlet tactor = game.actors.entities.find((a) => a.name === args[0]);\r\nif (!tactor) return `/Whisper GM \"DoTrap: Target token ${args[0]} not found\"`;\r\nlet item = tactor.items.find((i) => i.name === args[1]);\r\nif (!item) return `/Whisper GM \"DoTrap: Item ${args[1]} not found\"`;\r\nlet oldTargets = game.user.targets;\r\ngame.user.targets = new Set();\r\ngame.user.targets.add(token);\r\nitem.rollAttack({\r\n    event: {\r\n        shiftKey: true\r\n    }\r\n});\r\nlet trapToken = canvas.tokens.placeables.find((t) => t.name === args[2]);\r\nif (trapToken) await DynamicEffects.setTokenVisibility(trapToken.id, true);\r\ngame.user.targets = oldTargets;","author":"s7gxOGja1p9WAX4j","img":"imports/icons/wolf-trap.svg","actorIds":[],"_id":"c4ElMI7hLaBA9oTP"}
{"name":"04 - Outline","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"04 - Outline     ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let params = \r\n[{\r\n   filterType: \"outline\",\r\n   filterId: \"myOutline\",\r\n   padding: 10,\r\n   color: 0xEE6035,\r\n   thickness: 1,\r\n   quality: 5,\r\n   animated :\r\n   {\r\n      thickness: \r\n      { \r\n         active: true,\r\n         loopDuration: 800,\r\n         animType: \"syncCosOscillation\",\r\n         val1: 1, \r\n         val2: 6\r\n      }\r\n   }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/04-outline.JPG","actorIds":[],"_id":"cKcLwySUb0A3CECl"}
{"name":"Light Picker","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Light Picker ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let dialogEditor = new Dialog({\r\n  title: `Token Light Picker`,\r\n  content: `Pick the light source the selected token is holding.`,\r\n  buttons: {\r\n    none: {\r\n      label: `None`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 0, \"brightLight\": 0, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    torch: {\r\n      label: `Torch`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 40, \"brightLight\": 20, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    lamp: {\r\n      label: `Lamp`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 45, \"brightLight\": 15, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    bullseye: {\r\n      label: `Bullseye Lantern`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 120, \"brightLight\": 60, \"lightAngle\": 45,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    hoodedOpen: {\r\n      label: `Hooded Lantern (Open)`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 60, \"brightLight\": 30, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    hoodedClosed: {\r\n      label: `Hooded Lantern (Closed)`,\r\n      callback: () => {\r\n        token.update({\"dimLight\": 5, \"brightLight\": 0, \"lightAngle\": 360,});\r\n        dialogEditor.render(true);\r\n      }\r\n    },\r\n    close: {\r\n      icon: \"<i class='fas fa-tick'></i>\",\r\n      label: `Close`\r\n    },\r\n  },\r\n  default: \"close\",\r\n  close: () => {}\r\n});\r\n\r\ndialogEditor.render(true)\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/lantern-flame.svg","actorIds":[],"_id":"cikf68PzoJgR2xIj"}
{"name":"Madness Indefinite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Table (Copy)       ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\n\r\nconst table = game.tables.entities.find(t => t.name === \"Indefinite Madness\");\r\nlet roll = table.roll();\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/mad-scientist.svg","actorIds":[],"_id":"cmVBQSzcJTeI3n5d"}
{"name":"Combat Tracker AC HP","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Combat Tracker AC HP ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Adds the actor's AC to the combat tracker. Then toggles between HP and AC\r\nconst a = \"attributes.ac.value\";\r\nconst b = \"attributes.hp.value\";\r\n\r\nif (game.combat.settings.resource == a) {\r\n  game.settings.set('core', 'combatTrackerConfig', {resource: b, skipDefeated: true});\r\n} else {\r\n  game.settings.set('core', 'combatTrackerConfig', {resource: a, skipDefeated: true});\r\n}\r\nui.combat.updateTrackedResources();\r\n","author":"s7gxOGja1p9WAX4j","img":"icons/svg/sword.svg","actorIds":[],"_id":"dDrH5LuEor0dA4YQ"}
{"name":"Restore token creation","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Restore token creation    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// This will restore your ability (if your player role had it) to drop actors onto a scene to create new tokens.\r\n// This is the complement for the \"Disallow token creation\" macro.\r\n\r\nif (game.disallow_token_creation_id) Hooks.off('preCreateToken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id= 0;","author":"s7gxOGja1p9WAX4j","img":"imports/icons/abstract-037.svg","actorIds":[],"_id":"dMeelgCiHXVRq7Hw"}
{"name":"Snare","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Snare_Meatshield  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Snare\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/lasso.svg","actorIds":[],"_id":"dXBrfutcqCSwKulo"}
{"name":"27 - T04 - Pure Fire (xglow+fire)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"27 - T04 - Pure Fire (xglow+fire)   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fire\",\r\n    filterId: \"myPureFire\",\r\n    intensity: 1,\r\n    color: 0xFFFFFF,\r\n    amplitude: 1,\r\n    time: 0,\r\n    blend: 2,\r\n    fireBlend : 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0024, \r\n        animType: \"move\" \r\n      },\r\n      intensity:\r\n      {\r\n        active:true,\r\n        loopDuration: 15000,\r\n        val1: 0.8,\r\n        val2: 2,\r\n        animType: \"syncCosOscillation\"\r\n      },\r\n      amplitude:\r\n      {\r\n        active:true,\r\n        loopDuration: 4400,\r\n        val1: 1,\r\n        val2: 1.4,\r\n        animType: \"syncCosOscillation\"\r\n      }\r\n      \r\n    }\r\n},\r\n{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myPureFireShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myPureFireAura\",\r\n    auraType: 2,\r\n    color: 0x903010,\r\n    thickness: 9.8,\r\n    scale: 4.,\r\n    time: 0,\r\n    auraIntensity: 2,\r\n    subAuraIntensity: 1.5,\r\n    threshold: 0.40,\r\n    discard: true,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0027, \r\n           animType: \"move\" \r\n        },\r\n        thickness:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"cosOscillation\", \r\n           val1:2, \r\n           val2:5\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/27-t04-purefire-xglowfire.JPG","actorIds":[],"_id":"e8qpzANFOPQ80Yv9"}
{"name":"14 - Remove Shadow","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"14 - Remove Shadow  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// this simple filter remove pixels with a certain amount of alpha\r\n// it can be useful to remove shadows before using glow or outline filters.\r\n\r\nlet params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myZap\",\r\n    alphaTolerance: 0.45\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/14-removeshadow.JPG","actorIds":[],"_id":"eE0gQdaGe98Xjp9S"}
{"name":"Retrieve Arrows","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"imports/Misc/retrieve-arrow.jpg","tooltip":"Retrieve Arrows ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"if (!actor) {\r\n    ui.notifications.warn(`no actor selected`);\r\n    return;\r\n}\r\nlet ammoDic = actor.getFlag(\"world\", \"fired-arrow\");\r\nlet firedAmmo = ammoDic.ammoAmount || 0;\r\nlet consumableName = ammoDic.ammoName;\r\n\r\nlet recover = false;\r\nlet destroy = false;\r\n\r\nnew Dialog({\r\n  title: `Recover Fired Ammo`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>${consumableName} Fired: ${firedAmmo}</label>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Recover ammo`,\r\n      callback: () => recover = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Lose unrecovered`,\r\n      callback: () => destroy = true\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (recover) {\r\n        let recoveredAmmo = Math.floor(firedAmmo / 2) || 0;\r\n        ChatMessage.create({\r\n            user: game.user._id,\r\n            speaker: { actor: actor, alias: actor.name },\r\n            content: `has recovered ${recoveredAmmo} ammo<br>`,\r\n            type: CONST.CHAT_MESSAGE_TYPES.OTHER\r\n        });\r\n\r\n        let updates = [];\r\n        let item = actor.items.find(i => i.name === consumableName);\r\n        updates.push({ \"_id\": item._id, \"data.quantity\": item.data.data.quantity + recoveredAmmo });\r\n        actor.updateEmbeddedEntity(\"OwnedItem\", updates);\r\n    } \r\n    if(recover || destroy) {\r\n        let ammoFiredInfo = { ammoName : consumableName, ammoAmount : 0};\r\n        actor.setFlag(\"world\", \"fired-arrow\", ammoFiredInfo);\r\n        actor.unsetFlag(\"world\", \"fired-arrow\");\r\n    }\r\n  }\r\n}).render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/Misc/retrieve-arrow.jpg","actorIds":[],"_id":"eLPHCFMT2FYUwP1r"}
{"name":"E - Click, click, click and click !","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"E - Click, click, click and click !  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let glowFunc = async function() {\r\n\r\n   const myTokens = canvas.tokens.placeables;\r\n\r\n   for (const myToken of myTokens ){\r\n       if (myToken.TMFXhasFilterId(\"funnyAlternateGlow\")) {\r\n           await myToken.TMFXdeleteFilters(\"funnyAlternateGlow\");\r\n       } else {\r\n           let params =\r\n           [{\r\n               filterType: \"glow\",\r\n               filterId: \"funnyAlternateGlow\",\r\n               color: Math.floor(Math.random() * 16777215),\r\n               animated: null\r\n           }];\r\n           await myToken.TMFXaddUpdateFilters(params);\r\n       }\r\n   }\r\n};\r\n\r\nglowFunc();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/E-Click-Click-Click.JPG","actorIds":[],"_id":"edjeqErAHiZN79CW"}
{"name":"Shadow Blade","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/violet_04.jpg","tooltip":"Shadow Blade_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Shadow Blade\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/violet_04.jpg","actorIds":[],"_id":"eolYluHw5tnaatkT"}
{"name":"Protection from Evil and Good","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-sky-2.jpg","tooltip":"Protection from Evil and Good_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Protection from Evil and Good\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-sky-2.jpg","actorIds":[],"_id":"eucOGSjtRh2Elz7M"}
{"name":"Display Attribute Lists for Selected Actor","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/book.svg","tooltip":"Display Attribute Lists for Selected Actor   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"ShowActorAttributeData(actor);","author":"s7gxOGja1p9WAX4j","img":"icons/svg/book.svg","actorIds":[],"_id":"fDC0m3defZT6idon"}
{"name":"18 - Electric","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"18 - Electric    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Because the shader is dynamically compiled,\r\n// intensity is a one time init and can't be updated.\r\n// you must delete the filters to \"change\" it.\r\nlet params =\r\n[{\r\n    filterType: \"electric\",\r\n    filterId: \"myElectric\",\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 1,\r\n    intensity: 5,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0020, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/electric.png","actorIds":[],"_id":"fOpULKGib8gyfN9t"}
{"name":"Sending Stones","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/sending_stones.jpeg","tooltip":"Sending Stones_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Sending Stones\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/sending_stones.jpeg","actorIds":[],"_id":"fh97lRb6b237iSE0"}
{"name":"ranged-attack-generic","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{},"scope":"global","command":"let updates = [];\r\nlet consumed = \"\";\r\nif (!actor) {\r\n    ui.notifications.warn(`no actor selected`);\r\n    return;\r\n}\r\n\r\nlet weaponName = args[0];\r\nlet consumableName = args[1];\r\nlet item = actor.items.find(i => i.name === consumableName);\r\n\r\nif (!item) {\r\n    ui.notifications.warn(`no ammo named ${consumableName} found`);\r\n    return;\r\n}\r\n\r\nif (item.data.data.quantity < 1) {\r\n    ui.notifications.warn(`${game.user.name} not enough ${consumableName} remaining`);\r\n} else {\r\n    updates.push({ \"_id\": item._id, \"data.quantity\": item.data.data.quantity - 1 });\r\n    consumed += `${item.data.data.quantity - 1} arrows left<br>`;\r\n\r\n    MinorQOL.doRoll(event, weaponName, { type: \"weapon\", versatile: false });\r\n    AudioHelper.play({ src: \"sounds/weapons-impacts/Arrow 1.mp3\", volume: 0.8, autoplay: true, loop: false }, true);\r\n    let ammoDic = actor.getFlag(\"world\", \"fired-arrow\");\r\n    let ammoFired = 1;\r\n\r\n    if (ammoDic) {\r\n        console.log(ammoDic);\r\n        ammoFired = ammoDic.ammoAmount + 1 || 1;\r\n    }\r\n\r\n    let ammoFiredInfo = { ammoName: consumableName, ammoAmount: ammoFired };\r\n    actor.setFlag(\"world\", \"fired-arrow\", ammoFiredInfo);\r\n}\r\n\r\nif (updates.length > 0) {\r\n    actor.updateEmbeddedEntity(\"OwnedItem\", updates);\r\n\r\n    ChatMessage.create({\r\n        user: game.user._id,\r\n        speaker: { actor: actor, alias: actor.name },\r\n        content: consumed,\r\n        type: CONST.CHAT_MESSAGE_TYPES.OTHER\r\n    });\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/Misc/bow-icon.png","actorIds":[],"_id":"fzI45UcKrX2rneyT"}
{"name":"Summon Fey Spirit (UA)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/feyspirit.jpg","tooltip":"Summon Fey Spirit (UA)_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Summon Fey Spirit (UA)\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/feyspirit.jpg","actorIds":[],"_id":"fzxPCezWd20Z1nF6"}
{"name":"C - Electric Multi-Filters","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"C - Electric Multi-Filters   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// works better with tokens or tiles with no shadows\r\nlet params =\r\n[{\r\n    filterType: \"shadow\",\r\n    blur: 2,\r\n    quality: 5,\r\n    distance: 0,\r\n    alpha: 1.,\r\n    padding: 100,\r\n    color: 0xFFFFFF,\r\n    animated:\r\n    {\r\n        blur:     \r\n        { \r\n           active: true, \r\n           loopDuration: 500, \r\n           animType: \"syncCosOscillation\", \r\n           val1: 2, \r\n           val2: 4\r\n        },\r\n     }\r\n},\r\n{\r\n    filterType: \"electric\",\r\n    color: 0xFFFFFF,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 5,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0020, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/C-ElectricMultiFilters.JPG","actorIds":[],"_id":"g1OPDIwLHtYwsxKB"}
{"name":"F - 05 - Import FX Presets (URL)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"F - 05 - Import FX Presets (URL)  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Replace the dummy url with a valid url that points to a Token Magic FX presets file (json)\r\n// Open the console (F12) to check the state of the import\r\n// You can configure in the module option panel the \"overwrite mode on import\"\r\n\r\n// TokenMagic.importPresetLibraryFromURL(\"https://presets-to-import-url\");\r\n\r\nui.notifications.warn(\"Open this macro and read the instructions.\");","author":"s7gxOGja1p9WAX4j","img":"imports/icons/distress-signal.svg","actorIds":[],"_id":"gV1XGQK8TUm6b7b8"}
{"name":"Leave Axeholm3","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro     ","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/narrate It seems to smile\r\n\r\nIt's razor sharp teeth gleaming in the sunlight\r\n\r\nThen it flys off ... heading towards the mountains\r\n\r\ntaunting you to come and get it...\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/black-book.svg","actorIds":[],"_id":"gVLtAQHeQkrrNotp"}
{"name":"19 - Fire","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"19 - Fire   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"fire\",\r\n    filterId: \"myFire\",\r\n    intensity: 1,\r\n    color: 0xFFFFFF,\r\n    amplitude: 1,\r\n    time: 0,\r\n    blend: 2,\r\n    fireBlend : 1,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: -0.0024, \r\n        animType: \"move\" \r\n      },\r\n      intensity:\r\n      {\r\n        active:true,\r\n        loopDuration: 15000,\r\n        val1: 0.8,\r\n        val2: 2,\r\n        animType: \"syncCosOscillation\"\r\n      },\r\n      amplitude:\r\n      {\r\n        active:true,\r\n        loopDuration: 4400,\r\n        val1: 1,\r\n        val2: 1.4,\r\n        animType: \"syncCosOscillation\"\r\n      }\r\n      \r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/fire.png","actorIds":[],"_id":"gclRsThTYONa46ln"}
{"name":"Toll the Dead","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/inventory/bell_brass.jpg","tooltip":"Toll the Dead_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Toll the Dead\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/inventory/bell_brass.jpg","actorIds":[],"_id":"gjwCGQ3hywMzjJN2"}
{"name":"Prestidigitation","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/explosion-royal-1.jpg","tooltip":"Prestidigitation_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Prestidigitation\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/explosion-royal-1.jpg","actorIds":[],"_id":"gkO7U5jLOu6dWZBY"}
{"name":"Primal Savagery","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Primal Savagery_Travaran  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Primal Savagery\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/fangs.svg","actorIds":[],"_id":"gqLexU7uWJEZEniB"}
{"name":"Darkvision","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/evil-eye-red-1.jpg","tooltip":"Darkvision_Albrek ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Darkvision\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/evil-eye-red-1.jpg","actorIds":[],"_id":"grfNsmY7wnUfyQyH"}
{"name":"08 - Old film","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"08 - Old film   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// special : the OldFilm filter need an Outline filter to be contained (or else, it will affect all the container)\r\nlet params =\r\n[{\r\n    filterType: \"oldfilm\",\r\n    filterId: \"myOldfilm\",\r\n    sepia: 0.6,\r\n    noise: 0.2,\r\n    noiseSize: 1.0,\r\n    scratch: 0.8,\r\n    scratchDensity: 0.5,\r\n    scratchWidth: 1.2,\r\n    vignetting: 0.9,\r\n    vignettingAlpha: 0.6,\r\n    vignettingBlur: 0.2,\r\n    animated:\r\n    {\r\n        seed:        \r\n        { \r\n           active: true, \r\n           animType: \"randomNumber\", \r\n           val1: 0, \r\n           val2: 1 \r\n        },\r\n        vignetting:  \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\" , \r\n           loopDuration: 2000, \r\n           val1: 0.2, \r\n           val2: 0.4 }\r\n    }\r\n},\r\n{\r\n    filterType: \"outline\",\r\n    filterId: \"oldfilmOutline\",\r\n    color: 0x000000,\r\n    thickness: 0,\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/old-film.png","actorIds":[],"_id":"gt99UUxcmA4vR0vT"}
{"name":"Remove concentrating","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.cub.removeCondition(\"Concentrating\", token);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/helmet-head-shot.svg","actorIds":[],"_id":"gvEq62tMH1yoPTHi"}
{"name":"F - 04 - Import FX Presets (local)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"F - 04 - Import FX Presets (local) ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Open the console (F12) to check the state of the import\r\n// You can configure in the module option panel the \"overwrite mode on import\"\r\n\r\nTokenMagic.importPresetLibrary();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/wax-tablet.svg","actorIds":[],"_id":"gxiOSmc1TBvTngVc"}
{"name":"Madness Long Term","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Table (Copy)     ","colour":"#ff0000","trigger":"","module":"macro-marker"}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\n\r\nconst table = game.tables.entities.find(t => t.name === \"Long-Term Madness\");\r\nlet roll = table.roll();\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/warlock-eye.svg","actorIds":[],"_id":"h3CpyrIOUofcDA7k"}
{"name":"D - Auto-Destroy Example","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"D - Auto-Destroy Example  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"bevel\",\r\n    autoDestroy: true,\r\n    rotation: 0,\r\n    thickness: 5,\r\n    lightColor: 0x00FF00,\r\n    lightAlpha: 0.7,\r\n    shadowColor: 0xFF0000,\r\n    shadowAlpha: 0.4,\r\n    animated :\r\n    {\r\n       rotation: \r\n       { \r\n          active: true,\r\n          clockWise: true, \r\n          loopDuration: 1000,\r\n          loops: 5,\r\n          animType: \"rotation\"\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addFiltersOnSelected(params);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/D-AutoDestroyExample.JPG","actorIds":[],"_id":"hKLjhIigSTiwWXvU"}
{"name":"Greatsword","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/sword-great.jpg","tooltip":"Greatsword_Meatshield ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Greatsword\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/sword-great.jpg","actorIds":[],"_id":"hS8WgY8FqYmdhxbH"}
{"name":"Chromatic Orb","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Chromatic Orb_Meatshield  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Chromatic Orb\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/unstable-orb.svg","actorIds":[],"_id":"hYHtmxsa6haQ1qbp"}
{"name":"Cure Wounds","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/heal-jade-1.jpg","tooltip":"Cure Wounds_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Cure Wounds\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/heal-jade-1.jpg","actorIds":[],"_id":"hdZoFsyEizyZBmHw"}
{"name":"Handaxe","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/handaxe.jpg","tooltip":"Handaxe_Bramdahr ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Handaxe\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/handaxe.jpg","actorIds":[],"_id":"hqNOyPGMhjgBxO18"}
{"name":"Elena Lightbringer Dentist IV","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/lightbringer.jpg","tooltip":"Elena Lightbringer Dentist IV_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Elena Lightbringer Dentist IV\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/lightbringer.jpg","actorIds":[],"_id":"htiPL9Aegew6Ysqo"}
{"name":"Monk Ki","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"/**\r\n * Monk Ki Point spender\r\n * \r\n * This macro will prompt which Feature you want to spend Ki points on.\r\n * \r\n * Flurry of Blows: Automatically cast two Unarmed Strike's\r\n * Stunning Strike: Automatically show the saving throw DC\r\n * Deflect Missiles: Automatically show the damage reduction\r\n */\r\n(async () => {\r\n    const kiName = \"Ki Points\";\r\n    const errNoMonkToken = \"Please select a single monk token.\";\r\n\r\n    const sendChat = async (msg) => {\r\n        let chatData = {\r\n            user: game.user.id,\r\n            speaker: ChatMessage.getSpeaker(),\r\n            content: msg,\r\n        };\r\n        ChatMessage.create(chatData, {});\r\n    }\r\n\r\n    if (!actor) {\r\n        ui.notifications.warn(errNoMonkToken);\r\n        return\r\n    }\r\n\r\n    let monk = actor.items.find(i => i.name === 'Monk' && i.type === 'class');\r\n    if (!monk) {\r\n        ui.notifications.warn(errNoMonkToken);\r\n        return\r\n    }\r\n\r\n    let monkLevels = monk.data.data.levels || 20;\r\n    //let subClass = monk.data.data.subclass;\r\n\r\n    if (monkLevels < 2) {\r\n        ui.notifications.warn('You must have a least 2 Monk levels to use ki points.');\r\n        return\r\n    }\r\n\r\n    class KiFeature {\r\n        /**\r\n         * @param {string} name\r\n         * @param {string} fallbackText\r\n         * @param {number} requireLevel\r\n         * @param {function} action\r\n         * @param {function} appendTemplate\r\n         * @param {number} kiCost\r\n         */\r\n        constructor(name, fallbackText, requireLevel, action, appendTemplate, kiCost) {\r\n            this.name = name;\r\n            this.fallbackText = fallbackText;\r\n            this.requireLevel = requireLevel;\r\n            this.kiCost = kiCost || 1;\r\n            if (action) {\r\n                this.action = action;\r\n            }\r\n            if (appendTemplate) {\r\n                this.appendTemplate = appendTemplate;\r\n            }\r\n        }\r\n\r\n        render(allowHigher) {\r\n            let entry = null;\r\n\r\n            const pack = game.packs.get(\"dnd5e.classfeatures\");\r\n            if (!pack) {\r\n                console.warn('Could not find \"dnd5e.classfeatures\" compendium.');\r\n            } else {\r\n                entry = pack.index.find(e => e.name === this.name);\r\n            }\r\n\r\n            if (!allowHigher && this.requireLevel && monkLevels && this.requireLevel > monkLevels) {\r\n                ui.notifications.warn(`You need to have ${this.requireLevel} monk levels, you only have ${monkLevels}.`)\r\n                return\r\n            }\r\n\r\n            if (entry) {\r\n                pack.getEntity(entry._id).then(o => {\r\n                    let template = `@Compendium[dnd5e.classfeatures.${entry._id}]{${this.name}}\r\n                    ${o.data.data.description.value}`;\r\n                    if (this.appendTemplate) {\r\n                        template += '\\n\\n' + this.appendTemplate();\r\n                    }\r\n                    sendChat(template);\r\n                    if (this.action) {\r\n                        this.action();\r\n                    }\r\n                });\r\n            } else {\r\n                console.warn(`Could not find \"${this.name}\" entry in compendium.`);\r\n                let template = this.fallbackText;\r\n                if (this.appendTemplate) {\r\n                    template += '\\n\\n' + this.appendTemplate();\r\n                }\r\n                sendChat(template);\r\n                if (this.action) {\r\n                    this.action();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n   const openHand = !!actor.items.find(o => o.data.name === 'Open Hand Technique') ? `<br />In addition, you can impose one of the following: <ul><li>It must succeed on a <b>Dexterity</b> saving throw or be knocked prone.</li><li>It must make a <b>Strength</b> saving throw. If it fails, you can push it up to 15 feet away from you.</li><li>It can’t take reactions until the end of your next turn.</li></ul> Saving throw <b>DC ${10 + actor.data.data.abilities.wis.mod}</b>` : \"\";\r\n\r\n    const features = [\r\n        new KiFeature(\"Ki: Flurry of Blows\",\r\n            `Immediately after you take the <b>Attack</b> action on your turn, you can spend 1 ki point to make two unarmed strikes as a bonus action. ${openHand}`,\r\n            2,\r\n            function () {\r\n                // Automatically roll two Unarmed Strike attacks\r\n                let strike = actor.items.find(o => o.data.name === 'Unarmed Strike' && o.data.labels.activation === '1 Action')\r\n                if (strike) {\r\n                    strike.roll();\r\n                    strike.roll();\r\n                }\r\n            }),\r\n        new KiFeature(\"Ki: Patient Defense\",\r\n            \"You can spend 1 ki point to take the <b>Dodge</b> action as a bonus action on your turn.\",\r\n            2),\r\n        new KiFeature(\"Ki: Step of the Wind\",\r\n            \"You can spend 1 ki point to take the <b>Disengage</b> or <b>Dash</b> action as a bonus action on your turn, and your jump distance is doubled for the turn.\",\r\n            2),\r\n        new KiFeature(\"Deflect Missiles\",\r\n            `Starting at 3rd level, you can use your reaction to deflect or catch the missile when you are hit by a ranged weapon attack. When you do so, the damage you take from the attack is reduced by 1d10 + your Dexterity modifier + your monk level. <br />\r\n\r\n        If you reduce the damage to 0, you can catch the missile if it is small enough for you to hold in one hand and you have at least one hand free. If you catch a missile in this way, you can spend 1 ki point to make a ranged attack with the weapon or piece of ammunition you just caught, as part of the same reaction. You make this attack with proficiency, regardless of your weapon proficiencies, and the missile counts as a monk weapon for the attack, which has a normal range of 20 feet and a long range of 60 feet.`,\r\n            3,\r\n            null,\r\n            function () {\r\n                return `Damage reduction: [[/r 1d10+${actor.data.data.abilities.dex.mod}+${monkLevels}]]`;\r\n            }),\r\n        new KiFeature(\"Ki: Stunning Strike\",\r\n            \"Starting at 5th level, you can interfere with the flow of ki in an opponent’s body. When you hit another creature with a melee weapon attack, you can spend 1 ki point to attempt a stunning strike. The target must succeed on a Constitution saving throw or be <b>stunned</b> until the end of your next turn.\",\r\n            5,\r\n            null,\r\n            function () {\r\n                // Append the saving throw DC to the chat message\r\n                return `CON saving throw (DC [[8+${actor.data.data.abilities.wis.mod}+@attributes.prof]])`;\r\n            }),\r\n        new KiFeature(\"Ki: Diamond Soul\",\r\n            `Beginning at 14th level, your mastery of ki grants you proficiency in all saving throws.\r\n\r\n        Additionally, whenever you make a saving throw and fail, you can spend 1 ki point to reroll it and take the second result.`,\r\n            14),\r\n        new KiFeature(\"Ki: Empty Body\",\r\n            `Beginning at 18th level, you can use your action to spend 4 ki points to become invisible for 1 minute. During that time, you also have resistance to all damage but force damage.\r\n\r\n        Additionally, you can spend 8 ki points to cast the astral projection spell, without needing material components. When you do so, you can’t take any other creatures with you.`,\r\n            18,\r\n            null,\r\n            function () {\r\n                return \"Note: 4 ki points have been spent. Adjust manually if casting astral projection spell.\";\r\n            },\r\n            4),\r\n    ];\r\n\r\n    const consumeKi = (feature, allowNegative, allowHigher) => {\r\n        let hasAvailableResource = false;\r\n        let selected = features.find(o => o.name == feature);\r\n        let kiCost = selected.kiCost || 1;\r\n\r\n        // Look for Resources under the Core actor data\r\n        let resourceKey = Object.keys(actor.data.data.resources).filter(k => actor.data.data.resources[k].label === kiName).shift();\r\n        if (resourceKey && (actor.data.data.resources[resourceKey].value >= kiCost || allowNegative)) {\r\n            hasAvailableResource = true;\r\n            actor.data.data.resources[resourceKey].value -= kiCost;\r\n        }\r\n\r\n        // Look for Ki Points Feat that has uses\r\n        actor.items.filter(i => i.data.name === kiName && i.data.hasUses && (i.data.data.uses.value >= kiCost || allowNegative)).forEach(i => {\r\n            hasAvailableResource = true;\r\n            i.data.data.uses.value -= kiCost\r\n        })\r\n\r\n        if (!hasAvailableResource) {\r\n            ui.notifications.warn(`${actor.name} does not have any ${kiName} left!`);\r\n            return false;\r\n        }\r\n        if (actor.sheet.rendered) {\r\n            // Update the actor sheet if it is currently open\r\n            actor.render(true);\r\n        }\r\n\r\n        if (selected) {\r\n            selected.render(allowHigher);\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    (async () => {\r\n        let template = `\r\n        <form>\r\n            <div class=\"form-group\">\r\n                <label>Select feature:</label>\r\n                <select id=\"feature\" name=\"feature\">`\r\n        features.filter(o => o.requireLevel <= monkLevels).forEach(o => {\r\n            template += `<option value=\"${o.name}\">${o.name}</option>`;\r\n        });\r\n        template += `</select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label>Allow consuming Ki into negative? <input type=\"checkbox\" id=\"allow-negative\" name=\"allow-negative\" value=\"1\"></label>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label>Allow consuming Ki feats of higher level? <input type=\"checkbox\" id=\"allow-higher\" name=\"allow-higher\" value=\"1\"></label>\r\n            </div>\r\n        </form>`;\r\n        new Dialog({\r\n            title: `Monk Ki Point Spender`,\r\n            content: template,\r\n            buttons: {\r\n                yes: {\r\n                    icon: \"<i class='fas fa-check'></i>\",\r\n                    label: `Apply`,\r\n                    callback: (html) => {\r\n                        let feature = html.find('#feature')[0].value;\r\n                        let allowNegative = html.find('#allow-negative')[0].checked;\r\n                        let allowHigher = html.find('#allow-higher')[0].checked;\r\n                        consumeKi(feature, allowNegative, allowHigher);\r\n                    }\r\n                },\r\n                no: {\r\n                    icon: \"<i class='fas fa-times'></i>\",\r\n                    label: `Cancel`\r\n                },\r\n            },\r\n            default: \"yes\"\r\n        }).render(true);\r\n    })();\r\n})()\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.5_03.png","actorIds":[],"_id":"iB9MNjcnouxp4I6P"}
{"name":"Lantern, Hooded","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/inventory/lantern.jpg","tooltip":"Lantern, Hooded_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Lantern, Hooded\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/inventory/lantern.jpg","actorIds":[],"_id":"iBtKAQra5Vzdy83D"}
{"name":"Breathing Lights","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Breathing Lights ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Courtesy of @ohporter\r\n// Cause lightsources to \"breathe,\" expanding and contracting.\r\n(async () => {\r\n    let min = 5;\r\n    let max = 10;\r\n    if (game.pulsatingLights) {\r\n      game.pulsatingLights = false;\r\n    } else {\r\n      game.pulsatingLights = true;\r\n      let glyphLights = [];\r\n      let glyphColor = \"#5940b5\"\r\n      let scene = game.scenes.active;\r\n  \r\n      canvas.lighting.placeables.forEach(l => { if (l.data.tintColor === glyphColor && l.scene === scene) glyphLights.push(l.id) })\r\n  \r\n      const updates = []\r\n  \r\n      let radius = min;\r\n      let increment = true;\r\n      let interval = setInterval(async () => {\r\n        glyphLights.forEach(id => {\r\n          updates.push({ _id: id, dim: radius, bright: radius/2});\r\n        })\r\n        await scene.updateEmbeddedEntity(\"AmbientLight\", updates);\r\n  \r\n        if (increment) {radius += 1} else {radius -= 1};\r\n        if (radius === max) {increment = false};\r\n        if (radius === min) {increment = true};\r\n        if (!scene.active || !game.pulsatingLights) {\r\n          // Reset to default glow\r\n          glyphLights.forEach(id => {\r\n            updates.push({ _id: id, dim: min, bright: 0});\r\n          })\r\n          await scene.updateEmbeddedEntity(\"AmbientLight\", updates);\r\n          clearInterval(interval);\r\n        }\r\n      }, 200);\r\n    }\r\n  })()","author":"s7gxOGja1p9WAX4j","img":"imports/icons/light-bulb.svg","actorIds":[],"_id":"iLcraenGA6pHIXsX"}
{"name":"Shortsword","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/sword-short.jpg","tooltip":"Shortsword_Meatshield ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Shortsword\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/sword-short.jpg","actorIds":[],"_id":"iN79uSNa8KWeXOvx"}
{"name":"02 - Adjustment","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"02 - Adjustment   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"adjustment\",\r\n    filterId: \"myAdjust\",\r\n    saturation: 1.5,\r\n    brightness: 1.5,\r\n    contrast: 2,\r\n    gamma: 2,\r\n    red: 4,\r\n    green: 0.25,\r\n    blue: 0.25,\r\n    alpha: 1,\r\n    animated:\r\n    {\r\n        alpha: \r\n        { \r\n           active: true, \r\n           loopDuration: 5000, \r\n           animType: \"syncCosOscillation\",\r\n           val1: 0.15,\r\n           val2: 1 }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/adjustment.png","actorIds":[],"_id":"iP32Jwr5IC9rhcyh"}
{"name":"Show Modules","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Show Modules  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Show Modules - Shows currently installed modules in foundry. Added on behalf of @vance\r\n */\r\nlet mods = '';\r\ngame.modules.forEach(m => {\r\n  let a = m.active ? 'Enabled' : 'Disabled';\r\n  mods = mods.concat(`${m.id}: ${a}\\n`);\r\n});\r\n\r\nlet d = new Dialog({\r\n  title: `Enabled Mods`,\r\n  content: `<textarea style=\"height: 500px;\" type=\"text\" id=\"modslist\" name=\"modslist\">${mods}</textarea>`,\r\n  buttons: {\r\n    copy: {\r\n      label: `Copy to clipboard`,\r\n      callback: () => {\r\n        $(\"#modslist\").select();\r\n        document.execCommand('copy');\r\n      }\r\n    },\r\n    close: {\r\n      icon: \"<i class='fas fa-tick'></i>\",\r\n      label: `Close`\r\n    },\r\n  },\r\n  default: \"close\",\r\n  close: () => {}\r\n});\r\n\r\nd.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/gears.svg","actorIds":[],"_id":"itqEj2RqmG4wZUq9"}
{"name":"Pole of Collapsing","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/quarterstaff.jpg","tooltip":"Pole of Collapsing_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Pole of Collapsing\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/quarterstaff.jpg","actorIds":[],"_id":"j08ZKw2j203QDfBq"}
{"name":"Detect Evil and Good","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/air-burst-sky-2.jpg","tooltip":"Detect Evil and Good_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Detect Evil and Good\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/air-burst-sky-2.jpg","actorIds":[],"_id":"j7MFpbdgCzVdd6TU"}
{"name":"Token Vision Config - About Time","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Token Vision Config - About Time ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings, based on lighting sources from D&D 5e. Has a dependency on About Time by Tim Posney.\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n  ui.notifications.error(\"Please select a token\");\r\n\r\nlet namedfields = (...fields) => {\r\n  return (...arr) => {\r\n    var obj = {};\r\n    fields.forEach((field, index) => {\r\n      obj[field] = arr[index];\r\n    });\r\n    return obj;\r\n  };\r\n};\r\n\r\n// Very ugly automated construction below. DRY, but at what cost?\r\nlet VisionType = namedfields('name', 'dim', 'bright');\r\nvar visions = (() => {\r\n  return [\r\n    VisionType('Leave Unchanged', null, null),\r\n    VisionType('Self', 5, 0),\r\n    VisionType('Devil\\'s Sight', 0, 120)\r\n  ].concat(...[...Array(6).keys()].map(x => (x+1)*30).map(n => {\r\n    return VisionType(`Darkvision (${n} feet)`, n, 0);\r\n  }));\r\n})();\r\n\r\nlet LightSource = namedfields('name', 'dim', 'bright', 'angle', 'lockRotation')\r\nvar lightSources = [\r\n  LightSource('Leave Unchanged', null, null, null, null),\r\n  LightSource('None', 0, 0, 360, null),\r\n  LightSource('Candle', 10, 5, 360, null),\r\n  LightSource('Torch / Light Cantrip', 40, 20, 360, null),\r\n  LightSource('Lamp', 45, 15, 360, null),\r\n  LightSource('Hooded Lantern', 60, 30, 360, null),\r\n  LightSource('Hooded Lantern (Dim)', 5, 0, 360, null),\r\n  LightSource('Bullseye Lantern', 120, 60, 52.5, false)\r\n];\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n<form>\r\n  <div class=\"form-group\">\r\n    <label>Vision Type:</label>\r\n    <select id=\"vision-type\" name=\"vision-type\">\r\n      ${\r\n        visions.map((vision, index) => {\r\n          return `\\t<option value=${index}>${vision.name}</option>`;\r\n        }).join('\\n')\r\n      }\r\n    </select>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Light Source:</label>\r\n    <select id=\"light-source\" name=\"light-source\">\r\n      ${\r\n        lightSources.map((lightSource, index) => {\r\n          return `\\t<option value=${index}>${lightSource.name}</option>`;\r\n        }).join('\\n')\r\n      }\r\n    </select>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label>Duration in Minutes:</label>\r\n    <input type=\"number\" id=\"duration\" name=\"duration\" min=\"0\">\r\n  </div>\r\n</form>\r\n`,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionIndex = parseInt(html.find('[name=\"vision-type\"]')[0].value) || 0;\r\n        let lightIndex = parseInt(html.find('[name=\"light-source\"]')[0].value) || 0;\r\n        let duration = parseInt(html.find('[name=\"duration\"]')[0].value) || 0;\r\n\r\n        if (duration > 0) {\r\n          if (game.modules.get(\"about-time\").active != true) {\r\n            ui.notifications.error(\"About Time isn't loaded\");\r\n          } else {\r\n            ((backup) => {\r\n              game.Gametime.doIn({minutes:Math.floor(3 * duration / 4)}, () => {\r\n                ChatMessage.create({\r\n                  user: game.user._id,\r\n                  content: \"The fire burns low...\",\r\n                  speaker: speaker\r\n                }, {});\r\n              });\r\n            })(Object.assign({}, token.data));\r\n            ((backup) => {\r\n              game.Gametime.doIn({minutes:duration}, () => {\r\n                ChatMessage.create({\r\n                  user: game.user._id,\r\n                  content: \"The fire goes out, leaving you in darkness.\",\r\n                  speaker: speaker\r\n                }, {});\r\n                token.update({\r\n                  vision: true,\r\n                  dimSight: backup.dimSight,\r\n                  brightSight: backup.brightSight,\r\n                  dimLight: backup.dimLight,\r\n                  brightLight:  backup.brightLight,\r\n                  lightAngle: backup.lightAngle,\r\n                  lockRotation: backup.lockRotation\r\n                });\r\n              });\r\n            })(Object.assign({}, token.data));\r\n          }\r\n        }\r\n\r\n        // Configure new token vision\r\n        let dimSight = visions[visionIndex].dim ?? token.data.dimSight;\r\n        let brightSight = visions[visionIndex].bright ?? token.data.brightSight;\r\n        let dimLight = lightSources[lightIndex].dim ?? token.data.dimLight;\r\n        let brightLight = lightSources[lightIndex].bright ?? token.data.brightLight;\r\n        let lightAngle = lightSources[lightIndex].angle ?? token.data.lightAngle;\r\n        let lockRotation = lightSources[lightIndex].lockRotation ?? token.data.lockRotation;\r\n\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/candlebright.svg","actorIds":[],"_id":"jDa9Mfe5zjTsSBEg"}
{"name":"Ray of Frost","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Ray of Frost\");","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/beam-blue-1.jpg","actorIds":[],"_id":"jZRdoBvuw3tCTG78"}
{"name":"Greycleff Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Greycleff\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/dndbeyond/Greycleff.jpeg","actorIds":[],"_id":"jt0CNonk1rwcydYD"}
{"name":"Fireball","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fireball-red-2.jpg","tooltip":"Fireball_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Fireball\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fireball-red-2.jpg","actorIds":[],"_id":"kWItnKSqocF9R886"}
{"name":"11 - Blur","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"11 - Blur    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"blur\",\r\n    filterId: \"myBlur\",\r\n    padding: 10,\r\n    quality: 4.0,\r\n    blur: 0,\r\n    blurX: 0,\r\n    blurY: 0,\r\n    animated:\r\n    {\r\n        blurX: \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\", \r\n           loopDuration: 500, \r\n           val1: 0, \r\n           val2: 6\r\n        },\r\n        blurY: \r\n        { \r\n           active: true, \r\n           animType: \"syncCosOscillation\", \r\n           loopDuration: 750, \r\n           val1: 0, \r\n           val2: 6}\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/blur.png","actorIds":[],"_id":"kWwLIgX0WWfSYh6F"}
{"name":"23 - T02 - Chaotic Images","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"23 - T02 - Chaotic Images     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// This is an extreme example...\r\nlet params =\r\n[{\r\n    filterType: \"images\",\r\n    filterId: \"myChaoticImages\",\r\n    time: 0,\r\n    nbImage: 4,\r\n    alphaImg: 1.0,\r\n    alphaChr: 0.0,\r\n    blend: 4,\r\n    ampX: 0.10,\r\n    ampY: 0.10,\r\n    padding: 80,\r\n    animated :\r\n    {\r\n      time: \r\n      { \r\n        active: true, \r\n        speed: 0.0010, \r\n        animType: \"move\" \r\n      },\r\n      ampX:\r\n      {\r\n        active: true,\r\n        val1: 0.00,\r\n        val2: 0.30,\r\n        chaosFactor: 0.03,\r\n        animType: \"syncChaoticOscillation\",\r\n        loopDuration: 2000\r\n      },\r\n      ampY:\r\n      {\r\n        active: true,\r\n        val1: 0.00,\r\n        val2: 0.30,\r\n        chaosFactor: 0.04,\r\n        animType: \"syncChaoticOscillation\",\r\n        loopDuration: 1650\r\n      },\r\n      alphaChr:        \r\n      { \r\n        active: true, \r\n        animType: \"randomNumberPerLoop\", \r\n        val1: 0.0, \r\n        val2: 1,\r\n        loopDuration: 250\r\n      },\r\n      alphaImg:        \r\n      { \r\n        active: true, \r\n        animType: \"randomNumberPerLoop\", \r\n        val1: 0.8, \r\n        val2: 1,\r\n        loopDuration: 250\r\n      },\r\n      nbImage:\r\n      {\r\n        active: true,\r\n        val1: 1,\r\n        val2: 9,\r\n        animType: \"syncSinOscillation\",\r\n        loopDuration: 1400\r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/23-t02-chaoticimages.JPG","actorIds":[],"_id":"kymgABxhteAHcCQN"}
{"name":"Second-Wind","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Second-Wind ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"  \r\n(async () => {\r\n    const charData = game.user.character;\r\n    const fighterLvl = charData.items.find(i=>i.name===\"Fighter\").data.data.levels;\r\n    game.dnd5e.rollItemMacro(\"Second Wind\").then(() =>{\r\n        const SWroll = new Roll(`1d10+${fighterLvl}`);\r\n        SWroll.roll();\r\n        SWroll.toMessage({\r\n            user : game.user._id,\r\n            speaker : speaker,\r\n            flavor : \"Second Wind Dice\"\r\n        });\r\n        const actorUpdate ={\r\n            data :{\r\n                attributes:{\r\n                    hp :{\r\n                        value : Math.clamped(\r\n                            charData.data.data.attributes.hp.value + SWroll.total,\r\n                            charData.data.data.attributes.hp.min,\r\n                            charData.data.data.attributes.hp.max\r\n                        )\r\n                    },\r\n                },\r\n            },\r\n        };\r\n        charData.update(actorUpdate);\r\n    });\r\n})();","author":"s7gxOGja1p9WAX4j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"lIVObKUWLnGwyCON"}
{"name":"27 - T01 - Burning Aura (xglow)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"27 - T01 - Burning Aura (xglow)   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"zapshadow\",\r\n    filterId: \"myZapShadow\",\r\n    alphaTolerance: 0.50\r\n},\r\n{\r\n    filterType: \"xglow\",\r\n    filterId: \"myBurningAura\",\r\n    auraType: 2,\r\n    color: 0x903010,\r\n    thickness: 9.8,\r\n    scale: 4.,\r\n    time: 0,\r\n    auraIntensity: 2,\r\n    subAuraIntensity: 1.5,\r\n    threshold: 0.40,\r\n    discard: true,\r\n    animated:\r\n    {\r\n        time : \r\n        {  \r\n           active: true,\r\n           speed: 0.0027, \r\n           animType: \"move\" \r\n        },\r\n        thickness:\r\n        {\r\n           active: true,\r\n           loopDuration: 3000, \r\n           animType: \"cosOscillation\", \r\n           val1:2, \r\n           val2:5\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/burningaura.png","actorIds":[],"_id":"las2BQQ6eKQ5iQz5"}
{"name":"Thunderous Smite","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/enchant-orange-3.jpg","tooltip":"Thunderous Smite_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Thunderous Smite\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/enchant-orange-3.jpg","actorIds":[],"_id":"m2JsI7cEShXZHYo2"}
{"name":"PlayerPoll","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Generate a poll based on players\r\n// Written by Jon Whitehouse [MTGCarver#7753\r\n// Setup the Popup Window\r\nlet dialogEditor = new Dialog({\r\n    title: `Choose Your Poll;`,\r\n    content: `Please click on Poll you wish to display.`,\r\n    buttons: {\r\n        fridaypoll: {\r\n            label: `Friday Poll`,\r\n            callback: () => {\r\n                game.macros.getName(\"FridayNoms\").execute()\r\n            }\r\n        },\r\n        sundaypoll: {\r\n            label: `Sunday Poll`,\r\n            callback: () => {\r\n                game.macros.getName(\"SundayNoms\").execute()\r\n            }\r\n        },\r\n        close: {\r\n            icon: \"<i class='fas fa-tick'></i>\",\r\n            label: `Close`\r\n        },\r\n    },\r\n    default: \"close\",\r\n    close: () => {}\r\n});\r\ndialogEditor.render(true)","author":"s7gxOGja1p9WAX4j","img":"imports/icons/vote.svg","actorIds":[],"_id":"m5BX0CPvt097FRmA"}
{"name":"Token Multi Select","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Token Multi Select ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\r\nSwap the selected token with another of similar name via a\r\ndrop-down menu in a dialog box.\r\n\r\nTokens for each character should be named similarly but end with\r\n'_walking.png', '_fighting.png', and '_sneaking.png'. For example,\r\n'talion_walking.png', 'talion_fighting.png', and 'talion_sneaking.png'\r\n\r\nIf a token does not exist, mystery man will be automatically selected.\r\n*/\r\n\r\nif (actor !== undefined && actor !== null) {\r\n  let d = new Dialog({\r\n    title: 'Token Mogrifier',\r\n    content: \"<p>Select a new token</p>\" +\r\n      \"<select name='token' id='token'>\" +\r\n        \"<option value='_walking.png'>Walking</option>\" +\r\n        \"<option value='_fighting.png'>Fighting</option>\" +\r\n        \"<option value='_sneaking.png'>Sneaking</option>\" +\r\n        \"<option value='_unconscious.png'>Unconscious</option>\" +\r\n      \"</select>\",\r\n    buttons: {\r\n      ok: {\r\n        icon: '<i class=\"fas fa-check\"></i>',\r\n        label: \"Do it!\",\r\n        callback: () =>\r\n          token.update({\r\n            img: token.data.img.slice(0, token.data.img.lastIndexOf('_')) + document.getElementById(\"token\").value\r\n          })\r\n      },\r\n      cancel: {\r\n        icon: '<i class=\"fas fa-times\"></i>',\r\n        label: \"Nevermind\",\r\n        callback: () => {}\r\n      }\r\n    }\r\n  });\r\n  d.render(true);\r\n} else {\r\n  ui.notifications.warn(\"Please select a token.\");\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/face-to-face.svg","actorIds":[],"_id":"m6U2TTG2hU33CsIU"}
{"name":"Trigger: Healthy","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Bleeding!    ","icon":"icons/svg/blood.svg","colour":"#ff8080","trigger":"if (!actor)\r\n  return false;\r\n\r\nconst hp = actor.data.data.attributes.hp.value;\r\nconst max = actor.data.data.attributes.hp.max;\r\nconst ratio = (hp / max) * 100;\r\nreturn ratio < 50;","module":"macro-marker"}},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* Show whether the selected token is healthy or bleeding.\r\n * When clicking the macro, a chat message + bubble is created.\r\n *\r\n * Check out the marker tab for more information!\r\n */\r\n\r\nif (token) {\r\n  const isActive = MacroMarker.isActive(this, { entity: token});\r\n  const text = isActive \r\n    ? \"I'm a bit feeble...\"\r\n    : \"I am feeling great!\";\r\n    \r\n\r\n  ChatMessage.create({\r\n    content: text,\r\n    speaker: {\r\n        token: token,\r\n        actor: token.actor,\r\n        scene: canvas.scene\r\n    }\r\n  }, { chatBubble: true });\r\n}","author":"s7gxOGja1p9WAX4j","img":"icons/svg/statue.svg","actorIds":[],"_id":"mNi7QgSvHnzavNn4"}
{"name":"Great Weapon Master","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"/*\r\nCreated Monkan#8752 with guidance from the Rage macro in the FVTT Community Macros\r\n\r\nTips to make it work\r\n 1 -    Have a feature called 'Great Weapon Master' for your character.\r\n 2 -    Make sure you have your weapons with Heavy property filled out. \r\n 3 -    if you make any changes to your damage or attack calculations, make sure you toggle it off.\r\n        As it stores the old values to replace once you disable the feat.  It could undo your changes.\r\n*/\r\n\r\nlet gwm='';\r\nlet chatMsg='';\r\n\r\n\r\nif (actor !== undefined && actor !== null) {\r\n    // find the feat Great Weapon Master\r\n    gwm = actor.items.find(i => i.name === 'Great Weapon Master');\r\n    if (gwm == undefined) { \r\n        ui.notifications.warn(\"Please select a single token with the Great Weapon Master feat.\");        \r\n    }\r\n\r\n    if (gwm !== undefined && gwm !== null) {\r\n\t\tchatMsg = '';\r\n\t\tlet enabled = false;\r\n\t\t// store the state of the GWM toggle in flags\r\n\t\tif (actor.data.flags.gwmMacro !== null && actor.data.flags.gwmMacro !== undefined) {\r\n\t\t\tenabled = true;\r\n\t\t}\r\n\t\t// if GWM is active, disable it\r\n\t\tif (enabled) {\r\n            chatMsg = `${actor.name} is swinging Normally now.`;\r\n            \r\n            let obj = {};\r\n\t\t\tobj['flags.gwmMacro'] = null;\t\t\t\r\n\t\t\tactor.update(obj);\r\n\r\n\t\t\t// reset items\r\n\t\t\tfor (let item of actor.items) {\r\n\t\t\t\tif (item.data.flags.gwmMacro !== null && item.data.flags.gwmMacro !== undefined) {\r\n\t\t\t\t\t// restoring the old value from flags\r\n                    let oldDmg = item.data.flags.gwmMacro.oldDmg;\r\n                    let oldAtk = item.data.flags.gwmMacro.oldAtk;\r\n\t\t\t\t\tlet obj = {};\r\n                    obj['data.damage.parts'] = oldDmg;\r\n                    obj['data.attackBonus'] = oldAtk;\r\n\t\t\t\t\tobj['flags.gwmMacro'] = null;\r\n\t\t\t\t\titem.update(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t// if GWM is disabled, enable it\r\n\t\t} else {\r\n            chatMsg = `${actor.name} is swinging Harder!`;\r\n            \r\n            let obj = {};\r\n\t\t\tobj['flags.gwmMacro.enabled'] = true;\r\n\t\t\tactor.update(obj);\r\n\r\n            // update items\r\n            let gwmAtk = -5;\r\n\t\t\tlet gwmDmg = 10;\r\n\t\t\tfor (let item of actor.items) {\r\n                let isMelee = getProperty(item, 'data.data.actionType') === 'mwak';\r\n                let isHeavy = getProperty(item, 'data.data.properties.hvy')\r\n\t\t\t\tif (isMelee && isHeavy && item.data.data.damage.parts.length > 0) {\r\n\t\t\t\t\tconsole.log('updating ' + item);\r\n                    let obj = {};\r\n                    let atk = item.data.data.attackBonus;\r\n                    let dmg = item.data.data.damage.parts;\r\n                    // Save old attack and damage values\r\n                    obj['flags.gwmMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\r\n                    obj['flags.gwmMacro.oldAtk'] = JSON.parse(JSON.stringify(atk));\r\n                    // Set the new attack and damage values\r\n                    if (atk !== null) {\r\n                        atk += '' + gwmAtk;\r\n                    } else {\r\n                        atk = gwmAtk;\r\n                    }\r\n\t\t\t\t\tdmg[0][0] = `${dmg[0][0]} + ${gwmDmg}`;\r\n                    obj['data.damage.parts'] = dmg;\r\n                    obj['data.attackBonus'] = atk;\r\n\t\t\t\t\titem.update(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n    }\r\n\r\n} else ui.notifications.warn(\"Please select a token.\");\r\n\r\n// write to chat if needed:\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n    };\r\n\tChatMessage.create(chatData, {});\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.5_46.png","actorIds":[],"_id":"mXXqKiROVo8vXBsb"}
{"name":"F - 03 - Export FX Presets","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"F - 03 - Export FX Presets ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"TokenMagic.exportPresetLibrary();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/scroll-quill.svg","actorIds":[],"_id":"ms0QjH6FpCmI7bXa"}
{"name":"Token HP","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Token HP ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Roll/Reroll selected token HP\r\n * Author: Tielc#7191\r\n */\r\n\r\nconst tokens = canvas.tokens.controlled;\r\nlet choice = 0;\r\n\r\nif (tokens.length > 0){\r\n\ttokens.forEach(rollHP);\r\n} else {\r\n\tprintMessage(\"No Tokens were selected\");\r\n}\r\n\r\nfunction rollHP(token, index){\r\n\tlet actor = token.actor;\r\n\tlet formula = actor.data.data.attributes.hp.formula;\r\n\t\t\r\n\tif (actor.data.type != \"npc\" || !formula) return;\r\n\t\r\n\tlet hp = new Roll(formula).roll().total;\r\n\t\r\n\tactor.data.data.attributes.hp.value = hp;\r\n\tactor.data.data.attributes.hp.max = hp;\r\n\t\r\n\tprintMessage('<h2>' + actor.data.name + '</h2><strong>HP:</strong> ' + actor.data.data.attributes.hp.value + '/' + actor.data.data.attributes.hp.max + '<span style=\"float:right\"><em>(' + token.data._id + ')</em></span>');\r\n}\r\n\r\nfunction printMessage(message){\r\n\tlet chatData = {\r\n\t\tuser : game.user._id,\r\n\t\tcontent : message,\r\n\t\tblind: true,\r\n\t\twhisper : game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n\t};\r\n\r\n\tChatMessage.create(chatData,{});\t\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/heart-inside.svg","actorIds":[],"_id":"nG9Ki4QV6IfjrxLQ"}
{"name":"Wilderness Encounter Night","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/d20-black.svg","tooltip":"Wilderness Encounter Night ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Wilderness Encounter - Nighttime\r\n// Setting Variables\r\nlet msgContent = 'Wandering Monster Roll was: ';\r\nlet result = '';\r\n\r\n// Roll to Check For Wandering Monster\r\nresult = new Roll(`1d20`).roll().total;\r\n\r\n// Create the message\r\nif(result !== '') {\r\n\tlet chatData = {\r\n\t\tsound: CONFIG.sounds.dice,\r\n\t\tcontent: msgContent + result,\r\n\t\twhisper: game.users.entities.filter(u => u.isGM).map(u => u.id)\r\n\t}\r\n\tChatMessage.create(chatData, {});\r\n}\r\n\r\nif (result >= 17) {\r\n\tconst table = game.tables.entities.find(t => t.name === \"Wilderness Encounter Nighttime\");\r\n\ttable.draw({}, {rollMode: \"gmroll\"});\r\n}","author":"s7gxOGja1p9WAX4j","img":"icons/svg/d20-black.svg","actorIds":[],"_id":"nL0Vc5vPkfofsaXR"}
{"name":"Mirror Image","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","tooltip":"Mirror Image_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Mirror Image\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/wind-grasp-magenta-2.jpg","actorIds":[],"_id":"nPjewIeAymaLcWhb"}
{"name":"24 - T02 - Fire Shield","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T02 - Fire Shield    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myFireField\",\r\n    shieldType: 1,\r\n    gridPadding: 2,\r\n    color: 0xE58550,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 1.15,\r\n    lightAlpha: 2,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/fireshield.png","actorIds":[],"_id":"nSIGwgRbnTP8F18b"}
{"name":"Spirit Guardians","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/needles-sky-2.jpg","tooltip":"Spirit Guardians_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Spirit Guardians\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/needles-sky-2.jpg","actorIds":[],"_id":"nYZQxL2vBznLDrnO"}
{"name":"05 - Glow","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"05 - Glow       ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"glow\",\r\n    filterId: \"superSpookyGlow\",\r\n    outerStrength: 7,\r\n    innerStrength: 0,\r\n    color: 0x006000,\r\n    quality: 0.5,\r\n    padding: 10,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0x003000, \r\n           val2:0x00FF00\r\n        }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/glow.png","actorIds":[],"_id":"nsat1NhVDXoBQb0c"}
{"name":"Crossbow, Hand","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/crossbow-light.jpg","tooltip":"Crossbow, Hand_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Crossbow, Hand\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/crossbow-light.jpg","actorIds":[],"_id":"nvCGv2qswe9jGnZP"}
{"name":"Shocking Grasp","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Shocking Grasp\");","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/lightning-blue-1.jpg","actorIds":[],"_id":"o9ZQbkk4RxnGEiFD"}
{"name":"SpiritualWeapon","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"(async () => {\t\r\n\tlet Weapon_Name = \"Spiritual Weapon \" + game.user.charname;\r\n\tlet macroA = game.macros.getName(\"Create_Token_Macro\");\r\n\tlet macroB = game.macros.getName(\"Delete_Token_Macro\");\r\n\r\n\tif(canvas.tokens.placeables.find(t=>t.name===Weapon_Name) !== undefined)\r\n\t{\r\n\t\titem.rollAttack().then((result)=>{\r\n\t\t\tif(!result) return;\r\n\r\n\t\t\tlet roll_level = canvas.tokens.placeables.find(t=>t.name===Weapon_Name).data.flags.world.lvl;\r\n\r\n\t\t\titem.rollDamage({spellLevel : roll_level});\r\n\t\t});\r\n\t} else {\r\n\t\tif(game.user.targets.size !== 1) return ui.notifications.error(`Please target 1 token.`);\r\n\r\n\t\tlet target = game.user.targets.values().next().value;\r\n\t\tlet New_x = target.x - canvas.dimensions.size;\r\n\t\tlet New_y = target.y - canvas.dimensions.size;\r\n\r\n\t\titem.actor.useSpell(item).then(async (result)=> {\r\n\t\t\tif(!result) return;\r\n\t\t\tlet content = result.data.content;\r\n\t\t\tlet level = parseInt(content.charAt(content.indexOf(\"data-spell-level\")+18));\r\n\r\n\t\t\tawait macroA.execute(\"Spiritual Weapon\", \r\n\t\t\t{\r\n\t\t\t\tx : New_x,\r\n\t\t\t\ty : New_y,\r\n\t\t\t\tname : Weapon_Name,\r\n\t\t\t\t\"flags.world.lvl\" : level\r\n\t\t\t},\r\n\t\t\tgame.user.id);\r\n\r\n\t\t\tgame.Gametime.doIn({minutes:1}, async () => {\r\n\t\t\t\tawait macroB.execute(Weapon_Name);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n})();","author":"s7gxOGja1p9WAX4j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"oKmv8fevFfdcybJO"}
{"name":"Hellish Rebuke","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/horror-red-1.jpg","tooltip":"Hellish Rebuke_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Hellish Rebuke\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/horror-red-1.jpg","actorIds":[],"_id":"oOsrkFOLfhtDUuIg"}
{"name":"Bramdahr Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Bramdahr\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/dndbeyond/Bramdahr.jpeg","actorIds":[],"_id":"oOthdZpAIoPAdT4Z"}
{"name":"Group Notes (Sunday)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro        ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.journal.getName(\"Group Notes\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/open-book.svg","actorIds":[],"_id":"op9P4zCWFY6WwEBC"}
{"name":"24 - T03 - Poisoned Smoke","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T03 - Poisoned Smoke   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"mySmokeField\",\r\n    shieldType: 3,\r\n    gridPadding: 10,\r\n    color: 0x60CC70,\r\n    time: 0,\r\n    blend: 2,\r\n    intensity: 0.9,\r\n    lightAlpha: 1,\r\n    lightSize: 0.7,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/23-t03-poisonedsmoke.JPG","actorIds":[],"_id":"ozqBxL4SgAXF1cfH"}
{"name":"Specific Round","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"modules/turnAlert/icons/timer-icon.svg","tooltip":"Specific Round ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"/**\r\n * Specific Round Turn Alert\r\n * Creates an alert that triggers at the top of the round on\r\n *   a specific round of combat.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 10,\r\n    roundAbsolute: true,\r\n    turnId: null,\r\n    message: \"Top of the Round on Round 10!\",\r\n};\r\n\r\nTurnAlert.create(alertData);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"p69Cvy8Cib5k0bYw"}
{"name":"Hunters Mark - Mark Attack Wrapper","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"//This marco is replacement for a rollItemMacro. Replace the name of the item\r\n//you wish to use to make the attack. This macro must be used with the\r\n//CastMark.json macro or it will just make a standard attack.\r\n\r\n// PUT ITEM MACRO HERE between quotes ****************\r\nconst itemName = \"Longbow\";\r\n// ***************************************************\r\n\r\n//parameters\r\n\r\nlet myToken = token;\r\nconst macroName = \"world\";\r\nconst markDmg = \" + 1d6\";\r\nconst target = game.user.targets.values().next().value;\r\nconst bonuses = myToken.actor.data.data.bonuses;\r\nconst actorId = myToken.actor._id + \"_mark\";\r\n\r\n//Check to see if the mark flag is set else make attack\r\n\r\nfunction checkMark() {\r\n  const flag = myToken.getFlag(macroName, actorId);\r\n\r\n  if (flag) {\r\n    if (flag.targetId == target.data._id) {\r\n      markAttack(flag);\r\n    } else {\r\n      baseAttack(flag);\r\n    }\r\n  } else {\r\n    game.dnd5e.rollItemMacro(itemName);\r\n  }\r\n}\r\n\r\n//check if the mark damag is set and if not increase\r\n//increase global damage by 1d6\r\n\r\nfunction markAttack(flag) {\r\n  if (!flag.isSet) {\r\n    let obj = {\r\n      \"data.bonuses.mwak.damage\": flag.meleeAtk + markDmg,\r\n      \"data.bonuses.rwak.damage\": flag.rangeAtk + markDmg,\r\n      \"data.bonuses.msak.damage\": flag.meleeSpell + markDmg,\r\n      \"data.bonuses.rsak.damage\": flag.rangeSpell + markDmg\r\n    };\r\n    updateActor(myToken, obj);\r\n    flag.isSet = true;\r\n  }\r\n  game.dnd5e.rollItemMacro(itemName);\r\n  token.setFlag(macroName, actorId, flag);\r\n}\r\n\r\n// check if the mark damage is set and if it is revert to base global damage\r\n\r\nfunction baseAttack(flag) {\r\n  if (flag) {\r\n    let obj = {\r\n      \"data.bonuses.mwak.damage\": flag.meleeAtk,\r\n      \"data.bonuses.rwak.damage\": flag.rangeAtk,\r\n      \"data.bonuses.msak.damage\": flag.meleeSpell,\r\n      \"data.bonuses.rsak.damage\": flag.rangeSpell\r\n    };\r\n    updateActor(myToken, obj);\r\n    flag.isSet = false;\r\n    game.dnd5e.rollItemMacro(itemName);\r\n    token.setFlag(macroName, actorId, flag);\r\n  } else {\r\n    game.dnd5e.rollItemMacro(itemName);\r\n  }\r\n}\r\n\r\nasync function updateActor(updateToken, obj) {\r\n  await updateToken.actor.update(obj);\r\n}\r\n\r\n//Ensure target is set and then call check mark function\r\n\r\nif (!myToken) ui.notifications.error(\"Please select your token first.\");\r\nelse {\r\n  checkMark();\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.1_16.png","actorIds":[],"_id":"p7X6BuM3FaXhgOqf"}
{"name":"Shortword +1: Melarue Blade of the Moon","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/sword-long.jpg","tooltip":"Shortword +1: Melarue Blade of the Moon_Billy ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Shortword +1: Melarue Blade of the Moon\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/sword-long.jpg","actorIds":[],"_id":"pGOin55C1Sz8rSGa"}
{"name":"06 - Bloom","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"06 - Bloom   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params = \r\n[{\r\n   filterType: \"xbloom\",\r\n   filterId: \"letsShine\",\r\n   threshold: 0.35,\r\n   bloomScale: 0,\r\n   brightness: 1,\r\n   blur: 0.1,\r\n   padding: 10,\r\n   quality: 15,\r\n   blendMode: 0,\r\n   animated:\r\n   {\r\n       bloomScale: \r\n       { \r\n          active: true, \r\n          loopDuration: 2000, \r\n          animType: \"syncCosOscillation\", \r\n          val1: 0, \r\n          val2: 2.1\r\n       },\r\n       threshold:  \r\n       { \r\n          active: false, \r\n          loopDuration: 1000, \r\n          animType: \"syncCosOscillation\", \r\n          val1: 0.00, \r\n          val2: 1.90\r\n       }\r\n   }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/bloom.png","actorIds":[],"_id":"pP7qwTFENFpQm8v6"}
{"name":"Award Party XP","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Award Party XP  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"(function ()\r\n{\r\n  function award_xp(type, amount)\r\n  {\r\n    let actors = game.actors.entities.filter(e => e.data.type === 'character' && e.isPC);\r\n    let isShared = type == \"shared\";\r\n    console.log(type + ' ' + amount);\r\n    if (Number.isInteger(amount) && actors.length > 0)\r\n    {\r\n      let totalAmount = isShared ? amount : amount * actors.length;\r\n      let individualAmount = isShared ? Math.floor(amount / actors.length) : amount\r\n\r\n      let chatContent = `\r\n\t\t\t<b>${totalAmount} Experience Awarded!</b>\r\n\t\t\t<br>${individualAmount} added to:\r\n\t\t\t`;\r\n\r\n      actors.forEach(actor =>\r\n      {\r\n        chatContent += `<br>${actor.name}`;\r\n        actor.update({\r\n          \"data.details.xp.value\": actor.data.data.details.xp.value + individualAmount\r\n        });\r\n      });\r\n\r\n      let chatData = {\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: chatContent,\r\n        type: CONST.CHAT_MESSAGE_TYPES.OTHER\r\n      };\r\n      ChatMessage.create(chatData);\r\n    }\r\n  }\r\n\r\n  new Dialog({\r\n    title: \"Award Party XP\",\r\n    content: `\r\n     <p>Select a type and an amount. Individual xp will give or take a set amount to/from each party member, whereas shared will split an amount evenly.</p>\r\n     <form>\r\n      <div class=\"form-group\">\r\n       <label>Type:</label>\r\n       <select id=\"xp-type\">\r\n        <option value=\"individual\">individual</option>\r\n        <option value=\"shared\">shared</option>\r\n       </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n       <label>Amount</label>\r\n       <input type=\"text\" inputmode=\"numeric\" pattern=\"\\d*\" id=\"xp-amount\">\r\n      </div>\r\n     </form>\r\n     `,\r\n    buttons: {\r\n      one: {\r\n        icon: '<i class=\"fas fa-check\"></i>',\r\n        label: \"Confirm\",\r\n        callback: (html) =>\r\n        {\r\n          let type = html.find('[id=xp-type]')[0].value;\r\n          let amount = parseInt(html.find('[id=xp-amount]')[0].value);\r\n          award_xp(type, amount);\r\n        }\r\n      },\r\n      two: {\r\n        icon: '<i class=\"fas fa-times\"></i>',\r\n        label: \"Cancel\",\r\n      }\r\n    },\r\n    default: \"Cancel\"\r\n  }).render(true);\r\n})();\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/champions.svg","actorIds":[],"_id":"pRT2hXA6ja3YoMst"}
{"name":"Tile Toggle Hidden Status","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Tile Toggle Hidden Status ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//Simple macro to loop through ALL SELECTED TILES and toggle whether or not they are hidden.\r\n//In other words:\r\n    //If an individual tile is visible, this macro will hide it.\r\n    //If an individual tile is hidden, this macro will make it visible.\r\n//Bonus function to hide or unhide tiles instead also included.\r\n\r\nasync function toggleTileVisibility(tile) {\r\n    console.log(tile.data.hidden);\r\n    console.log(!tile.data.hidden);\r\n    await tile.update({hidden: !tile.data.hidden});\r\n    }\r\n\r\nasync function setTileHidden(tile, trueOrFalse) {\r\n    await tile.update({hidden: trueOrFalse});\r\n}\r\n\r\n//check to make sure at least one tile is selected\r\nif (canvas.tiles.controlled[0]) {\r\n    //loop through all selected tiles\r\n    for (let t of canvas.tiles.controlled) {\r\n        await toggleTileVisibility(t);\r\n        //hide all selected tiles instead\r\n        //await setTileHidden(t,true);\r\n        //show all selected tiles instead\r\n        //await setTileHidden(t,false);\r\n    }\r\n} else {\r\n    ui.notifications.notify(\"Please select at least one tile.\");\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/sunglasses.svg","actorIds":[],"_id":"pRny4BLDE2CtIL5H"}
{"name":"Inflict Wounds","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/rip-jade-2.jpg","tooltip":"Inflict Wounds_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Inflict Wounds\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/rip-jade-2.jpg","actorIds":[],"_id":"pabEbA95oh5nKD1o"}
{"name":"Pounce","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/yellow_23.jpg","tooltip":"Pounce_Travaran ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Pounce\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/yellow_23.jpg","actorIds":[],"_id":"pdOZLzJD27Yr0UkV"}
{"name":"Unarmed Strike","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/blood_11.jpg","tooltip":"Unarmed Strike_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Unarmed Strike\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/blood_11.jpg","actorIds":[],"_id":"pefylNDq7ZwbOos3"}
{"name":"26 - T03 - Drift in Plans (liquid+waves)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"26 - T03 - Drift in Plans (liquid+waves)    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"wave\",\r\n    filterId: \"myDriftWaves\",\r\n    time: 0,\r\n    anchorX: 0.5,\r\n    anchorY: 0.5,\r\n    strength: 0.035,\r\n    frequency: 20,\r\n    color: 0xFFFFFF,\r\n    maxIntensity: 1.5,\r\n    minIntensity: 0.5,\r\n    padding:10,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0085, \r\n        animType: \"move\" \r\n      },\r\n      anchorX :\r\n      {\r\n        active: true,\r\n        val1: 0.35,\r\n        val2: 0.65,\r\n        animType: \"syncCosOscillation\",\r\n        loopDuration: 10000\r\n      },\r\n      anchorY :\r\n      {\r\n        active: true,\r\n        val1: 0.35,\r\n        val2: 0.65,\r\n        animType: \"syncSinOscillation\",\r\n        loopDuration: 10000\r\n      }\r\n    }\r\n},\r\n{\r\n    filterType: \"liquid\",\r\n    filterId: \"myDriftLiquid\",\r\n    color: 0xFF0000,\r\n    time: 0,\r\n    blend: 6,\r\n    intensity: 5,\r\n    spectral: false,\r\n    scale: 2.5,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0018, \r\n          animType: \"move\" \r\n       },\r\n       color: \r\n       {\r\n          active: true, \r\n          loopDuration: 9000, \r\n          animType: \"colorOscillation\", \r\n          val1:0xFF0000, \r\n          val2:0xFFFFFF\r\n       }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/driftinplanes.png","actorIds":[],"_id":"pml9wUEMnBjnpZHa"}
{"name":"Healing Word","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/heal-jade-1.jpg","tooltip":"Healing Word_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Healing Word\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/heal-jade-1.jpg","actorIds":[],"_id":"pphegbUvKhefahzM"}
{"name":"Charm Person","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/explosion-magenta-2.jpg","tooltip":"Charm Person_Albrek ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Charm Person\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/explosion-magenta-2.jpg","actorIds":[],"_id":"psjDW4b6RolRP95k"}
{"name":"Mass Roll Check","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Mass Roll Check ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/*\r\n* Gets a list of selected tokens (or defaults to the user's character), provides a list of\r\n* skills, and then makes a roll for all the selected tokens with that skill. It then spits out\r\n* the poorly-formatted results to chat (or the GM if you uncomment the whisper line).\r\n*/\r\n\r\nlet targetActors = getTargetActors().filter(a => a != null);\r\nif (!targetActors.length > 0)\r\n    return;\r\n\r\n// Choose roll type dialog\r\nlet rollTypeTemplate = `\r\n<div>\r\n    <div class=\"form-group\">\r\n        <label>Choose roll type</label>\r\n        <select id=\"selectedType\">\r\n            <option value=\"save\">Saving Throw</option>\r\n            <option value=\"ability\">Ability Check</option>\r\n            <option value=\"skill\">Skill Check</option>\r\n        </select>\r\n    </div>\r\n</div>`;\r\n\r\nlet chooseCheckType = new Dialog({\r\n    title: \"Choose check type\",\r\n    content: rollTypeTemplate,\r\n    buttons: {\r\n        ok: {\r\n            icon: '<i class=\"fas fa-check\"></i>',\r\n            label: \"OK\",\r\n            callback:  async (html) => {\r\n                let checkType = html.find(\"#selectedType\")[0].value;\r\n                selectedCheckDialog(checkType).render(true);\r\n            }\r\n        },\r\n        cancel: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: 'Cancel'\r\n        }\r\n    },\r\n    default: \"cancel\"\r\n});\r\n\r\n// Choose ability mod dialog\r\nfunction selectedCheckDialog(checkType) {\r\n\r\n    let dialogTitle = getCheckDialogTitle(checkType);\r\n    let dialogContent = getCheckTemplate(checkType);\r\n\r\n    return new Dialog({\r\n        title: dialogTitle,\r\n        content: dialogContent,\r\n        buttons: {\r\n            ok: {\r\n                icon: '<i class=\"fas fa-check\"></i>',\r\n                label: \"OK\",\r\n                callback: async (html) => {\r\n                    let id = html.find(\"#selectedAbility\")[0].value;\r\n\r\n                    let messageContent = `<div><h2>${checkType.toUpperCase()} Roll</h2></div>`\r\n                    for (let a of targetActors) {\r\n                        let name = a.name;\r\n                        let mod = 0;               \r\n                        switch (checkType) {\r\n                            case \"save\":\r\n                                mod = a.data.data.abilities[id].save;\r\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} saving throw)<br>`;\r\n                                break;\r\n                            case \"ability\":\r\n                                mod = a.data.data.abilities[id].mod + a.data.data.abilities[id].checkBonus;\r\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.abilities[id]} check)<br>`;\r\n                                break;\r\n                            case \"skill\":\r\n                                mod = a.data.data.skills[id].total;\r\n                                messageContent += `${name}: <b>[[1d20+${mod}]]</b> (${game.dnd5e.config.skills[id]} (${a.data.data.skills[id].ability}) check)<br>`;\r\n                                break;\r\n                            default:\r\n                                objects = game.dnd5e.config.skills;\r\n                                break;\r\n                        }\r\n                    }\r\n    \r\n                    let chatData = {\r\n                        user: game.user.id,\r\n                        speaker: game.user,\r\n                        content: messageContent,\r\n                        // Uncomment the following line if you want the results whispered to the GM.\r\n                        // whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n                    };\r\n                    ChatMessage.create(chatData, {});\r\n                }\r\n            },\r\n            cancel: {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: 'Cancel'\r\n            }\r\n        },\r\n        default: \"cancel\"\r\n    });\r\n}\r\n\r\n// Gets list of selected tokens, or if no tokens are selected then the user's character.\r\nfunction getTargetActors() {\r\n    const character = game.user.character;\r\n    const controlled = canvas.tokens.controlled;\r\n    let actors = [];\r\n\r\n    if (controlled.length === 0) return [character] || null;\r\n\r\n    if (controlled.length > 0) {\r\n        let actors = [];\r\n        for (let i = 0; i < controlled.length; i++) {\r\n            actors.push(controlled[i].actor);\r\n    }\r\n\r\n    return actors;\r\n}\r\nelse throw new Error('You must designate at least one token as the roll target');\r\n}\r\n\r\n\r\n// Gets a template of abilities or skills, based on the type of check chosen.\r\nfunction getCheckTemplate(checkType) {\r\n    let objects = new Object();\r\n    \r\n    switch (checkType) {\r\n        case \"save\":\r\n        case \"ability\":\r\n            objects = game.dnd5e.config.abilities;\r\n            break;\r\n        case \"skill\":\r\n            objects = game.dnd5e.config.skills;\r\n            break;\r\n        default:\r\n            objects = game.dnd5e.config.skills;\r\n            break;\r\n    }\r\n\r\n    let template = `\r\n    <div>\r\n        <div class=\"form-group\">\r\n            <label>Choose check</label>\r\n            <select id=\"selectedAbility\">`\r\n    \r\n            for (let [checkId, check] of Object.entries(objects)) {\r\n                template += `<option value=\"${checkId}\">${check}</option>`;    \r\n            }            \r\n    \r\n    template += `</select>\r\n        </div>\r\n    </div>`;\r\n\r\n    return template;\r\n}\r\n\r\nfunction getCheckDialogTitle(checkType) {\r\n    switch (checkType) {\r\n        case \"save\":\r\n            return \"Saving Throw\"\r\n        case \"ability\":\r\n            return \"Ability Check\"\r\n        case \"skill\":\r\n            return \"Skill Check\"\r\n        default:\r\n            return \"Unknown Check\"\r\n    }\r\n}\r\n\r\nchooseCheckType.render(true);","author":"s7gxOGja1p9WAX4j","img":"icons/svg/d20.svg","actorIds":[],"_id":"pvuZ0FgE7WNhOKVy"}
{"name":"Teferi Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro     ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Teferi of Zhalfir\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/dndbeyond/joe-avatar.jpg","actorIds":[],"_id":"q04ugoPplIWjMHls"}
{"name":"LayOnHands","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"LayOnHands ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let confirmed = false;\r\nlet actorData = game.actors.getName(\"\");\r\nlet featData = actorData.items.find(i=>i.name===\"Lay on Hands\");\r\nlet featUpdate = duplicate(featData);\r\nlet updateMacro = game.macros.find(m=>m.name===\"Update\");\r\nif(game.user.targets.size === 0 || game.user.targets.size > 1) return ui.notifications.error(`Please Target one token.`);\r\nlet targetData = game.user.targets.values().next().value;\r\n\r\nlet content = `<p>How much HP do you want to Restore?</p>\r\n                    <form>\r\n                        <div class=\"form-group\">\r\n                            <label>Type HP Amount to Restore: (Max : ${featData.data.data.uses.value}) </label>\r\n                            <input name=\"num\"></input>\r\n                        </div>\r\n                    </form>`;\r\n\r\ngame.dnd5e.rollItemMacro(\"Lay on Hands\").then (() =>{\r\n    new Dialog({\r\n        title: \"Lay on Hands Healing\",\r\n        content: content,      \r\n        buttons: {\r\n            one: {\r\n                label: \"Heal!\",\r\n                callback: () => confirmed = true\r\n            },\r\n            two: {\r\n                label: \"Cancel\",\r\n                callback: () => confirmed = false\r\n            }\r\n        },\r\n        default: \"Cancel\",\r\n        close: html => {\r\n            if (confirmed) {\r\n                let number = html.find('[name=num]')[0].value;\r\n                if(isNaN(number)) return ui.notifications.error(`Must input numbers only.`);\r\n                if((Number(number)-1) > featData.data.data.uses.value) return ui.notifications.error(`Not enough charges left.`);\r\n\r\n                updateMacro.execute(targetData.actor.name, {\r\n                    \"data.attributes.hp.value\" : Math.clamped(\r\n                        targetData.actor.data.data.attributes.hp.value + Number(number),\r\n                        0, targetData.actor.data.data.attributes.hp.max)\r\n                });\r\n                featUpdate.data.uses.value = featUpdate.data.uses.value - (Number(number)-1);\r\n                actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\r\n            }\r\n        }\r\n    }).render(true);\r\n});","author":"s7gxOGja1p9WAX4j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"q7FGKNSi80uwyg2D"}
{"name":"Heroism","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Heroism ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet mod = args[2];\r\n\r\n// get the hookId here\r\nconst hookIdFlag = target.getFlag(\"world\", \"heroismUpdateCombatHookId\");\r\n\r\n// if we want to register, make sure the hook id doesn't already exist before registering again\r\nif (args[0] === \"on\" && !hookIdFlag) {\r\n    const hookId = Hooks.on(\"updateCombat\", (combat, update) => {\r\n        if (!(\"round\" in update || \"turn\" in update)) return;\r\n        if (combat.combatant.tokenId === args[1]) {\r\n            target.actor.update({ \"data.attributes.hp.temp\": mod });\r\n            ChatMessage.create({ content: target.name + \" gains \" + mod + \"Temp HP\"})\r\n        }\r\n    });\r\n    target.setFlag(\"world\", \"heroismUpdateCombatHookId\", hookId);\r\n// if we want to unregister and the hookId has been saved\r\n} else if (args[0] === \"off\" && hookIdFlag) {\r\n    Hooks.off(\"updateCombat\", hookIdFlag);\r\n    // unset the saved hookId so that we can register again whent the time comes\r\n    target.unsetFlag(\"world\", \"heroismUpdateCombatHookId\");\r\n    ChatMessage.create({ content: target.name + \" looses the effects of Heroism\"})\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/heal-sky-2.jpg","actorIds":[],"_id":"qY4zA7IbaMIAzT4a"}
{"name":"Shield of Faith","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-sky-2.jpg","tooltip":"Shield of Faith_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Shield of Faith\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-sky-2.jpg","actorIds":[],"_id":"qYA8uFhfl0gGixxc"}
{"name":"Random Mockeries (Vicious Mockery)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":true}},"scope":"global","command":"// Courtesy of @Zarek\r\n// Selected target receives a random mockery from a table called \"mockeries\" along with the DC and damage.\r\n// You can find a table called mockeries in the community tables module.\r\n\r\n\r\nlet tableName = \"mockeries\";\r\n// default mockery if no table found.\r\nlet mockery = \"Now go away or I shall taunt you a second time-a!\";\r\n\r\nlet viciousMockeries = () => {\r\n  if (!actor) {\r\n    ui.notifications.warn(\"You must have an actor selected.\");\r\n    return\r\n  }\r\n\r\n  let actorLevels = actor.data.data.levels || 1;\r\n  let table = game.tables.entities.find(t => t.name == tableName);\r\n\r\n  // Get Targets name\r\n  const targetId = game.user.targets.ids[0];\r\n  const targetToken = canvas.tokens.get(targetId);\r\n  if (!targetToken) {\r\n    ui.notifications.warn(\"You must target a token.\");\r\n    return\r\n  }\r\n  const targetName = targetToken.name;\r\n\r\n  // Roll the result, and mark it drawn\r\n  if (table) {\r\n    if (checkTable(table)) {\r\n      let roll = table.roll();\r\n      let result = roll.results[0];\r\n      mockery = result.text;\r\n      table.updateEmbeddedEntity(\"TableResult\", {\r\n        _id: result._id,\r\n        drawn: true\r\n      });\r\n    }\r\n  }\r\n\r\n  function checkTable(table) {\r\n    let results = 0;\r\n    for (let data of table.data.results) {\r\n      if (!data.drawn) {\r\n        results++;\r\n      }\r\n    }\r\n    if (results < 1) {\r\n      table.reset();\r\n      ui.notifications.notify(\"Table Reset\")\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  // Add a message with damage roll\r\n  let numDie = 1;\r\n  if (actorLevels >= 17) {\r\n    numDie = 4;\r\n  } else if (actorLevels >= 11) {\r\n    numDie = 3;\r\n  } else if (actorLevels >= 5) {\r\n    numDie = 2;\r\n  }\r\n\r\n  let messageContent = `<p>${targetName} Roll WIS save DC [[8+${actor.data.data.abilities.cha.mod}+@attributes.prof]] or take [[${numDie}d4]] damage and have disadvantage.</p>`\r\n  messageContent += `<p>${token.name} exclaims <b><i>\"${mockery}\"</i></b></p>`\r\n  messageContent += `<details closed=\"\"><summary><a>Vicious Mockery</a></summary><p>You unleash a string of insults laced with subtle enchantments at a creature you can see within range. If the target can hear you (though it need not understand you), it must succeed on a <strong>Wisdom saving throw</strong> or take <strong>1d4 psychic damage</strong> and have <strong>disadvantage on the next attack roll</strong> it makes before the end of its next turn.</p>\r\n    <p>This spell’s damage increases by 1d4 when you reach 5th level ([[/r 2d4]]), 11th level ([[/r 3d4]]), and 17th level ([[/r 4d4]]).</p></details>`\r\n\r\n  // create the message\r\n  if (messageContent !== '') {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: messageContent,\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n  }\r\n};\r\n\r\nviciousMockeries();\r\n","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/emerald_06.jpg","actorIds":[],"_id":"qYujTTM23d8aUItW"}
{"name":"Misty Step","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/wind-grasp-air-1.jpg","tooltip":"Misty Step_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Misty Step\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/wind-grasp-air-1.jpg","actorIds":[],"_id":"qZAFMjecXHvfbkQd"}
{"name":"24 - T08 - Chromatic Bubble","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T08 - Chromatic Bubble  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myChromaField\",\r\n    shieldType: 8,\r\n    gridPadding: 2,\r\n    color: 0xAAAAAA,\r\n    time: 0,\r\n    blend: 0,\r\n    intensity: 1,\r\n    lightAlpha: 0,\r\n    lightSize: 0,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: true,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0045, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/24-t08-chromaticbubble.JPG","actorIds":[],"_id":"qdDkg261CDan4R0x"}
{"name":"Boots of Speed","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Boots of Speed ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nlet ActorUpdate = game.macros.getName(\"ActorUpdate\");\r\nlet TokenSetFlag = game.macros.getName(\"TokenSetFlag\");\r\nlet TokenUnSetFlag = game.macros.getName(\"TokenUnSetFlag\");\r\nlet speed = parseInt(target.actor.data.data.attributes.speed.value);\r\n\r\nif (args[0] === \"on\") {\r\n    let newSpeed = speed * 2\r\n    ActorUpdate.execute(args[1],{\"speed\": newSpeed});\r\n    TokenSetFlag.execute(args[1], 'world', 'bootsOfSpeed', speed);\r\n} else {\r\n    let newSpeed = target.getFlag('world', 'bootsOfSpeed')\r\n    ActorUpdate.execute(args[1],{\"speed\": newSpeed});\r\n    TokenUnSetFlag.execute(args[1],'world', 'bootsOfSpeed');\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/equipment/boots-plain.jpg","actorIds":[],"_id":"qjTENMmIetD1fof7"}
{"name":"Disallow token creation","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Disallow token creation  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// After running this macro, it will be impossible to drop any new tokens onto the scene, regardless of user permission\r\n// Running the 'Restore token creation' macro will restore the normal behavior.\r\n\r\nif (game.disallow_token_creation_id)\r\n   Hooks.off('preCreatetoken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id = Hooks.on(\"preCreateToken\", () => false);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/land-mine.svg","actorIds":[],"_id":"qye2TtcQYOmqDEbL"}
{"name":"Static: Dialog","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Dialog Example (active)    ","icon":"icons/svg/terror.svg","colour":"#00ffff","trigger":"","module":"macro-marker"},"markers":{"markers":{"tjlBiRIxZPOpPe7V":false,"nM7MMqttrEJcpfws":false},"type":"Macro"}},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/* Basic example to show manually activating and\r\n * deactivating a marker.\r\n * When the marker is active,   the macro will deactivate it.\r\n * When the marker is inactive, the macro will show a dialog.\r\n *\r\n * Check out the marker tab for more information!\r\n */\r\n\r\nif (MacroMarker.isActive(this)) {\r\n    MacroMarker.deactivate(this);\r\n} else {\r\n    new Dialog({\r\n        content: 'Activate marker?',\r\n        buttons: {\r\n            yes: {\r\n                label: 'Yes!',\r\n                callback: () => MacroMarker.activate(this)\r\n            },\r\n            no: {\r\n                label: 'No',\r\n                callback: () => MacroMarker.deactivate(this)\r\n            }\r\n        },\r\n        default: 'yes'\r\n    }).render(true)\r\n}","author":"s7gxOGja1p9WAX4j","img":"icons/svg/unconscious.svg","actorIds":[],"_id":"rIPPmUlJdvByr9hd"}
{"name":"28 - Glory to Pixels","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"28 - Glory to Pixels    ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params = \r\n[{\r\n    filterType: \"pixel\",\r\n    filterId: \"pixelate\",\r\n    sizeX: 2.5,\r\n    sizeY: 2.5\r\n}]\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/28-glorytopixels.JPG","actorIds":[],"_id":"sJJOY7WRbEP1dH6m"}
{"name":"CUB condition control","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"CUB condition control ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\nif (args[2] === 1){\r\n    game.cub.applyCondition(args[0], target)\r\n    let flag = \"DE \" + args[0]\r\n    target.setFlag('world', flag, 1)\r\n} else {\r\n    if(args[2] === 2){\r\n        console.log(\"test\")\r\n        let flag = \"DE \" + args[0]\r\n        game.cub.removeCondition(args[0], target);\r\n        target.unsetFlag('world', flag)\r\n    }\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/condition-update.svg","actorIds":[],"_id":"sOsE02tVNMVFug4I"}
{"name":"Awakened Mind","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/telepathy.svg","tooltip":"Awakened Mind_Greycleff ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Awakened Mind\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/telepathy.svg","actorIds":[],"_id":"scPWDq7cb9stnWf4"}
{"name":"remove all effects","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"remove all effects  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"DynamicEffects.removeAllActiveffects()\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/backward-time.svg","actorIds":[],"_id":"seoB5Ec2zehmfsS3"}
{"name":"Journey Sheet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro      ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"game.actors.getName(\"Journey\").sheet.render(true);","author":"s7gxOGja1p9WAX4j","img":"imports/dndbeyond/Journey.jpeg","actorIds":[],"_id":"syOniWLADAgElL7C"}
{"name":"TarokkaReading","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"TarokkaReading ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"// Curse of Strahd Macro for running a Tarokka Reading\r\n// Must have the roll tables setup in order for this to work.\r\nconst commondeck = game.tables.entities.find(\r\n  (t) => t.name === \"Tarokka Common Deck\"\r\n);\r\nconst enemy = game.tables.entities.find((t) => t.name === \"Tarokka High Enemy\");\r\nconst location = game.tables.entities.find(\r\n  (t) => t.name === \"Tarokka High Location\"\r\n);\r\n\r\nlet roll = commondeck.roll();\r\nlet roll2 = commondeck.roll();\r\nlet roll3 = commondeck.roll();\r\nlet roll4 = enemy.roll();\r\nlet roll5 = location.roll();\r\n\r\nlet msgContent =\r\n  \"This card tells of history. Knowledge of the ancient will help you better understand your enemy.\\n\\n\" +\r\n  roll.results[0].text +\r\n  \"\\n\\nThis card tells of a powerful force for good and protection, a holy symbol of great hope.\\n\\n\" +\r\n  roll2.results[0].text +\r\n  \"\\n\\nThis is a card of power and strength. It tells of a weapon of vengeance: A sword of sunlight.\\n\\n\" +\r\n  roll3.results[0].text +\r\n  \"\\n\\nThis card sheds light on one who will help you greatly in the battle against darkness\\n\\n\" +\r\n  roll4.results[0].text +\r\n  \"\\n\\nYour enemy is a creature of darkness, whose powers are beyond mortality. This card will lead you to him.\\n\\n\" +\r\n  roll5.results[0].text;\r\n\r\nlet chatData = {\r\n  user: game.user._id,\r\n  speaker: ChatMessage.getSpeaker(),\r\n  content: msgContent,\r\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n};\r\nChatMessage.create(chatData, {});","author":"s7gxOGja1p9WAX4j","img":"imports/icons/card-pick.svg","actorIds":[],"_id":"tFdh6NGvHr39lzMu"}
{"name":"Close All Doors","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Close All Doors   ","icon":"imports/icons/Icon.3_67.png","module":"macro-marker","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Closes all doors on the canvas\r\n * Author: @Atropos#3814\r\n */\r\n \r\ncanvas.walls.updateMany(canvas.scene.data.walls.map(w => {\r\n  return {_id: w._id, ds: w.ds === 1 ? 0 : w.ds};\r\n}));\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/exit-door.svg","actorIds":[],"_id":"tGo7X9634LvJ6CJP"}
{"name":"Blindness/Deafness","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/evil-eye-red-2.jpg","tooltip":"Blindness/Deafness_Sethrael ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Blindness/Deafness\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/evil-eye-red-2.jpg","actorIds":[],"_id":"tK3cB4zZvquan2Ry"}
{"name":"Switch Images","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Switch Images ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Allows swapping between two different .png images.\r\n// Token sides should have \"a\" and \"b\" at the end of the name like \"name-a.png\" and \"name-b.png\".\r\n// If you have a different ending, change aName and bName respectively.\r\n// Author: Phenomen\r\n\r\n// IMPORTANT. These two values MUST be the same length.\r\nlet aName = 'a.png'\r\nlet bName = 'b.png'\r\n\r\nlet tok = canvas.tokens.controlled[0];\r\nlet img = tok.data.img;\r\nvar currentSide = img[img.length - aName.length];\r\nimg = img.slice(0,-Math.abs(aName.length)) + (currentSide == 'a' ? bName: aName);\r\ntok.update({ img });\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/double-face-mask.svg","actorIds":[],"_id":"tLFbn6baDwM3Oryk"}
{"name":"Equip Unequip Shield","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}},"furnace":{"runAsGM":false}},"scope":"global","command":"/**\r\n * Equips/unequips an item. Make sure you change the variables at the top (as required).\r\n * This script will also error check to make sure items exist and tokens are select. \r\n * Chat and token icon display options can be set as desired.\r\n * Author: Zapgun\r\n */\r\n\r\nlet itemName = 'Shield'; // <--- Change this to the *exact* item name (capitals count!)\r\nlet sendToChat = true; // <--- Change to 'true' or 'false' to display a chat message about equipping\r\nlet displayIcon = true; // <--- Change to 'true' or 'false' to display an effect icon when equipped\r\nconst effectIconPath = 'icons/svg/shield.svg'; // <--- Add the effect icon you want to appear when equipped\r\n\r\nlet toggleResult = false;\r\n\r\nif (!actor) {\r\n    ui.notifications.warn('You need to select a token before using this macro!');\r\n} else {\r\n\r\n\tlet myItem = actor.items.find(i => i.name == itemName);\r\n\tif (myItem != null)\r\n\t{\r\n\t\tlet item = actor.getOwnedItem(myItem._id);\r\n\t\tlet attr = \"data.equipped\";\r\n\t\tlet equipped = getProperty(item.data, attr);\r\n\t\tif (sendToChat) {\t\t\t\r\n\t\t\tif (!equipped) {\r\n\t\t\t\tchatMessage(actor.name + ' <b>equips</b> their <i>' + ' ' + itemName+ '</i>');\r\n\t\t\t} else {\r\n\t\t\t\tchatMessage(actor.name + ' <b>un-equips</b> their <i>' + ' ' + itemName + '</i>');\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\titem.update({[attr]: !getProperty(item.data, attr)});\r\n\t\t\r\n\t\t// mark/unmark character's token with an effect icon when displayToken is true\r\n\t\t(async () => { \r\n\t\t\tif (displayIcon) {\r\n\t\t\t\ttoggleResult = await token.toggleEffect(effectIconPath);\r\n\t\t\t\tif (toggleResult == equipped) token.toggleEffect(effectIconPath);  \r\n\t\t\t}\r\n\t\t})();\r\n\t\t\r\n\t} else {\r\n\t\tui.notifications.warn(\"No item named '\" + itemName + \"' found on character!\");\r\n\t}\r\n}\r\n\r\nfunction chatMessage(messageContent) {\r\n\t// create the message\r\n\tif (messageContent !== '') {\r\n\t\tlet chatData = {\r\n\t\t\tuser: game.user._id,\r\n\t\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\t\tcontent: messageContent,\r\n\t\t};\r\n\t\tChatMessage.create(chatData, {});\r\n\t}\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/active6.png","actorIds":[],"_id":"tPUDMtpw6dLwNm09"}
{"name":"Hit Target Healing","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Hit Target Healing ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// this script attempts to heal X points of damage by repeatedly using charges of wands of cure light wounds\r\n\r\nfunction hitTarget(target) {\r\n  if (target > 250) {\r\n    ui.notifications.warn(\r\n      \"Too much healing! No one needs that much healing! Max 250.\"\r\n    );\r\n    return;\r\n  }\r\n  let current = 0;\r\n  let chargesUsed;\r\n\r\n  const rolls = [];\r\n  for (chargesUsed = 0; current < target; chargesUsed += 1) {\r\n    const roll = new Roll(\"1d8 + 1\");\r\n    roll.roll();\r\n    current += roll.total;\r\n    rolls.push({ roll: roll.total - 1 });\r\n  }\r\n\r\n  const roll = new Roll(`${chargesUsed}d8 + ${chargesUsed}`);\r\n  const msg = roll.toMessage(\r\n    { flavor: `Casting <i>cure light wounds</i> ${chargesUsed} times` },\r\n    { create: false }\r\n  );\r\n\r\n  const fakeRoll = {\r\n    class: \"Roll\",\r\n    formula: `${chargesUsed}d8 + ${chargesUsed}`,\r\n    dice: [\r\n      {\r\n        class: \"Die\",\r\n        faces: 8,\r\n        rolls: rolls,\r\n        formula: `${chargesUsed}d8`,\r\n        options: {},\r\n      },\r\n    ],\r\n    parts: [\"_d0\", \"+\", `${chargesUsed}`],\r\n    result: `${current - chargesUsed} + ${chargesUsed}`,\r\n    total: current,\r\n  };\r\n\r\n  msg.roll = JSON.stringify(fakeRoll);\r\n  msg.content = String(current);\r\n\r\n  const tokens = canvas.tokens.controlled;\r\n  if (tokens.length !== 1) {\r\n    ui.notifications.warn(\"Please select a token.\");\r\n    return;\r\n  }\r\n  const token = tokens[0];\r\n  msg.speaker = {alias: token.actor.data.name}\r\n\r\n  ChatMessage.create(msg);\r\n}\r\n\r\nnew Dialog({\r\n  title: \"Cast until heal a set amount\",\r\n  content:\r\n    \"<p>Enter the amount you want to heal</p><center><input type='number' id='amountInput'></center><br>\",\r\n  buttons: {\r\n    submit: {\r\n      label: \"Heal\",\r\n      icon: '<i class=\"fas fa-medkit\"></i>',\r\n      callback: () => {\r\n        const healTarget = parseInt(\r\n          eval(\r\n            $(\"#amountInput\")\r\n              .val()\r\n              .match(/[0-9]*/g)\r\n          )\r\n        );\r\n        hitTarget(healTarget);\r\n      },\r\n    },\r\n  },\r\n}).render(true);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/healing.svg","actorIds":[],"_id":"tWFMEvp7lOxGhTIU"}
{"name":"Sling","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/sling.jpg","tooltip":"Sling_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Sling\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/sling.jpg","actorIds":[],"_id":"tYYxSG3WevPUnt5C"}
{"name":"Tasha’s Hideous Laughter","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/morbid-humour.svg","tooltip":"Tasha’s Hideous Laughter_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Tasha’s Hideous Laughter\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/morbid-humour.svg","actorIds":[],"_id":"thnoHve5lEzzV8vL"}
{"name":"SundayNoms","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"chat","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"imports/icons/click.svg","tooltip":"Friday Nominations   ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"/p Who do you nominate for tonight's best roleplay?\r\nGreycleff (Greg)\r\nJourney (Lauren)\r\nMeatshield (Chris)\r\nRinnian (Jessica)\r\nAlbrek (Aaron)\r\nTravaran (Mike)","author":"s7gxOGja1p9WAX4j","img":"imports/icons/vote.svg","actorIds":[],"_id":"ti2Qw9td91UpSXUw"}
{"name":"Spare the Dying","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/heal-sky-1.jpg","tooltip":"Spare the Dying_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Spare the Dying\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/heal-sky-1.jpg","actorIds":[],"_id":"tiL0NN7OsrpKekc4"}
{"name":"Mind Spike","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/affliction_21.jpg","tooltip":"Mind Spike_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Mind Spike\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/affliction_21.jpg","actorIds":[],"_id":"u7acs8MvbdfAvxsH"}
{"name":"Lesser Restoration","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/heal-sky-1.jpg","tooltip":"Lesser Restoration_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Lesser Restoration\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/heal-sky-1.jpg","actorIds":[],"_id":"uOjw5P1aHg4k8pS3"}
{"name":"Drink Potion of Healing","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro   ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"main ()\r\n\r\nasync function main(){\r\n    // Is token selected? If not, error\r\n    console.log(\"Tokens: \", canvas.tokens.controlled)\r\n    if(canvas.tokens.controlled.length == 0 || canvas.tokens.controlled.length > 1){\r\n        ui.notifications.error(\"Please select a single token.\");\r\n        return;\r\n    }\r\n    let actor = canvas.tokens.controlled[0].actor\r\n    \r\n    // Does the token have a potion of healing?\r\n    console.log(\"Actor: \", actor);\r\n    let potionofHealing = actor.items.find(item => item.data.name == \"Potion of Healing\")\r\n    if(potionofHealing == null || potionofHealing == undefined){\r\n        ui.notifications.error(`Sorry ${actor.data.name}, but you don't have a Potion of Healing. Get bent.`);\r\n        return;\r\n    }\r\n\r\n    // Is the character already at full health?\r\n    if(actor.data.data.attributes.hp.value == actor.data.data.attributes.hp.max){\r\n        ui.notifications.error(`Seriously ${actor.data.name}? WTF!!! You at max health already!!!`);\r\n        return;\r\n    }\r\n\r\n    // Consume the Potion of Healing! First let's subtract one from the inventory\r\n    await potionofHealing.update({\"data.quantity\": potionofHealing.data.data.quantity - 1})\r\n    if(potionofHealing.data.data.quantity < 1){\r\n        potionofHealing.delete();\r\n    }\r\n\r\n    // Increase health. If newHealth is going to be greater than max health then max the health\r\n    const roll = new Roll(potionofHealing.data.labels.damage)\r\n    roll.roll();\r\n    let result = roll.total;\r\n    let newHealth = actor.data.data.attributes.hp.value + result\r\n    if(newHealth > actor.data.data.attributes.hp.max){\r\n        newHealth = actor.data.data.attributes.hp.max\r\n    }\r\n\r\n    // Update the actor health\r\n    await actor.update({\"data.attributes.hp.value\": newHealth});\r\n    ui.notifications.info(`${actor.data.name} just downed a potion of healing.`)\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/44.png","actorIds":[],"_id":"ufOIufAxodM1CFZn"}
{"name":"Channel Divinity: Vow of Enmity","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/active12.png","tooltip":"Channel Divinity: Vow of Enmity_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Channel Divinity: Vow of Enmity\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/active12.png","actorIds":[],"_id":"umMWol4BOYs3rzb3"}
{"name":"Use Butterskull","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro                   ","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":false}},"scope":"global","command":"main ()\r\n\r\nasync function main(){\r\n    // Is token selected? If not, error\r\n    console.log(\"Tokens: \", canvas.tokens.controlled)\r\n    if(canvas.tokens.controlled.length == 0 || canvas.tokens.controlled.length > 1){\r\n        ui.notifications.error(\"Please select a single token.\");\r\n        return;\r\n    }\r\n    let actor = canvas.tokens.controlled[0].actor\r\n    \r\n    // Does the token have a butterskull?\r\n    console.log(\"Actor: \", actor);\r\n    let butterskull = actor.items.find(item => item.data.name == \"Butter Skull\")\r\n    if(butterskull == null || butterskull == undefined){\r\n        ui.notifications.error(`Sorry ${actor.data.name}, but you don't have a butter skull. Go see Big Al!`);\r\n        return;\r\n    }\r\n\r\n    // Is the character already at full health?\r\n    if(actor.data.data.attributes.hp.value == actor.data.data.attributes.hp.max){\r\n        ui.notifications.error(\"You don't need this tasty treat. You at max health already.\");\r\n        return;\r\n    }\r\n\r\n    // Consume the Butter Skull! First let's subtract one from the inventory\r\n    await butterskull.update({\"data.quantity\": butterskull.data.data.quantity - 1})\r\n    if(butterskull.data.data.quantity < 1){\r\n        butterskull.delete();\r\n    }\r\n\r\n    // Increase health. If newHealth is going to be greater than max health then max the health\r\n    // Butter Skull does 1d4 restore so we need to roll it. \r\n    // it is data.labels.damage\r\n    const roll = new Roll(butterskull.data.labels.damage)\r\n    roll.roll();\r\n    let result = roll.total;\r\n    let newHealth = actor.data.data.attributes.hp.value + result\r\n    if(newHealth > actor.data.data.attributes.hp.max){\r\n        newHealth = actor.data.data.attributes.hp.max\r\n    }\r\n\r\n    // Update the actor health\r\n    await actor.update({\"data.attributes.hp.value\": newHealth});\r\n    ui.notifications.info(`${actor.data.name} just took a bit of butter from the butter skull. Mmm Cinnamon!`)\r\n}","author":"s7gxOGja1p9WAX4j","img":"imports/icons/butterskull.jpg","actorIds":[],"_id":"upQthXZuiKbpDOwP"}
{"name":"Sorcerer Points","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*sorcerer point macro\r\n *Module Requirements : Furnace\r\n *Character Requirements : \tMust be a user with levels in \"Sorcerer\".\r\n *\t\t\t\t\t\t\tMust have a feature with uses equal to sorcerer level named \"Sorcery Points\"\r\n *\t\t\t\t\t\t\tMetamagic Feats must be named as they are in the Macro.\r\n */\r\nlet outlog =(...args) => console.log(\"Sorcerer | \", ...args);\r\nlet debug = false;\r\n//error checking\r\nif(game.user.character === null) return ui.notifications.warn(`Go away GM you are drunk.`);\r\nif(game.user.character.data.items.find(i=>i.name===\"Sorcerer\")===undefined) return ui.notifications.warn(`Your character does not have a Sorcerer Class.`);\r\n//variable creation\r\nlet s_actor = game.user.character;\r\nlet s_class = s_actor.data.items.find(i=>i.name===\"Sorcerer\");\r\nlet s_points = s_actor.data.items.find(i=>i.name===\"Sorcery Points\");\r\nlet s_slots = s_actor.data.data.spells;\r\nlet confirmed = false;\r\nlet fail = true;\r\n\r\n//dialog\r\nSorcerer_Dialog();\r\n\r\n//functions\r\nfunction Sorcerer_Dialog()\r\n{\r\n\tif(s_class.data.levels > 1 && s_class.data.levels !== s_points.data.uses.max) return ui.notifications.warn(`Sorcery Points value is incorrect.`);\r\n\tlet content = `\r\n\t\t<div class = \"form-group\">\r\n\t\t\t<br>\r\n\t\t\t<label>Select Action  : </label>\r\n\t\t\t<select id=\"use\" name=\"use\">`;\r\n\tif(checkSlots(\"available\") && s_points.data.uses.value !== s_points.data.uses.max) {content += `<option value = \"sorcPoint\">Spell Slot => Sorcery Point</option>`;}\r\n\tif(checkSlots(\"missing\") && s_points.data.uses.value >= 2){content += `<option value = \"spellSlot\">Sorcery Point => Spell Slot</option>`;}\r\n\r\n\tif(checkPoints() > 0 && checkSlots(\"available\"))\r\n\t{\r\n\t\tcontent += `<option value = \"extend\">Extended Spell</option>`;\r\n\t\tcontent += `<option value = \"twin\">Twinned Spell</option>`;\r\n\t}\r\n\tcontent += `</select><br><br></div>`;\r\n\r\n\tnew Dialog({\r\n\t\ttitle : \"Sorcery Points Spender\",\r\n\t\tcontent : content,\r\n\t\tbuttons : {\r\n\t\t\tone : {\r\n\t\t\t\ticon :`<i class=\"fas fa-check\"></i>`,\r\n\t\t\t\tlabel : \"Continue\",\r\n\t\t\t\tcallback : () => confirmed = true\r\n\t\t\t},\r\n\t\t\ttwo : {\r\n\t\t\t\ticon : `<i class=\"fas fa-times\"></i>`,\r\n\t\t\t\tlabel : \"Cancel\",\r\n\t\t\t\tcallback : () => confirmed = false\r\n\t\t\t}\r\n\t\t},\r\n\t\tdefault : \"Cancel\",\r\n\t\tclose : html => {\r\n\t\t\tif(confirmed){\r\n\t\t\t\tswitch(html.find('[name=use]')[0].value){\r\n\t\t\t\t\tcase \"sorcPoint\" : \r\n\t\t\t\t\t\tspell_SorceryPoints();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"spellSlot\" :\r\n\t\t\t\t\t\tsorceryPoints_spell();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"extend\" :\r\n\t\t\t\t\t\tmetaMagic_Extended();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"twin\" :\r\n\t\t\t\t\t\tmetaMagic_Twinned();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}).render(true);\r\n}\r\nfunction spell_SorceryPoints()\r\n{\r\n\t//variable creation\r\n\tconfirmed = false;\r\n\tlet newContent = `<div class = \"form-group\">\r\n\t\t\t\t\t\t<br>\r\n\t\t\t\t\t\t<label>Select Level  : </label>\r\n\t\t\t\t\t\t<select id=\"lvl\" name=\"lvl\">`;\r\n\tfor(let slot in s_slots)\r\n\t{\r\n\t\tif(s_slots[slot].value !== 0 && s_slots[slot].value !== undefined)\r\n\t\t{\r\n\t\t\tnewContent += `<option value = \"${slot}\">Spell Slot Level ${slot.charAt(5)} - ${s_slots[slot].value} </option>`;\r\n\t\t}\r\n\t}\r\n\tnewContent += `</select></div>`;\r\n\t//Dialog and Logic\r\n\tnew Dialog({\r\n\t\ttitle : \"Creating Sorcery Points\",\r\n\t\tcontent : newContent,\r\n\t\tbuttons : {\r\n\t\t\tone : {\r\n\t\t\t\ticon :`<i class=\"fas fa-check\"></i>`,\r\n\t\t\t\tlable : \"Continue\",\r\n\t\t\t\tcallback : () => confirmed = true\r\n\t\t\t},\r\n\t\t\ttwo : {\r\n\t\t\t\ticon : `<i class=\"fas fa-times\"></i>`,\r\n\t\t\t\tlable : \"Cancel\",\r\n\t\t\t\tcallback : () => confirmed = false\r\n\t\t\t}\r\n\t\t},\r\n\t\tdefault : \"Cancel\",\r\n\t\tclose : html => {\r\n\t\t\tif(confirmed)\r\n\t\t\t{\r\n\t\t\t\t//variable creation\r\n\t\t\t\tlet lvlchosen = html.find('[name=lvl]')[0].value;\r\n\t\t\t\tlet actorUpdateData = duplicate(s_actor);\r\n\t\t\t\tlet itemUpdateData = duplicate(s_points);\r\n\t\t\t\t//This is where you would want to check for validity of use, maybe even a dialog to stop if unnecessary.\r\n\t\t\t\tactorUpdateData.data.spells[lvlchosen].value -= 1;\r\n\t\t\t\titemUpdateData.data.uses.value += Math.clamped(parseInt(lvlchosen.charAt(5)),0,itemUpdateData.data.uses.max);\r\n\t\t\t\t//character and item update\r\n\t\t\t\ts_actor.update(actorUpdateData);\r\n\t\t\t\ts_actor.updateEmbeddedEntity(\"OwnedItem\", itemUpdateData);\r\n\t\t\t\t//Display Information\r\n\t\t\t\tdisplay(`Succesfully Used a : Level ${lvlchosen.charAt(5)} Spell Slot <br> Creating : ${lvlchosen.charAt(5)} sorcery points.`);\r\n\t\t\t}\r\n\t\t}\r\n\t}).render(true);\r\n}\r\nfunction sorceryPoints_spell()\r\n{\r\n\t//variable creation\r\n\tconfirmed = false;\r\n\tlet s_cost = [2,3,5,6,7];\r\n\tlet newContent = `<div class = \"form-group\">\r\n\t\t\t\t\t\t<br>\r\n\t\t\t\t\t\t<label>Select Level  : </label>\r\n\t\t\t\t\t\t<select id=\"lvl\" name=\"lvl\">`;\r\n\tfor(let slot in s_slots)\r\n\t{\r\n\t\tif(parseInt(slot.charAt(5)) <= Math.ceil(s_class.data.levels/2) && parseInt(slot.charAt(5)) < 6)\r\n\t\t{\r\n\t\t\tif(s_points.data.uses.value >= s_cost[parseInt(slot.charAt(5)-1)] && s_slots[slot].value !== s_slots[slot].max)\r\n\t\t\t{ \r\n\t\t\t\tnewContent += `<option value=\"${slot}\">Spell Slot Level ${slot.charAt(5)} - ${s_slots[slot].value}</option>`;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tnewContent += `</select></div>`;\r\n\tnew Dialog({\r\n\t\ttitle : \"Creating Spell Slots\",\r\n\t\tcontent : newContent,\r\n\t\tbuttons : {\r\n\t\t\tone : {\r\n\t\t\t\ticon :`<i class=\"fas fa-check\"></i>`,\r\n\t\t\t\tlable : \"Continue\",\r\n\t\t\t\tcallback : () => confirmed = true\r\n\t\t\t},\r\n\t\t\ttwo : {\r\n\t\t\t\ticon : `<i class=\"fas fa-times\"></i>`,\r\n\t\t\t\tlable : \"Cancel\",\r\n\t\t\t\tcallback : () => confirmed = false\r\n\t\t\t}\r\n\t\t},\r\n\t\tdefault : \"Cancel\",\r\n\t\tclose : html => {\r\n\t\t\tif (confirmed){\r\n\t\t\t\tlet lvlchosen = html.find('[name=lvl]')[0].value;\r\n\t\t\t\tlet actorUpdateData = duplicate(s_actor);\r\n\t\t\t\tlet itemUpdateData = duplicate(s_points);\r\n\t\t\t\tactorUpdateData.data.spells[lvlchosen].value += 1;\r\n\t\t\t\titemUpdateData.data.uses.value -= Math.clamped((s_cost[parseInt(lvlchosen.charAt(5)-1)]),0,itemUpdateData.data.uses.max);\r\n\t\t\t\ts_actor.update(actorUpdateData);\r\n\t\t\t\ts_actor.updateEmbeddedEntity(\"OwnedItem\", itemUpdateData);\r\n\t\t\t\tdisplay(`Succesfully Used : ${s_cost[parseInt(lvlchosen.charAt(5)-1)]} sorcery points. <br> Creating : Spell Slot Level ${lvlchosen.charAt(5)}`);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}).render(true);\r\n}\r\nfunction metaMagic_Extended()\r\n{\r\n\tif(game.user.character.data.items.find(i=>i.name===\"Metamagic: Extended Spell\")===undefined) return ui.notifications.warn(`Your character does not have a Metamagic: Extended Spell.`);\r\n\tgame.dnd5e.rollItemMacro(\"Metamagic: Extended Spell\").then(()=> {\r\n\t\tlet itemUpdateData = duplicate(s_points);\r\n\t\titemUpdateData.data.uses.value -= 1;\r\n\t\ts_actor.updateEmbeddedEntity(\"OwnedItem\", itemUpdateData);\r\n\t});\r\n\r\n}\r\nfunction metaMagic_Twinned()\r\n{\r\n\tif(game.user.character.data.items.find(i=>i.name===\"Metamagic: Twinned Spell\")===undefined) return ui.notifications.warn(`Your character does not have a Metamagic: Twinned Spell.`);\r\n\tconfirmed = false;\r\n\tlet newContent = `<div class = \"form-group\">\r\n\t<br>\r\n\t<label>Select Level  : </label>\r\n\t<select id=\"lvl\" name=\"lvl\">`;\r\n\tfor(let slot in s_slots)\r\n\t{\r\n\t\tif(parseInt(slot.charAt(5)) <= s_points.data.uses.value)\r\n\t\t{\r\n\t\t\tnewContent += `<option value=\"${slot}\">Spell Slot Level ${slot.charAt(5)} - ${s_slots[slot].value}</option>`;\r\n\t\t}\r\n\t}\r\n\tnewContent += `</select></div>`;\r\n\tnew Dialog({\r\n\t\ttitle : \"Twinned Spell\",\r\n\t\tcontent : content,\r\n\t\tbuttons : {\r\n\t\t\tone : {\r\n\t\t\t\ticon :`<i class=\"fas fa-check\"></i>`,\r\n\t\t\t\tlable : \"Continue\",\r\n\t\t\t\tcallback : () => confirmed = true\r\n\t\t\t},\r\n\t\t\ttwo : {\r\n\t\t\t\ticon : `<i class=\"fas fa-times\"></i>`,\r\n\t\t\t\tlable : \"Cancel\",\r\n\t\t\t\tcallback : () => confirmed = false\r\n\t\t\t}\r\n\t\t},\r\n\t\tdefault : \"Cancel\",\r\n\t\tclose : html => {\r\n\t\t\tif(confirmed)\r\n\t\t\t{\r\n\t\t\t\tgame.dnd5e.rollItemMacro(\"Metamagic: Twinned Spell\").then(()=>{\r\n\t\t\t\t\tlet lvlchosen = html.find('[name=lvl]')[0].value;\r\n\t\t\t\t\tlet itemUpdateData = duplicate(s_points);\r\n\t\t\t\t\titemUpdateData.data.uses.value -= parseInt(lvlchosen.charAt(5));\r\n\t\t\t\t\ts_actor.updateEmbeddedEntity(\"OwnedItem\", itemUpdateData);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}).render(true);\r\n}\r\nfunction display(data =\"\"){\r\n\tif(data!==\"\")\r\n\t{\r\n\t\tChatMessage.create({\r\n\t\t\tuser : game.user._id,\r\n\t\t\tcontent : data,\r\n\t\t\tspeaker : speaker//, //GM whisper (to not make the chat window huge)\r\n\t\t\t//whisper : game.users.entities.filter(u=>u.isGM).map(u=>u._id)\r\n\t\t});\r\n\t}\r\n}\r\nfunction checkSlots(data = \"\")\r\n{\r\n\tif(data === \"available\")\r\n\t{\r\n\t\tfor(let slot in s_slots)\r\n\t\t{\r\n\t\t\tif(s_slots[slot].value > 0)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}else if (data === \"missing\")\r\n\t{\r\n\t\tfor(let slot in s_slots)\r\n\t\t{\r\n\t\t\tif(s_slots[slot].value !== s_slots[slot].max)\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\nfunction checkPoints(){\r\n\treturn s_points.data.uses.value;\r\n}","author":"s7gxOGja1p9WAX4j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"uscUJkmzFkbZCPtN"}
{"name":"Rations (1 day)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/inventory/meat.jpg","tooltip":"Rations (1 day)_Albrek ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Rations (1 day)\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/inventory/meat.jpg","actorIds":[],"_id":"uza8KvEEdTXmVWc5"}
{"name":"Delete Items Not In Folders","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Delete Items Not In Folders ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Clears the actors entity of any entries not in a folder.\r\n * Change 'actors' to another game entity such as tables, items, macros, etc... to clear items not in directory for those places.\r\n * Author: KrishMero#1792\r\n */\r\n \r\n game.actors.forEach(t => {\r\n  if (!t.data.folder) {\r\n    t.delete();\r\n  }\r\n});","author":"s7gxOGja1p9WAX4j","img":"imports/icons/full-folder.svg","actorIds":[],"_id":"v2cbiUmzsrr3gAeS"}
{"name":"Whisper","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Whisper ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"ChatMessage.create({\r\n    content: args[0],\r\n    whisper: ChatMessage.getWhisperIDs(\"GM\")\r\n})","author":"s7gxOGja1p9WAX4j","img":"imports/icons/whisper-ico.png","actorIds":[],"_id":"vF4u3d7uqYSm25qL"}
{"name":"Banishment","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Banishment ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\r\n\r\nif (args[0] === \"on\") {\r\n    target.update({hidden : true});\r\nChatMessage.create({content: target.name + ' was banished'});\r\n}else {\r\n target.update({hidden : false})\r\n}","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/link-eerie-3.jpg","actorIds":[],"_id":"vRD8CrmfqTzcnNZ9"}
{"name":"Minor Illusion","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/shadow_12.jpg","tooltip":"Minor Illusion_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Minor Illusion\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/shadow_12.jpg","actorIds":[],"_id":"vdDyeYrYFqzpGblP"}
{"name":"Shield","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-magenta-1.jpg","tooltip":"Shield_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Shield\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-magenta-1.jpg","actorIds":[],"_id":"viUX3j4Z0exUeBUB"}
{"name":"Compelled Duel","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/light_03.jpg","tooltip":"Compelled Duel_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Compelled Duel\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/skills/light_03.jpg","actorIds":[],"_id":"vitmDBGERgRCjo6O"}
{"name":"Whisper Players","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Whisper Players ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/** \r\n * Provides a dialog to whisper specific players. If you have tokens selected, it will automatically default to try and whisper those players.\r\n * @Author: Nelson#3570\r\n */\r\n\r\nlet applyChanges = false;\r\n\r\nlet users = game.users.filter(user => user.active);\r\nlet checkOptions = \"\"\r\nlet playerTokenIds = users.map(u => u.character?.id).filter(id => id !== undefined);\r\nlet selectedPlayerIds = canvas.tokens.controlled.map(token => {\r\n  if (playerTokenIds.includes(token.actor.id)) return token.actor.id;\r\n});\r\n\r\n// Build checkbox list for all active players\r\nusers.forEach(user => {\r\n  let checked = !!user.character && selectedPlayerIds.includes(user.character.id) && 'checked';\r\n  checkOptions+=`\r\n    <br>\r\n    <input type=\"checkbox\" name=\"${user.id}\" value=\"${user.name}\" ${checked}>\\n\r\n    <label for=\"${user.id}\">${user.name}</label>\r\n  `\r\n});\r\n\r\nnew Dialog({\r\n  title:\"Whisper\",\r\n  content:`Whisper To: ${checkOptions} <br>\r\n    <label for=\"message\">Message:</label>\r\n    <textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\"></textarea><br>`,\r\n  buttons:{\r\n    whisper:{   \r\n      label:\"Whisper\",\r\n      callback: (html) => createMessage(html)\r\n    }\r\n  }\r\n}).render(true);\r\n\r\nfunction createMessage(html) {\r\n  var targets = [];\r\n  // build list of selected players ids for whispers target\r\n  for ( let user of users ) {\r\n    if (html.find('[name=\"'+user.id+'\"]')[0].checked){\r\n      targets.push(user.id);\r\n    }\r\n    var messageText = html.find('[name=\"message\"]')[0].value\r\n  }\r\n\r\n  ChatMessage.create({\r\n    content: messageText,\r\n    whisper: targets\r\n  });\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/whisper-ico.png","actorIds":[],"_id":"vkRcb2WtuELrrI6k"}
{"name":"Get Passive (by token)","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro           ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Get me the Passive numbers for the token I select\r\n// Written by Jon Whitehouse [MTGCarver#7753]\r\n\r\n// Get my selected tokens please\r\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\r\n\r\n// if there are no selected tokens, display default character\r\nif (actors.length < 1) {\r\n  actors = game.users.entities.map(entity => {\r\n    if (entity.active && entity.character !== null) {\r\n      return entity.character;\r\n    }\r\n  });\r\n}\r\nconst validActors = actors.filter(actor => actor != null);\r\nlet messageContent = '<h2><b>Passive Senses</b></h2><br><br>';\r\n\r\nfor (const selectedActor of validActors) {\r\nlet pp = selectedActor.data.data.skills.prc.passive; // passive perception\r\nlet pi = selectedActor.data.data.skills.inv.passive; // passive investigation\r\nlet pn = selectedActor.data.data.skills.ins.passive; // passive insight\r\nmessageContent += `<h2>${selectedActor.name}</h2> <br>Passive Perception: <b>${pp}</b><br> Passive Investigation: <b>${pi}</b><br>Passive Insight: <b>${pn}</b><br><br>`; // creating the output string\r\n}\r\n\r\n// create the message\r\nif (messageContent !== \"\") {\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: messageContent,\r\n        whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.2_94.png","actorIds":[],"_id":"vlPUWo4CjTTiHP0L"}
{"name":"Get Passive Perception","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"","icon":""}}},"scope":"global","command":"// pull each player's passive perception then whisper the GM with the results.\r\n// author @Erogroth#7134\r\n\r\nlet actors = game.actors.entities.filter(e=> e.data.type==='character');\r\n\r\n// pull each player's passive perception\r\nlet messageContent = '';\r\nlet messageHeader = '<b>Passive Perception</b><br>';\r\nfor(let actor of actors) {\r\n  let pp = actor.data.data.skills.prc.passive; // this gives the passive perception\r\n   messageContent += `${actor.name} <b>${pp}</b><br>`; // creating the output string\r\n}\r\n\r\n// create the message\r\nif(messageContent !== '') {\r\n  let chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: messageHeader + messageContent,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.2_94.png","actorIds":[],"_id":"vnU8MrRE1iVH7gON"}
{"name":"TolltheDead","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"TolltheDead ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"  \r\n(()=>{\r\n  if(game.user.targets.size !== 1) return ui.notifications.error(`Please target exactly 1 token.`);\r\n  let target = game.user.targets.values().next().value;\r\n\r\n  item.roll().then(result => {\r\n    if(!result) return;\r\n\r\n    //check target DC\r\n    let save_roll = new Roll(`1d20 + ${target.actor.data.data.abilities.wis.save}`).roll();\r\n\r\n    save_roll.toMessage({\r\n      speaker : ChatMessage.getSpeaker({token : target}),\r\n      rollMode : \"blindroll\"\r\n    });\r\n\r\n    if(save_roll.total < item.data.data.save.dc)\r\n    {\r\n      if(target.actor.data.data.attributes.hp.value !== target.actor.data.data.attributes.hp.max)\r\n      {\r\n        item.rollDamage({versatile : true});\r\n      }else{\r\n        item.rollDamage();\r\n      }\r\n    }\r\n  })\r\n})();","author":"s7gxOGja1p9WAX4j","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"vooEhsHT0TSosiPD"}
{"name":"Mending","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/wind-blue-1.jpg","tooltip":"Mending_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Mending\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/wind-blue-1.jpg","actorIds":[],"_id":"vqr5xx0E6yjzbgOY"}
{"name":"Warding Bond","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-sky-2.jpg","tooltip":"Warding Bond_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Warding Bond\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-sky-2.jpg","actorIds":[],"_id":"vtT2kP4FjAIRzE8u"}
{"name":"Basic Repeating","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"modules/turnAlert/icons/timer-icon.svg","tooltip":"Basic Repeating  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"/**\r\n * Basic Repeating Turn Alert\r\n * Creates an alert that triggers on the current turn,\r\n *   repeats every round, and doesn't expire.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 1,\r\n    roundAbsolute: false,\r\n    turnId: game.combat.combatant._id,\r\n    repeating: {\r\n        frequency: 1,\r\n    },\r\n    message: \"Triggers every turn\",\r\n};\r\n\r\nTurnAlert.create(alertData);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"w13xe12jYwNZ7rs7"}
{"name":"Net","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/net.jpg","tooltip":"Net_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Net\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/net.jpg","actorIds":[],"_id":"w4DhVQnUzTBczCwt"}
{"name":"Sword Burst","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Sword Burst_Meatshield  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Sword Burst\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/blood%20tornado%20c.jpg","actorIds":[],"_id":"wDNvIGAX9u7upZFP"}
{"name":"TokenUnSetFlag","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"TokenUnSetFlag ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).unsetFlag(args[1], args[2]);\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/token-unset.svg","actorIds":[],"_id":"wEBQSWdxQ4Rw4Qmx"}
{"name":"Roll Table","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Roll Table ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Simple macro example to only roll from a table and whisper the result to the DM\r\n\r\nconst table = game.tables.entities.find(t => t.name === \"name of your table\");\r\nlet roll = table.roll();\r\n\r\nlet chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: roll.results[0].text,\r\n    whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\r\n};\r\nChatMessage.create(chatData, {});\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/rolling-dices.svg","actorIds":[],"_id":"wKvxFFhT4tDMQrkA"}
{"name":"Grease","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fog-orange-1.jpg","tooltip":"Grease_Teferi ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Grease\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fog-orange-1.jpg","actorIds":[],"_id":"xNsMmZVV9wHE6hpZ"}
{"_id":"xPbyVdZqOrmtuYB8","name":"Toggle Defeated","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Toggle Defeated ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"//toggle defeated icon\r\n\r\n//change to accept more than 1\r\n//change to work outside of combat\r\n\r\n(async ()=>{\r\n  const effect = `icons/svg/skull.svg`;\r\n  const combat = game.combats.active;\r\n  \r\n  for(let token of canvas.tokens.controlled)\r\n  {\r\n    //if no combat, add to combat (if the token isn't already affected by the effect)\r\n    if(!combat)\r\n    {\r\n      if(token.data.overlayEffect !== effect)\r\n      { await token.toggleCombat(); }\r\n    }else{\r\n      //if combat & already has the effect --- remove combat\r\n      if(token.data.overlayEffect === effect && combat.data.combatants.includes(token.data))\r\n      {\r\n        await token.toggleCombat();\r\n      }else{\r\n        //if combat & doesn't have the effect, remove combat and add effect\r\n        await token.toggleOverlay(effect);\r\n        await token.toggleCombat();\r\n      }\r\n    }\r\n  }\r\n})();","author":"s7gxOGja1p9WAX4j","img":"icons/svg/skull.svg","actorIds":[]}
{"name":"Fly","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/link-spirit-1.jpg","tooltip":"Fly_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Fly\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/link-spirit-1.jpg","actorIds":[],"_id":"xUtLfCIw4Mdao8Dg"}
{"name":"deleteToken","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"deleteToken  ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"let startScene = game.scenes.get(args[0]);\r\nif (!startScene || !args[1]) return;\r\nawait startScene.deleteEmbeddedEntity(\"Token\", args[1]);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/breaking-chain.svg","actorIds":[],"_id":"xlwkXk23y6Rs9R5z"}
{"name":"Clockwork Amulet","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/Misc/clockwork-amulet.jpg","tooltip":"Clockwork Amulet_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Clockwork Amulet\")","author":"s7gxOGja1p9WAX4j","img":"imports/Misc/clockwork-amulet.jpg","actorIds":[],"_id":"xlyjpj4j9PNLKRD8"}
{"name":"B - Multi-Filters Example","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"B - Multi-Filters Example  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"distortion\",\r\n    maskPath: \"/modules/tokenmagic/fx/assets/waves-2.png\",\r\n    maskSpriteScaleX: 7,\r\n    maskSpriteScaleY: 7,\r\n    padding: 50,\r\n    animated:\r\n    {\r\n        maskSpriteX: { active: true, speed: 0.05, animType: \"move\" },\r\n        maskSpriteY: { active: true, speed: 0.07, animType: \"move\" }\r\n    }\r\n},\r\n{\r\n    filterType: \"ray\",\r\n    time: 0,\r\n    color: 0xEF9000,\r\n    alpha: 0.25,\r\n    divisor: 32,\r\n    anchorY: 1,\r\n    animated :\r\n    {\r\n       time : \r\n       { \r\n          active: true, \r\n          speed: 0.0005, \r\n          animType: \"move\" \r\n       }\r\n    }\r\n},\r\n{\r\n    filterType: \"glow\",\r\n    distance: 10,\r\n    outerStrength: 8,\r\n    innerStrength: 0,\r\n    color: 0xB03000,\r\n    quality: 0.5,\r\n    animated:\r\n    {\r\n        color: \r\n        {\r\n           active: true, \r\n           loopDuration: 3000, \r\n           animType: \"colorOscillation\", \r\n           val1:0xB03000, \r\n           val2:0xFFD010\r\n        }\r\n    }\r\n}\r\n];\r\n\r\nTokenMagic.addFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/B-MultiFiltersExample.JPG","actorIds":[],"_id":"xwp9OnBFaPCMrsBH"}
{"name":"Protection from Poison","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/protect-acid-1.jpg","tooltip":"Protection from Poison_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Protection from Poison\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/protect-acid-1.jpg","actorIds":[],"_id":"xz3gQsLAeJuAuZ9b"}
{"name":"Zephyr Strike","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"icons/svg/mystery-man.svg","tooltip":"Zephyr Strike_Travaran  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Zephyr Strike\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/spells/evil-comet.svg","actorIds":[],"_id":"y58oixA5bo8NNfHs"}
{"name":"Healer Healing","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/first-aid-kit.svg","tooltip":"Healer Healing_Rinnian ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Healer Healing\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/first-aid-kit.svg","actorIds":[],"_id":"yF11XP8NRMmDsu3Q"}
{"name":"Find Steed","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/wild-jade-2.jpg","tooltip":"Find Steed_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Find Steed\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/wild-jade-2.jpg","actorIds":[],"_id":"yNmfBRXicmTPjHBA"}
{"name":"24 - T01 - Hexa Force Field","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"24 - T01 - Hexa Force Field   ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let params =\r\n[{\r\n    filterType: \"field\",\r\n    filterId: \"myHexaField\",\r\n    shieldType: 2,\r\n    gridPadding: 3,\r\n    color: 0xCC00CC,\r\n    time: 0,\r\n    blend: 3,\r\n    intensity: 1,\r\n    lightAlpha: 0.5,\r\n    lightSize: 0.5,\r\n    scale: 1,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n}];\r\n\r\nTokenMagic.addUpdateFiltersOnSelected(params);","author":"s7gxOGja1p9WAX4j","img":"imports/icons/tokenfx/hexaforcefield.png","actorIds":[],"_id":"yVlw5IRYZV6lR214"}
{"name":"Fire Bolt","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/spells/fireball-red-1.jpg","tooltip":"Fire Bolt_Bruës ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Fire Bolt\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/fireball-red-1.jpg","actorIds":[],"_id":"yZuYcLxyYwOZcUbf"}
{"name":"Longsword","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/items/weapons/sword-long.jpg","tooltip":"Longsword_Bramdahr ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Longsword\")","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/items/weapons/sword-long.jpg","actorIds":[],"_id":"yiUskClKnLScFHsQ"}
{"name":"ActorUpdate","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"ActorUpdate ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"//args[0] = actor ID\r\n//args[1] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\n(async()=>{\r\n  await canvas.tokens.get(args[0]).actor.update(args[1]);\r\n})();","author":"s7gxOGja1p9WAX4j","img":"imports/icons/actor-update.svg","actorIds":[],"_id":"ypouMmaERcee5mw3"}
{"name":"Repeating - Delayed Trigger","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{},"scope":"global","command":"/**\r\n * Delayed Trigger Repeating Turn Alert\r\n * Creates an alert that initially triggers on the current turn\r\n *   5 rounds from now, repeats every round, and expires 5 rounds\r\n *   after the initial trigger.\r\n *\r\n * Author: Cole Schultz (cole#9640)\r\n * For other example macros and api reference,\r\n *   visit the Turn Alert wiki:\r\n *   https://github.com/schultzcole/FVTT-Turn-Alert/wiki\r\n */\r\n\r\nconst alertData = {\r\n    round: 5,\r\n    roundAbsolute: false,\r\n    turnId: game.combat.combatant._id,\r\n    repeating: {\r\n        frequency: 1,\r\n        expire: 5,\r\n        expireAbsolute: false,\r\n    },\r\n    message: \"Will start triggering every round 5 rounds from now!\",\r\n};\r\n\r\nTurnAlert.create(alertData);\r\n","author":"s7gxOGja1p9WAX4j","img":"modules/turnAlert/icons/timer-icon.svg","actorIds":[],"_id":"zCYO0OtlSWoFD5jY"}
{"name":"Bane","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro  ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true}},"scope":"global","command":"let target = canvas.tokens.get(args[1])\r\nif (!target) {\r\n    ChatMessage.create({content: \"No target found\"})\r\n    return;\r\n}\r\nif (args[0] === \"on\") {\r\nvar params = [{\r\n            filterType: \"field\",\r\n    filterId: \"Bane\",\r\n    shieldType: 10,\r\n    gridPadding: 1,\r\n    color: 0x902005,\r\n    time: 0,\r\n    blend: 5,\r\n    intensity: 0.5,\r\n    lightAlpha: 4,\r\n    lightSize: 0.8,\r\n    scale: 0.5,\r\n    radius: 1,\r\n    chromatic: false,\r\n    animated :\r\n    {\r\n      time : \r\n      { \r\n        active: true, \r\n        speed: 0.0015, \r\n        animType: \"move\" \r\n      }\r\n    }\r\n        }];\r\n}\r\nelse {\r\n     var params = [{ \r\n     filterType: \"field\",\r\n     filterId: \"Bane\",\r\n     enabled: false\r\n     }];\r\n}\r\nTokenMagic.addUpdateFilters(target, params);","author":"s7gxOGja1p9WAX4j","img":"systems/dnd5e/icons/spells/rip-magenta-2.jpg","actorIds":[],"_id":"zOYqkcvTghSyB1wC"}
{"name":"Remove Conditions","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Remove Conditions ","icon":"icons/svg/ice-aura.svg","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"for ( let token of canvas.tokens.controlled ){\r\n  await token.update({\"effects\": []});\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/caduceus.svg","actorIds":[],"_id":"zR5pF6lys0hGyg3H"}
{"name":"Bend Luck","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"dnd5e":{"itemMacro":true},"macro-marker":{"activeData":{"icon":"imports/icons/bend-luck.svg","tooltip":"Bend Luck_Albrek ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"game.dnd5e.rollItemMacro(\"Bend Luck\")","author":"s7gxOGja1p9WAX4j","img":"imports/icons/bend-luck.svg","actorIds":[],"_id":"zUYxVKFvSVHrX9wk"}
{"name":"TokenSetFlag","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"TokenSetFlag ","colour":"#ff0000","trigger":""}}},"scope":"global","command":"//args[0] = token ID\r\n//args[1]-[3] = update data\r\n\r\nif(!args[0] || !args[1]) return ui.notifications.error(`${this.name}'s arguments are invalid.`);\r\n\r\ncanvas.tokens.get(args[0]).setFlag(args[1], args[2], args[3]);\r\n\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/settoken.svg","actorIds":[],"_id":"zh9nZFZFWcywSM5W"}
{"name":"Hunters Mark - Cast Mark","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"type":"script","flags":{"macro-marker":{"activeData":{"tooltip":"Hunters Mark - Cast Mark ","icon":"imports/icons/Icon.1_16.png","colour":"#ff0000","trigger":""}},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//This marco is designed to be used in conjunction with MarkAttackWrapper.json\r\n//and GMConditions.js.\r\n\r\n//It is designed to replace the standard rollItemMacro for either the Hex\r\n//spell or the hunter's mark Spell on either the warlock or ranger, but\r\n//it will work on any class with hex or hunter's mark by changing the Localization\r\n//parameters. To use hex, replace warlockName variable below and if you\r\n//would like to use it with hunter's mark replace rangerName variable below.\r\n\r\n// CAUTION! if you change your global damage variables while this macro is\r\n//active the change will be erased. It should work fine with dynamic effects.\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//This macro is designed to be used with the combat utility belt module.\r\n//and the furnace module. Once you have it installed, you will have to enable \r\n//enhanced conditions, and create a condition called 'Marked' as the Localization \r\n//parameter below. You just need to update that parameter to match whatever condition \r\n//name you want if you want to use a different name in condition lab.\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//Localization\r\nconst rangerName = \"Ranger\";\r\nconst warlockName = \"Warlock\";\r\nconst rangerSpell = \"Hunter's Mark\";\r\nconst warlockSpell = \"Hex\";\r\nconst condition = \"Marked\";\r\nconst flagScope = \"world\";\r\n\r\n//parameters\r\nif (!token) ui.notifications.error(\"Please select your token first.\");\r\nlet myToken = token;\r\nconst markDmg = \" + 1d6\";\r\nif (!game.user.targets.values().next().value) {\r\n  ui.notifications.error(\"Please select one target\");\r\n}\r\nconst target = game.user.targets.values().next().value;\r\n\r\nconst conditionList = target.data.effects;\r\nconst actorId = myToken.actor._id + \"_mark\";\r\nconst bonuses = myToken.actor.data.data.bonuses;\r\nlet className = \"\";\r\nlet spellName = \"\";\r\nlet gm_macro = null\r\n\r\n//Check to make sure that the GM has the GMConditions macro assigned.\r\ntry{\r\n    gm_macro = game.macros.entities.find(mb => mb.name === \"GMConditions\");\r\n}\r\ncatch(err)\r\n{\r\n    ui.notifications.error(\"GMConditions Macro was not found\")\r\n}\r\n\r\n//If Move flag and condition to a new selected target\r\nfunction move() {\r\n  let swapTarget = myToken.getFlag(flagScope, actorId);\r\n  const remCon = canvas.tokens.get(swapTarget.targetId);\r\n  gm_macro.execute(\"remove\", condition, swapTarget.targetId);\r\n  swapTarget.targetId = target.data._id;\r\n  (async () => {\r\n    await myToken.unsetFlag(flagScope, actorId);\r\n    myToken.setFlag(flagScope, actorId, swapTarget);\r\n  })();\r\n  gm_macro.execute(\"apply\", condition, target.id);\r\n  console.log();\r\n}\r\n\r\n//revert global damage to base, remove the condition and unset flag\r\n\r\nfunction remove() {\r\n  const flagId = myToken.getFlag(flagScope, actorId);\r\n\r\n  let obj = {\r\n    \"data.bonuses.mwak.damage\": flagId.meleeAtk,\r\n    \"data.bonuses.rwak.damage\": flagId.rangeAtk,\r\n    \"data.bonuses.msak.damage\": flagId.meleeSpell,\r\n    \"data.bonuses.rsak.damage\": flagId.rangeSpell\r\n  };\r\n\r\n  updateActor(myToken, obj);\r\n\r\n  const remFlag = canvas.tokens.get(flagId.targetId);\r\n\r\n  (async () => {\r\n    await gm_macro.execute(\"remove\", condition, flagId.targetId);\r\n    await myToken.unsetFlag(flagScope, actorId);\r\n  })();\r\n}\r\n\r\n// User input to move or remove flag and condition\r\n\r\nfunction alterMark() {\r\n  const d = new Dialog({\r\n    title: \"Mark Enemy\",\r\n    content: \"<p>Would you like to move or remove?</p>\",\r\n    buttons: {\r\n      one: {\r\n        icon: '<i class=\"fas fa-check\"></i>',\r\n        label: \"Move\",\r\n        callback: () => move()\r\n      },\r\n      two: {\r\n        icon: '<i class=\"fas fa-times\"></i>',\r\n        label: \"Remove\",\r\n        callback: () => remove()\r\n      }\r\n    },\r\n    default: \"two\",\r\n    close: () => console.log(\"Dialog closed\")\r\n  }).render(true);\r\n}\r\n\r\n// cast the spell, apply the condition, create and set flag\r\n\r\nasync function castSpell() {\r\n  try {\r\n    await game.dnd5e.rollItemMacro(spellName);\r\n  } catch (err) {\r\n    return null;\r\n  }\r\n  gm_macro.execute(\"apply\", condition, target.id);\r\n\r\n  let globalDmg = {\r\n    targetId: target.data._id,\r\n    meleeAtk: bonuses.mwak.damage,\r\n    rangeAtk: bonuses.rwak.damage,\r\n    meleeSpell: bonuses.msak.damage,\r\n    rangeSpell: bonuses.rsak.damage,\r\n    isSet: false\r\n  };\r\n  myToken.setFlag(flagScope, actorId, globalDmg);\r\n}\r\n\r\n//If the class is ranger and has the hunter's mark spell, set the spell name\r\n//or say the spell doesn't exist.\r\n\r\nfunction setRangerSpell() {\r\n  className = rangerName;\r\n  if (actor.items.find(i => i.name === `${rangerSpell}`)) {\r\n    spellName = rangerSpell;\r\n    castSpell();\r\n  } else {\r\n    ui.notifications.error(\r\n      \"Selected actor does not have the \" + rangerSpell + \" spell.\"\r\n    );\r\n    console.log(\"Selected actor does not have the \" + rangerSpell + \" spell.\");\r\n    return null;\r\n  }\r\n}\r\n\r\n//If the class is warlock and has the hex spell set the spell name\r\n//if say the spell doesn't exist\r\n\r\nfunction setWarlockSpell() {\r\n  className = warlockName;\r\n  if (actor.items.find(i => i.name === `${warlockSpell}`)) {\r\n    spellName = warlockSpell;\r\n    castSpell();\r\n  } else {\r\n    ui.notifications.error(\r\n      \"Selected actor does not have the \" + warlockSpell + \" spell.\"\r\n    );\r\n    console.log(\"Selected actor does not have the \" + warlockSpell + \" spell.\");\r\n    return null;\r\n  }\r\n}\r\n\r\n//check whether the token is a ranger or warlock\r\n\r\nfunction checkSpell() {\r\n  if (actor.items.find(i => i.name === `${rangerName}`)) {\r\n    setRangerSpell();\r\n  } else if (actor.items.find(i => i.name === `${warlockName}`)) {\r\n    setWarlockSpell();\r\n  } else {\r\n    ui.notifications.error(\r\n      \"Please select a \" + rangerName + \" or \" + warlockName + \" token.\"\r\n    );\r\n    console.log(\r\n      \"Please select a \" + rangerName + \" or \" + warlockName + \" token.\"\r\n    );\r\n  }\r\n}\r\n\r\nasync function updateActor(updateToken, obj) {\r\n  await updateToken.actor.update(obj);\r\n}\r\n\r\n//If the flag exists call functions to move or remove if it doesn't exist\r\n// call function to cast the spell\r\n\r\nif (myToken.getFlag(flagScope, actorId)) {\r\n  alterMark();\r\n} else {\r\n  checkSpell();\r\n}\r\n","author":"s7gxOGja1p9WAX4j","img":"imports/icons/Icon.1_16.png","actorIds":[],"_id":"zzNvrIPeVDrNd9H2"}
