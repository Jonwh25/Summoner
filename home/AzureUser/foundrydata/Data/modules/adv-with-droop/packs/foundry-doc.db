{"name":"General Game Controls","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<p>These controls generally apply across all aspects of Foundry functionality.</p>\n<h3 id=\"game-keyboard\">Keyboard Controls</h3>\n<ol>\n<li>\n<h4>Close Open Windows</h4>\n<div>Esc</div>\n</li>\n<li>\n<h4>Toggle Main Menu</h4>\n<div>Esc</div>\n</li>\n<li>\n<h4>Toggle Game Pause</h4>\n<div>Space</div>\n</li>\n<li>\n<h4>Activate Hotbar Slot</h4>\n<div>1&nbsp;2&nbsp;3&nbsp;...&nbsp;0</div>\n</li>\n</ol>","_id":"mj9BKpOwU7jvrxKX"}
{"name":"About Face","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1 style=\"margin: 0in; font-family: Calibri; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">About Face</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">About Face is a module for FoundryVTT that changes a token's direction based on movement. It also provides optional \"facing\" indicators for tokens.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Usage</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Two options are available in the game settings module config. Otherwise, with everything enabled:</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Move your token!</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Hold SHIFT and using your W,A,S,D or &uarr;,&larr;,&darr;,&rarr; you can change the direction your token is facing without moving</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Known Issues / Limitations</span></h2>\n<ul style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in;\" type=\"disc\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Assumes the token default facing direction is \"down\". Other artwork may respond differently.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">This has only been tested with square grids (not hexes) and uses 45 degree snapping for tokens.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Tokens don't change directions immediately (takes a movement for updateToken to start firing)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Have experienced an issue where locking a token makes it unusable until refresh</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Direction indicators are created using the other players' colors. Because of the way drawing works, players will need to refresh after connecting in order to see all the colors *BUG</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Unsure if 'facing' state carries from one session to another.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">May need to refresh if redrawing the scene or moving tokens to a new scene. *should be fixed</span></li>\n</ul>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Troubleshooting</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Refresh Foundry VTT webpage</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold; font-style: italic;\">How do I keep certain tokens from spinning?</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">You can lock tokens by either double-clicking and selecting the token icon from the hud or accessing from the character sheet. The option you're looking for is \"Lock Rotation\" under the \"Position\" tab.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://github.com/eadorin/about-face\">https://github.com/eadorin/about-face</a></p>","_id":"HpWDNf8kU2pZhtEV"}
{"name":"About Time","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<div style=\"direction: ltr; border-width: 100%;\">\n<div style=\"direction: ltr; margin-top: 0in; margin-left: 0in; width: 7.6791in;\">\n<div style=\"direction: ltr; margin-top: 0in; margin-left: 0in; width: 7.6791in;\">\n<h1 style=\"margin: 0in; font-family: Calibri; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">About-time</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">A module to support a game time clock in Foundry VTT. Arbitrary calendars are supported Gregorian and Greyhawk supplied but it is easy to add your own. See notes at the end. Please have a look at Gettingstarted.md it has more information.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">DateTime Arithmentic is supported allowing calculations like DateTime.Now().add({days:1}) (increments can be negative, but must be integers)</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">DateTime represents a date and time comprising ({years, months, days, hours, minutes, seconds}) and repsents an actual date and time.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">DTMod is a class for representing time intervals, game.Gametime.DTMod.create({years, months, days, hours. minutes, seconds}) only represents an interval to be applied to a DateTime. Typically you would do things like DateTime.now().add({days: 5})</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">See also gettingStarted.md</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The gametime clock can bet set/advanced as you wish. The clock can also be set to run in real time at a multiple/fraction of real world time. The game clock is snchronised betwee all clients and time updates are broadcast to each client. You can register for them via Hooks.on(\"clockUpdate\").</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The real use for the clock is having events fire at predefined times or intervals.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">You can call arbitrary code or macros based off the game time clock. Allowing things like</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">game.Gametime.doEvery({hours:24}, \"Eat Food\")</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">There are three event triggering calls</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<ul style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in;\" type=\"disc\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">doXXX call a javascript function or execute a macro.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">reminderXXX send a message to the console.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">notifyXXX(eventName, args). Notify all clients via Hooks.call(\"about-time.eventTrigger\", name, args).</span></li>\n</ul>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">XXX can be one of At, In, Every.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<ul style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in;\" type=\"disc\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">So doAt(DateTime,....) runs the handler at the given clock time.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">doIn(DTMod,....)<span style=\"mso-spacerun: yes;\">&nbsp; </span>runs the handler after DTMod time from now.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">doEvery(DTMod) rus the event every time DTMod time passes.</span></li>\n</ul>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">When combat starts the clock enters a special mode where game time advances 6 seconds (configurable) at the end of each turn. This allows for timed effects/conditions, e.g.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">when blessed the macro could look like:</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<div style=\"direction: ltr;\">\n<table style=\"direction: ltr; border-collapse: collapse; border: 1pt solid #A3A3A3;\" title=\"\" border=\"1\" summary=\"\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td style=\"background-color: #bdd7ee; vertical-align: top; width: 7.5791in; padding: 2.0pt 3.0pt 2.0pt 3.0pt; border: 1pt solid #A3A3A3;\">\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">DynamicItems.toggleEffectActive(actor, \"Bless\", true);</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">game.Gametime.doIn(game.Gametime.DMf{minutes:1}, DynamicItems.toggleEffectsActive, actor, \"Bless\", false)</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">so that bless will finish after 60 seconds.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">When combat ends the clock reverts to its previous mode.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">There are gametime \"Events\" which are specified as ET.notifyEvery({hours: 1}, \"There is a wandering monster in the vicinity\", ...args). This will fire the hook \"eventTrigger\" on all connected clients. It can be waited for via Hooks.on(\"eventTrigger\", (...args) =&gt; {})</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The event queue, from where handlers fire is per client and persistent so whenever they start up their queue will be active.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The core classes are</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">DTCalc</span> stores infromation about the calendar, exposed as game.Gamtime.DTCalc or the global DTC.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">DTMod</span> represents time interals, exposed as game.Gametime.DTMod or the global DM.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">DateTime</span> represents a DateTime in the current calendar, exposed as game.Gametime.DateTime or the global DT.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">ElapsedTime</span> represents the per client event queue, exposed as game.Gametime.ElapsedTime or the global ET.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Pseudoclock</span> represents the game clock. Not exposed directly, but has helper methods exposed in</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">ElapsedTime</span>. The clock and queue states are persistent across game restarts.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Usage</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">When the module is enabld a psuedo clock is started on the GM's client. Each other client recieves time updates from the GM's client<span style=\"mso-spacerun: yes;\">&nbsp; </span>whnever the GM changes the clock.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Why should I care?</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">You can now accurately track game time in whatever way you want.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">You can trigger events to occur at specified times. The event queue is local to each client.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">In combat the pseudo clock advances by 6 seconds per round so you can implement time effects which last for say 10 rounds.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">You can track elapsed game time with macros like</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">game.Gametime.advanceTime(game.Gametime.DMf(\"hours: 1}))</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">** At present the interface is programatic only **</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Access these via game.Gametime.XXXXX</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<ul style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in;\" type=\"disc\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">doEvery(DM{days:1}, () =&gt; console.log(\"another day another dollar\")) every day run the handler.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">doAt({hours:1}, \"My Macro\")) run a macro in 1 hour of gametime</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">reminderAt({minutes: 10}, \"Check for wandering monsters\"} send a message to the console.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">reminderEvery({minutes: 10}, \"Check for wandering monsters\"} do a reminder every 10 minutes.</span></li>\n</ul>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Each of the above return an id which can be used to cancel the event</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<ul style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in;\" type=\"disc\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">clearTimeout(eventID)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">currentTime() return the current time in seconds</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">currentTimeString() return the current time in the form \"dd hh:mm:ss\"</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.isMaster() is the cleint the master time server</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.isRunning() is the pseudo clock running in realtime</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.doAt(): At the specified time do the handler/macro at a specified time doAt(datetime, handler, arguments) or doAt(dateTime, macro)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.doIn(): Execute the specified handler/macro in the spericifed interval, i.e. doIn({mintues: 30}, ....)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.doEvery(): ElapsedTime.doEvery,</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.reminderAt(): At the specified time log the message to the console reminderAt(datetime, \"reminder text\", ...args)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.reminderIn(): After the specified interval send the reminder to the console</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.reminderEvery(): Every DTMod inteval send the specified message to theconsole</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.notifyAt(): notifyAt(DateTime, \"event name\", ...args) At the specified time call Hooks. callAll(\"eventTrigger\", eventName, ...args)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.notifyIn(): After DTMod interval notify all cleints</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.notifyEvery(): Every DTMod interval nofity all clients.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.clearTimeout:() Each doXXX, remindXXX, notifyXXX registration returns an ID. clearTimeout(id) can be used to cancel the timeout</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.getTimeString(): Return the current gameTime as a string HH:MM:SS</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.getTime(): return a DTMod with the current time</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.queue(): show the current event queue</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.ElapsedTime the ElapsedTime singleton</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.DTM(): The DTMod class</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.DTC(): The DTCalc class</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.DT(): The DateTime calss</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.DMf(): create a new DTMod({years:y, months:m, days:d, hours:h, minutes:m, seconds:s})</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.DTf(): create the date time corresponding to {years:y, months:m, days:d, hours:h, minutes:m, seconds:s}. If years is omitted it defaults to 1970 or all parameters omitted defaults to 1/1/1970, 00:00:00.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.DTNow() current gametime</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.DTf({years: 1900, months: 5, days: 3}).longDate() yields {date: \"Sunday June 04 1900\", time: \"00:00:00\"} and game.Gametime.DTf({years: 1900, months: 5, days: 3}).shortDate() yields {date: \"1900/06/04\", time: \"00:00:00\"}</span></li>\n</ul>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">On the GM's client the following can be used</p>\n<ul style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in;\" type=\"disc\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.startRunning() start the pseudo real time clock</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.stopRunning() stop the pseudo real time clock</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.advanceClock(timeInSeconds)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.advanceTime({days: d, hours: h, minutes: m, seconds: s}) advance the clock by the specified amount.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.setTime(DateTime): set the current time to the specified date time</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">game.Gametime.setClock(timeInSeconds) set the clock to timeInSeconds</span></li>\n</ul>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">DTCalc calendar format</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Years are 1 based and months/days are 0 based. So February 23rd 1970 is represented as 1970/1/22</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<div style=\"direction: ltr;\">\n<table style=\"direction: ltr; border-collapse: collapse; border: 1pt solid #A3A3A3;\" title=\"\" border=\"1\" summary=\"\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td style=\"background-color: #aeabab; vertical-align: top; width: 7.5791in; padding: 2.0pt 3.0pt 2.0pt 3.0pt; border: 1pt solid #A3A3A3;\">\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">const<span style=\"mso-spacerun: yes;\">&nbsp; </span>GregorianCalendar = {</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">// month lengths in days - first number is non-leap year, second is leapy year</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"month_len\": {</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"January\": {days: [31,31], intercalary: false},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"February\": {days:[28, 29]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"March\": {days:[31,31]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"April\": {days:[30,30]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"May\": {days:[31,31]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"June\": {days:[30,30]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"July\": {days:[31,31]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"August\": {days:[31,31]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"September\": {days:[30,30]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"October\": {days:[31,31</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"November\": {days:[30,30]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"December\": {days:[31,31]},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">// a function to return the number of leap years from 0 to the specified year.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"leap_year_rule\": (year) =&gt; Math.floor(year / 4) - Math.floor(year / 100) + Math.floor(year / 400),</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">// names of the days of the week. It is assumed weeklengths don't change</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"weekdays\": [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">// year when the clock starts and time is recorded as seconds from this 1/1/clock_start_year 00:00:00. If is set to 1970 as a unix joke. you can set it to 0.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"clock_start_year\": 1970,</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">// day of the week of 0/0/0 00:00:00</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"first_day\": 6,</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"notes\": {},</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"hours_per_day\": 24,</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"seconds_per_minute\": 60,</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"minutes_per_hour\": 60,</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">// Is there a year</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">\"has_year_0\": false</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">}</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Initialize DTCalc with the new calendar via DTCalc._createFromData(GregorianCalendar). All module intialisation fires on the setup/ready hooks so you can set the calendar on the init hook and all should be fine.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://gitlab.com/tposney/about-time\">https://gitlab.com/tposney/about-time</a></p>\n</div>\n</div>\n</div>","_id":"yTPel8c4FBJvP4A8"}
{"name":"Actually Private Rolls","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1 style=\"margin: 0in; font-family: Calibri; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Actually Private Rolls</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Hides Private GM Rolls completely rather than just obfuscating the result. This can be toggled on or off in the Settings Menu.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://github.com/syl3r86/Actually-Private-Rolls\">https://github.com/syl3r86/Actually-Private-Rolls</a></p>","_id":"4isHgEzzRPHCweVv"}
{"name":"Adventure Import Export","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1 style=\"margin: 0in; font-family: Calibri; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Adventure Import Export</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">A module for Foundry VTT to package and/or install adventures.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">This module allows content creators to package multiple assets within Foundy VTT into a single distributable file that can be shared.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The package will include all the assets created within Foundry VTT (Scenes, Actors, Journals, RollTables, Playlists and Compendiums) and associated non-core images and sounds.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt;\"><span style=\"font-weight: bold; color: #fa0000;\">How To Use</span><span style=\"color: #2e75b5;\">:</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Export</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">To export an adventure, install the module and go to the module settings. Select Export Adventure and select which items you would like to export by selecting the associated checkbox. Next enter an adventure name and/or description and click export. This will export all selected items and download it to the client. This file can then be transfered to another and imported.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Import</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">To import a file, first install the module and go to the module settings to set an import path within the data location. If you click Adventure Import this will create the folder location on the server where you can place the adventure file. Place the adventure file in the folder and got back to the module settings (you may have to close the settings and reopen inorder for the module to populate the file selector dropdown). Select the adventure file to import and click import. The module will create all assets within the adventure (scenes, actors, items, rolltables, playlists, and compendiums), and all images/sounds included as well.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Important Notes</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The game system is stored in the adventure file, and will display a warning if you try to import an adventure using an incompatible game system.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://github.com/cstadther/adventure-import-export\">https://github.com/cstadther/adventure-import-export</a></p>","_id":"solMdOBsi10FXsNy"}
{"name":"Better Ambient Loop","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1 style=\"margin: 0in; font-family: Calibri; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Better Ambient Loop</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Per-client Ambient Sound improvement, allowing for looping without cuts.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The default Ambient Sounds implementation has some silence between the end of the track and the beginning of the loop. This is a limitation of howler.js, and may only affect some clients.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Using this module, the silence can be eliminated for much better sounding loops.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The default offset of -200 will likely be fine for most use cases. A campfire sound for example will work great, as the end and start of the loop do not need to be 'perfect'. However, if you are not satisfied with this offset, each client can modify it for themselves. Please see the video below on how to zero in on the correct offset for your client.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The testsounds are only to help with configuration changes. Once your config is changed, all of your ambientsounds, including ones already placed, should use the new offset, hopefully without the need for a refresh.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Basic configuration</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">If the default offset isn't quite doing it for you, you can configure it yourself with the help of some testsounds.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold; font-style: italic;\">noise.ogg</span> is just 1 second of noise. Useful for checking if the cut is eliminated.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold; font-style: italic;\">beeptest.ogg</span> has two short tones at different pitches at the start and end of the track, and white noise throughout. If you can hear both tones, and the white noise never stops, you should have a fairly solid offset.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<ol style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: Garamond; font-size: 14.0pt; font-weight: normal; font-style: normal;\" type=\"1\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\" value=\"1\"><span style=\"font-family: Garamond; font-size: 14.0pt; font-weight: normal; font-style: normal;\">Create a new Ambient Sound, using one of the test sounds found in modules/BetterAmbientLoop/helpersounds/</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Place a token within the sounds boundary</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Select the token to hear the sound</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Open your module settings &gt; Better Ambient Loop</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Tweak the Audio sprite end offset</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Save</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Repeat 4-6 until satisfied</span></li>\n</ol>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">This should be a fairly simple way to find a decent offset. Remember that each client has their own offset, so if you want to try and get things working as well as possible, it may be worth setting up a test scene with one of these sounds and running your players through the config.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">This configuration should only need to be performed once. Reloading, changing scenes, shutting down foundry etc. will carry your offset over.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">If a player does not experience any silence in Ambient Sounds normally, they can disable Better Ambient Loop from the modules settings.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold; font-style: italic;\">NOTE</span>: This is not a perfect solution, due to the way howler.js works. If your offset is just hitting the end of the track, it may have a slight clip of silence every now and then. The 'safest' method is to give yourself a small buffer, if that's possible for your use-case.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Troubleshooting</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">If Better Ambient Loop doesn't seem to be doing anything, try increasing your Timeout before starting (v1.1+) in the module settings and refreshing.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Since we are unable to tell when the ambient audio is ready, a timeout after canvasReady is the simplest workaround I could find.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Known issues</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Firefox will always have a slight clip of silence, even after reducing the end of the sprite. No obvious way to fix this, but my testing has found that things sound much better in Chrome, with an offset of ~ -200</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://github.com/BlitzKraig/fvtt-BetterAmbientLoop\">https://github.com/BlitzKraig/fvtt-BetterAmbientLoop</a></p>","_id":"72SQcmARuP7odjWk"}
{"name":"Cautious Gamemaster's Pack","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1 style=\"margin: 0in; font-family: Calibri; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Cautious Gamemaster's Pack</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Offers various simple handy options.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<ul style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in;\" type=\"disc\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Disable GM from speaking as PC tokens (Toggle)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Blind chats and rolls made by hidden tokens (Toggle)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Disable using up/down arrow keys to recall previous chats so that they can be used to move the text cursor (Toggle)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Notify whether the other players are typing chat messages (Toggle)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Additional chat commands; /desc for description and /as for In Charactor without tokens</span></li>\n</ul>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://github.com/ShoyuVanilla/FoundryVTT-CGMP\">https://github.com/ShoyuVanilla/FoundryVTT-CGMP</a></p>","_id":"O1Kd1V7Dd8cRt9OA"}
{"name":"EasyTable","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1 style=\"margin: 0in; font-family: Garamond; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">EasyTable</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Simple text-only rollable tables from CSV (or any-SV) data</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Useful for populating a table with character names, prefixes for TokenMold or any other textual data.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">EasyTable will automatically set the roll formula to 1d{number of entries}, and enable Draw With Replacement and Display To Chat. These can still easily be changed by editing the table</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Usage Instructions (Standard)</span></h2>\n<ol style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: Garamond; font-size: 14.0pt; font-weight: normal; font-style: normal;\" type=\"1\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\" value=\"1\"><span style=\"font-family: Garamond; font-size: 14.0pt; font-weight: normal; font-style: normal;\">Go to the Rollable Tables tab in FVTT, click the New EasyTable button.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Fill in the table title, description(optional) and copy/paste your comma-separated values *</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Generate!</span></li>\n</ol>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">*You can now weight your table entries with curly braces</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">eg. val1,val2{2},val3,val4{4} will generate a 1d8 table where val2 is selected on a roll of 2 or 3, and val4 is selected on a roll of 5-8</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Alternate</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Alternate input is designed to allow you to copy and paste data from tables in digital sourcebooks, or from the web.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">As long as the table has the dice roll in column 1 and the value in column 2, you should be able to highlight and copy all of the values to use with EasyTable</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<ol style=\"margin-left: .375in; direction: ltr; unicode-bidi: embed; margin-top: 0in; margin-bottom: 0in; font-family: Garamond; font-size: 14.0pt; font-weight: normal; font-style: normal;\" type=\"1\">\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\" value=\"1\"><span style=\"font-family: Garamond; font-size: 14.0pt; font-weight: normal; font-style: normal;\">Go to your Module Settings and enable the alternate input for EasyTable</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Go to the Rollable Tables tab in FVTT, click the New EasyTable button.</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Fill in the table title, description(optional) and copy/paste some data from a table (e.g The random misfortunes table on </span><a href=\"https://www.5esrd.com/spellcasting/alternate-magic-rules/ritual-magic/#Non-Ritual_Casters\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">https://www.5esrd.com/spellcasting/alternate-magic-rules/ritual-magic/#Non-Ritual_Casters</span></a><span style=\"font-family: Garamond; font-size: 14.0pt;\">)</span></li>\n<li style=\"margin-top: 0; margin-bottom: 0; vertical-align: middle;\"><span style=\"font-family: Garamond; font-size: 14.0pt;\">Generate!</span></li>\n</ol>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://github.com/BlitzKraig/fvtt-EasyTable\">https://github.com/BlitzKraig/fvtt-EasyTable</a></p>","_id":"jk4wRwBdckpGiXz0"}
{"name":"Polling","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1>Usage</h1>\n<p>To create a poll, use&nbsp;/poll&nbsp;chat command. First line becomes the question.</p>\n<p>Each of next lines becomes an answer. Use Shift+Enter to go to new line when writing a message</p>\n<p>Example:</p>\n<pre>/p Ultimate Question of Life, the Universe, and Everything\nStupid answer\nDumb answer\nJust answer\nBarely answer\n42\n&macr;\\_(ツ)_/&macr;</pre>","_id":"OpyvoeyvDMKxF7CR"}
{"name":"Token Hotbar","permission":{"default":0,"s7gxOGja1p9WAX4j":3},"flags":{"journal-links":{"references":{}}},"content":"<h1 style=\"margin: 0in; font-family: Calibri; font-size: 16.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Token Hotbar</span></h1>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Using this Foundry VTT module, you can assign one of the hotbar pages to remember macros per token. If the token is linked to an actor, the hotbar will be associated with the actor.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Features</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Dynamically change the hotbar</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Based on your settings, one page of the macro hotbar will be used to dynamically change the macros based on your selected token.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Use an additional hotbar</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Token Hotbar integrates with Norc's Custom Hotbar, keeping the original 5 hotbar pages free and giving you a dedicated Token Hotbar.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Shared Token Hotbar</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The token hotbar can be shared between players. Example: as the player on the right makes a change, the hotbar of the player on the left gets reloaded.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Lock Shared Hotbar</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">The shared hotbar can also be locked, so that only the GMs can edit it.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Automatically switch hotbar pages</span></p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">When selecting a token with macros on its hotbar, it will automatically switch to the right page. When deselecting, it will switch back to the previous page you were on.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<h2 style=\"margin: 0in; font-family: Calibri; font-size: 14.0pt; color: #fa0000;\"><span style=\"font-weight: bold;\">Settings</span></h2>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Page</span>: the hotbar page to use as token hotbar.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Link to actor</span>: link the token hotbar to the linked actor, such that for each linked token of this actor, the same token hotbar will be displayed.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Always link to actor</span>: link the hotbar to the actor, even if the token itself is not linked.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Share the hotbar with other players</span>: every player will see the same hotbar for the particular token.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Locked shared hotbar:</span> only GMs can modify hotbars (requires the above setting).</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Use Custom Hotbar:</span> Use the additional hotbar provided by Norc's Custom Hotbar module.</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\"><span style=\"font-weight: bold;\">Debug Mode:</span> Show detailed messages in the console (F12).</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">&nbsp;</p>\n<p style=\"margin: 0in; font-family: Garamond; font-size: 14.0pt;\">Project URL: <a href=\"https://github.com/janssen-io/foundry-token-hotbar\">https://github.com/janssen-io/foundry-token-hotbar</a></p>","_id":"QdGsgplO7GwXh9kI"}
